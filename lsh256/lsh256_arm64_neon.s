//go:build arm64 && !purego
// +build arm64,!purego

// GENERATED BY goat
// EDITED BY RYUANERIN
// -- DO NOT EDIT

#include "textflag.h"

TEXT ·__lsh256_neon_init(SB), NOSPLIT, $16
	MOVD	ctx+0(FP), R0
	MOVD	algtype+8(FP), R1

	MOVD	R1, 0(R0)
	MOVD	ZR, 16(R0)

	CMP		$32, R1
	BEQ		LSH512_INIT_256

LSH512_INIT_224:
	MOVD	·iv224(SB), R8
	B		LSH256_INIT_RET

LSH512_INIT_256:
	MOVD	·iv256(SB), R8

LSH256_INIT_RET:
	FMOVQ	0x00(R8), F0
	FMOVQ	0x10(R8), F1
	FMOVQ	0x20(R8), F2
	FMOVQ	0x30(R8), F3

	FSTPQ	(F0, F1), 32(R0)
	FSTPQ	(F2, F3), 64(R0)

	RET

DATA ·lCPI1_0<>+0x000(SB)/4, $0x0
DATA ·lCPI1_0<>+0x004(SB)/4, $0x8
DATA ·lCPI1_0<>+0x008(SB)/4, $0x10
DATA ·lCPI1_0<>+0x00C(SB)/4, $0x18

DATA ·lCPI1_0<>+0x010(SB)/4, $0xffffffe0
DATA ·lCPI1_0<>+0x014(SB)/4, $0xffffffe8
DATA ·lCPI1_0<>+0x018(SB)/4, $0xfffffff0
DATA ·lCPI1_0<>+0x01C(SB)/4, $0xfffffff8

DATA ·lCPI1_0<>+0x020(SB)/4, $0x18
DATA ·lCPI1_0<>+0x024(SB)/4, $0x10
DATA ·lCPI1_0<>+0x028(SB)/4, $0x8
DATA ·lCPI1_0<>+0x02C(SB)/4, $0x0

DATA ·lCPI1_0<>+0x030(SB)/4, $0xfffffff8
DATA ·lCPI1_0<>+0x034(SB)/4, $0xfffffff0
DATA ·lCPI1_0<>+0x038(SB)/4, $0xffffffe8
DATA ·lCPI1_0<>+0x03C(SB)/4, $0xffffffe0
GLOBL ·lCPI1_0<>(SB), NOPTR|RODATA, $64

TEXT ·__lsh256_neon_update(SB), NOSPLIT, $32
	MOVD	ctx+0(FP), R0
	MOVD	data_base+8(FP), R1
	MOVD	data_len+16(FP), R2
	//		data_len+24
										// ; %bb.0:
	WORD	$0xa9bf7bfd					//     stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD	$0x910003fd					//     mov	x29, sp
	WORD	$0xb940100e					//     ldr	w14, [x0, #16]
	WORD	$0x8b0201c8					//     add	x8, x14, x2
	WORD	$0xf101fd1f					//     cmp	x8, #127
	BHI 	LBB1_8						//     b.hi	LBB1_8
										// ; %bb.1:
	WORD	$0x7100045f					//     cmp	w2, #1
	BLT		LBB1_7						//     b.lt	LBB1_7
										// ; %bb.2:
	WORD	$0x92407c48					//     and	x8, x2, #0xffffffff
	WORD	$0xf100211f					//     cmp	x8, #8
	BLO		LBB1_4						//     b.lo	LBB1_4
										// ; %bb.3:
	WORD	$0x8b0e0009					//     add	x9, x0, x14
	WORD	$0xcb010129					//     sub	x9, x9, x1
	WORD	$0x91018129					//     add	x9, x9, #96
	WORD	$0xf101013f					//     cmp	x9, #64
	BHS		LBB1_31						//     b.hs	LBB1_31
LBB1_4:									// LBB1_4:
	WORD	$0xd2800009					//     mov	x9, #0                          ; =0x0
LBB1_5:									// LBB1_5:
	WORD	$0xcb090108					//     sub	x8, x8, x9
	WORD	$0x8b0e012a					//     add	x10, x9, x14
	WORD	$0x8b00014a					//     add	x10, x10, x0
	WORD	$0x9101814a					//     add	x10, x10, #96
	WORD	$0x8b090029					//     add	x9, x1, x9
LBB1_6:									// LBB1_6:                                 ; =>This Inner Loop Header: Depth=1
	WORD	$0x3840152b					//     ldrb	w11, [x9], #1
	WORD	$0x3800154b					//     strb	w11, [x10], #1
	WORD	$0xf1000508					//     subs	x8, x8, #1
	BNE		LBB1_6						//     b.ne	LBB1_6
LBB1_7:									// LBB1_7:
	WORD	$0x0b0201c2					//     add	w2, w14, w2
	B		LBB1_29						//     b	LBB1_29
LBB1_8:									// LBB1_8:
	MOVD	$·lCPI1_0<>(SB), R9			//     adrp	x9, lCPI1_0@PAGE
										//     adrp	x10, lCPI1_1@PAGE
										//     adrp	x11, lCPI1_2@PAGE
										//     adrp	x12, lCPI1_3@PAGE
	MOVD	·step+0(SB), R8				//     adrp	x8, _STEP256@PAGE
										//     add	x8, x8, _STEP256@PAGEOFF
	CBZ		R14, LBB1_18				//     cbz	w14, LBB1_18
										// ; %bb.9:
	WORD	$0x5280100d					//     mov	w13, #128                       ; =0x80
	WORD	$0xcb0e01ad					//     sub	x13, x13, x14
	WORD	$0x710005bf					//     cmp	w13, #1
	BLT		LBB1_15						//     b.lt	LBB1_15
										// ; %bb.10:
	WORD	$0x92407daf					//     and	x15, x13, #0xffffffff
	WORD	$0xf10021ff					//     cmp	x15, #8
	BLO		LBB1_12						//     b.lo	LBB1_12
										// ; %bb.11:
	WORD	$0x8b0e0010					//     add	x16, x0, x14
	WORD	$0xcb010210					//     sub	x16, x16, x1
	WORD	$0x91018210					//     add	x16, x16, #96
	WORD	$0xf101021f					//     cmp	x16, #64
	BHS		LBB1_35						//     b.hs	LBB1_35
LBB1_12:								// LBB1_12:
	WORD	$0xd2800010					//     mov	x16, #0                         ; =0x0
LBB1_13:								// LBB1_13:
	WORD	$0xcb1001ef					//     sub	x15, x15, x16
	WORD	$0x8b0e020e					//     add	x14, x16, x14
	WORD	$0x8b0001ce					//     add	x14, x14, x0
	WORD	$0x910181ce					//     add	x14, x14, #96
	WORD	$0x8b100030					//     add	x16, x1, x16
LBB1_14:								// LBB1_14:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0x38401611					//     ldrb	w17, [x16], #1
	WORD	$0x380015d1					//     strb	w17, [x14], #1
	WORD	$0xf10005ef					//     subs	x15, x15, #1
	BNE		LBB1_14						//     b.ne	LBB1_14
LBB1_15:								// LBB1_15:
	WORD	$0xd280000e					//     mov	x14, #0                         ; =0x0
	WORD	$0xad430403					//     ldp	q3, q1, [x0, #96]
	WORD	$0xad440002					//     ldp	q2, q0, [x0, #128]
	WORD	$0xad454810					//     ldp	q16, q18, [x0, #160]
	WORD	$0xad461404					//     ldp	q4, q5, [x0, #192]
	WORD	$0xad415c16					//     ldp	q22, q23, [x0, #32]
	WORD	$0xad425414					//     ldp	q20, q21, [x0, #64]
	FMOVQ	0x00(R9), F6				//     ldr	q6, [x9, lCPI1_0@PAGEOFF]
	FMOVQ	0x10(R9), F7				//     ldr	q7, [x10, lCPI1_1@PAGEOFF]
	FMOVQ	0x20(R9), F17				//     ldr	q17, [x11, lCPI1_2@PAGEOFF]
	FMOVQ	0x30(R9), F19				//     ldr	q19, [x12, lCPI1_3@PAGEOFF]
LBB1_16:								// LBB1_16:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0x8b0e010f					//     add	x15, x8, x14
	WORD	$0xad4065f8					//     ldp	q24, q25, [x15]
	WORD	$0x6e231ed6					//     eor.16b	v22, v22, v3
	WORD	$0x6e211ef7					//     eor.16b	v23, v23, v1
	WORD	$0x6e221e94					//     eor.16b	v20, v20, v2
	WORD	$0x6e201eb5					//     eor.16b	v21, v21, v0
	WORD	$0x4eb68696					//     add.4s	v22, v20, v22
	WORD	$0x4eb786b7					//     add.4s	v23, v21, v23
	WORD	$0x4f3d56da					//     shl.4s	v26, v22, #29
	WORD	$0x6f3d46da					//     sri.4s	v26, v22, #3
	WORD	$0x4f3d56f6					//     shl.4s	v22, v23, #29
	WORD	$0x6f3d46f6					//     sri.4s	v22, v23, #3
	WORD	$0x6e381f57					//     eor.16b	v23, v26, v24
	WORD	$0x6e391ed6					//     eor.16b	v22, v22, v25
	WORD	$0x4eb486f4					//     add.4s	v20, v23, v20
	WORD	$0x4eb586d5					//     add.4s	v21, v22, v21
	WORD	$0x4eb48698					//     add.4s	v24, v20, v20
	WORD	$0x6f214698					//     sri.4s	v24, v20, #31
	WORD	$0x4eb586b4					//     add.4s	v20, v21, v21
	WORD	$0x6f2146b4					//     sri.4s	v20, v21, #31
	WORD	$0x4eb78715					//     add.4s	v21, v24, v23
	WORD	$0x4eb68696					//     add.4s	v22, v20, v22
	WORD	$0x6ea64717					//     ushl.4s	v23, v24, v6
	WORD	$0x6ea74718					//     ushl.4s	v24, v24, v7
	WORD	$0x6e371f17					//     eor.16b	v23, v24, v23
	WORD	$0x6eb14698					//     ushl.4s	v24, v20, v17
	WORD	$0x6eb34694					//     ushl.4s	v20, v20, v19
	WORD	$0x6e381e94					//     eor.16b	v20, v20, v24
	WORD	$0x6e1542b8					//     ext.16b	v24, v21, v21, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e1822b9					//     ext.8b	v25, v21, v24, #4
	WORD	$0x2e152315					//     ext.8b	v21, v24, v21, #4
	WORD	$0x6e180735					//     mov.d	v21[1], v25[0]
	WORD	$0x6e1642d8					//     ext.16b	v24, v22, v22, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e1822d9					//     ext.8b	v25, v22, v24, #4
	WORD	$0x2e162316					//     ext.8b	v22, v24, v22, #4
	WORD	$0x6e180736					//     mov.d	v22[1], v25[0]
	WORD	$0x6e1762f7					//     ext.16b	v23, v23, v23, #12
	WORD	$0x4ea00af7					//     rev64.4s	v23, v23
	WORD	$0x6e146294					//     ext.16b	v20, v20, v20, #12
	WORD	$0x4ea00a94					//     rev64.4s	v20, v20
	WORD	$0x6e034078					//     ext.16b	v24, v3, v3, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x6e180478					//     mov.d	v24[1], v3[0]
	WORD	$0x6e024043					//     ext.16b	v3, v2, v2, #8
	WORD	$0x0ea00879					//     rev64.2s	v25, v3
	WORD	$0x6e180459					//     mov.d	v25[1], v2[0]
	WORD	$0x6e016021					//     ext.16b	v1, v1, v1, #12
	WORD	$0x6e006000					//     ext.16b	v0, v0, v0, #12
	WORD	$0x4eb88603					//     add.4s	v3, v16, v24
	WORD	$0x4ea18641					//     add.4s	v1, v18, v1
	WORD	$0x4eb98482					//     add.4s	v2, v4, v25
	WORD	$0x4ea084a0					//     add.4s	v0, v5, v0
	WORD	$0xad4165f8					//     ldp	q24, q25, [x15, #32]
	WORD	$0x6e301ed6					//     eor.16b	v22, v22, v16
	WORD	$0x6e321e94					//     eor.16b	v20, v20, v18
	WORD	$0x6e241eb5					//     eor.16b	v21, v21, v4
	WORD	$0x6e251ef7					//     eor.16b	v23, v23, v5
	WORD	$0x4eb586d6					//     add.4s	v22, v22, v21
	WORD	$0x4eb78694					//     add.4s	v20, v20, v23
	WORD	$0x4f2556da					//     shl.4s	v26, v22, #5
	WORD	$0x6f2546da					//     sri.4s	v26, v22, #27
	WORD	$0x4f255696					//     shl.4s	v22, v20, #5
	WORD	$0x6f254696					//     sri.4s	v22, v20, #27
	WORD	$0x6e381f54					//     eor.16b	v20, v26, v24
	WORD	$0x6e391ed6					//     eor.16b	v22, v22, v25
	WORD	$0x4eb58695					//     add.4s	v21, v20, v21
	WORD	$0x4eb786d7					//     add.4s	v23, v22, v23
	WORD	$0x4f3156b8					//     shl.4s	v24, v21, #17
	WORD	$0x6f3146b8					//     sri.4s	v24, v21, #15
	WORD	$0x4f3156f5					//     shl.4s	v21, v23, #17
	WORD	$0x6f3146f5					//     sri.4s	v21, v23, #15
	WORD	$0x4eb48714					//     add.4s	v20, v24, v20
	WORD	$0x4eb686b6					//     add.4s	v22, v21, v22
	WORD	$0x6ea64717					//     ushl.4s	v23, v24, v6
	WORD	$0x6ea74718					//     ushl.4s	v24, v24, v7
	WORD	$0x6e371f17					//     eor.16b	v23, v24, v23
	WORD	$0x6eb146b8					//     ushl.4s	v24, v21, v17
	WORD	$0x6eb346b5					//     ushl.4s	v21, v21, v19
	WORD	$0x6e381eb8					//     eor.16b	v24, v21, v24
	WORD	$0x6e144295					//     ext.16b	v21, v20, v20, #8
	WORD	$0x0ea00ab5					//     rev64.2s	v21, v21
	WORD	$0x2e152299					//     ext.8b	v25, v20, v21, #4
	WORD	$0x2e1422b4					//     ext.8b	v20, v21, v20, #4
	WORD	$0x6e180734					//     mov.d	v20[1], v25[0]
	WORD	$0x6e1642d5					//     ext.16b	v21, v22, v22, #8
	WORD	$0x0ea00ab5					//     rev64.2s	v21, v21
	WORD	$0x2e1522d9					//     ext.8b	v25, v22, v21, #4
	WORD	$0x2e1622b6					//     ext.8b	v22, v21, v22, #4
	WORD	$0x6e180736					//     mov.d	v22[1], v25[0]
	WORD	$0x6e1762f5					//     ext.16b	v21, v23, v23, #12
	WORD	$0x4ea00ab5					//     rev64.4s	v21, v21
	WORD	$0x6e186317					//     ext.16b	v23, v24, v24, #12
	WORD	$0x4ea00af7					//     rev64.4s	v23, v23
	WORD	$0x6e104218					//     ext.16b	v24, v16, v16, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x6e180618					//     mov.d	v24[1], v16[0]
	WORD	$0x6e126252					//     ext.16b	v18, v18, v18, #12
	WORD	$0x6e044090					//     ext.16b	v16, v4, v4, #8
	WORD	$0x0ea00a19					//     rev64.2s	v25, v16
	WORD	$0x6e180499					//     mov.d	v25[1], v4[0]
	WORD	$0x6e0560a5					//     ext.16b	v5, v5, v5, #12
	WORD	$0x4ea38710					//     add.4s	v16, v24, v3
	WORD	$0x4eb28432					//     add.4s	v18, v1, v18
	WORD	$0x4ea28724					//     add.4s	v4, v25, v2
	WORD	$0x4ea084a5					//     add.4s	v5, v5, v0
	WORD	$0x910101ce					//     add	x14, x14, #64
	WORD	$0x710d01df					//     cmp	w14, #832
	BNE		LBB1_16    					//     b.ne	LBB1_16
										// ; %bb.17:
	WORD	$0x6e231ec3					//     eor.16b	v3, v22, v3
	WORD	$0x6e211ee1					//     eor.16b	v1, v23, v1
	WORD	$0xad010403					//     stp	q3, q1, [x0, #32]
	WORD	$0x6e221e81					//     eor.16b	v1, v20, v2
	WORD	$0x6e201ea0					//     eor.16b	v0, v21, v0
	WORD	$0xad020001					//     stp	q1, q0, [x0, #64]
	WORD	$0x8b0d0021					//     add	x1, x1, x13
	WORD	$0xcb0d0042					//     sub	x2, x2, x13
	WORD	$0xb900101f					//     str	wzr, [x0, #16]
LBB1_18:								// LBB1_18:
	WORD	$0xf102005f					//     cmp	x2, #128
	BLO		LBB1_23						//     b.lo	LBB1_23
										// ; %bb.19:
	WORD	$0xad415c15					//     ldp	q21, q23, [x0, #32]
	WORD	$0xad425814					//     ldp	q20, q22, [x0, #64]
	FMOVQ	0x00(R9), F0				//     ldr	q0, [x9, lCPI1_0@PAGEOFF]
	FMOVQ	0x10(R9), F1				//     ldr	q1, [x10, lCPI1_1@PAGEOFF]
	FMOVQ	0x20(R9), F2				//     ldr	q2, [x11, lCPI1_2@PAGEOFF]
	FMOVQ	0x30(R9), F3				//     ldr	q3, [x12, lCPI1_3@PAGEOFF]
LBB1_20:								// LBB1_20:                                ; =>This Loop Header: Depth=1
										//                                         ;     Child Loop BB1_21 Depth 2
	WORD	$0xd2800009					//     mov	x9, #0                          ; =0x0
	WORD	$0xad401427					//     ldp	q7, q5, [x1]
	WORD	$0xad411026					//     ldp	q6, q4, [x1, #32]
	WORD	$0xad424c32					//     ldp	q18, q19, [x1, #64]
	WORD	$0xad434430					//     ldp	q16, q17, [x1, #96]
LBB1_21:								// LBB1_21:                                ;   Parent Loop BB1_20 Depth=1
										//                                         ; =>  This Inner Loop Header: Depth=2
	WORD	$0x8b09010a					//     add	x10, x8, x9
	WORD	$0xad406558					//     ldp	q24, q25, [x10]
	WORD	$0x6e271eb5					//     eor.16b	v21, v21, v7
	WORD	$0x6e251ef7					//     eor.16b	v23, v23, v5
	WORD	$0x6e261e94					//     eor.16b	v20, v20, v6
	WORD	$0x6e241ed6					//     eor.16b	v22, v22, v4
	WORD	$0x4eb58695					//     add.4s	v21, v20, v21
	WORD	$0x4eb786d7					//     add.4s	v23, v22, v23
	WORD	$0x4f3d56ba					//     shl.4s	v26, v21, #29
	WORD	$0x6f3d46ba					//     sri.4s	v26, v21, #3
	WORD	$0x4f3d56f5					//     shl.4s	v21, v23, #29
	WORD	$0x6f3d46f5					//     sri.4s	v21, v23, #3
	WORD	$0x6e381f57					//     eor.16b	v23, v26, v24
	WORD	$0x6e391eb5					//     eor.16b	v21, v21, v25
	WORD	$0x4eb486f4					//     add.4s	v20, v23, v20
	WORD	$0x4eb686b6					//     add.4s	v22, v21, v22
	WORD	$0x4eb48698					//     add.4s	v24, v20, v20
	WORD	$0x6f214698					//     sri.4s	v24, v20, #31
	WORD	$0x4eb686d4					//     add.4s	v20, v22, v22
	WORD	$0x6f2146d4					//     sri.4s	v20, v22, #31
	WORD	$0x4eb78716					//     add.4s	v22, v24, v23
	WORD	$0x4eb58695					//     add.4s	v21, v20, v21
	WORD	$0x6ea04717					//     ushl.4s	v23, v24, v0
	WORD	$0x6ea14718					//     ushl.4s	v24, v24, v1
	WORD	$0x6e371f17					//     eor.16b	v23, v24, v23
	WORD	$0x6ea24698					//     ushl.4s	v24, v20, v2
	WORD	$0x6ea34694					//     ushl.4s	v20, v20, v3
	WORD	$0x6e381e94					//     eor.16b	v20, v20, v24
	WORD	$0x6e1642d8					//     ext.16b	v24, v22, v22, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e1822d9					//     ext.8b	v25, v22, v24, #4
	WORD	$0x2e162316					//     ext.8b	v22, v24, v22, #4
	WORD	$0x6e180736					//     mov.d	v22[1], v25[0]
	WORD	$0x6e1542b8					//     ext.16b	v24, v21, v21, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e1822b9					//     ext.8b	v25, v21, v24, #4
	WORD	$0x2e152315					//     ext.8b	v21, v24, v21, #4
	WORD	$0x6e180735					//     mov.d	v21[1], v25[0]
	WORD	$0x6e1762f7					//     ext.16b	v23, v23, v23, #12
	WORD	$0x4ea00af7					//     rev64.4s	v23, v23
	WORD	$0x6e146294					//     ext.16b	v20, v20, v20, #12
	WORD	$0x4ea00a94					//     rev64.4s	v20, v20
	WORD	$0x6e0740f8					//     ext.16b	v24, v7, v7, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x6e1804f8					//     mov.d	v24[1], v7[0]
	WORD	$0x6e0640c7					//     ext.16b	v7, v6, v6, #8
	WORD	$0x0ea008f9					//     rev64.2s	v25, v7
	WORD	$0x6e1804d9					//     mov.d	v25[1], v6[0]
	WORD	$0x6e0560a5					//     ext.16b	v5, v5, v5, #12
	WORD	$0x6e046084					//     ext.16b	v4, v4, v4, #12
	WORD	$0x4eb88647					//     add.4s	v7, v18, v24
	WORD	$0x4ea58665					//     add.4s	v5, v19, v5
	WORD	$0x4eb98606					//     add.4s	v6, v16, v25
	WORD	$0x4ea48624					//     add.4s	v4, v17, v4
	WORD	$0xad416558					//     ldp	q24, q25, [x10, #32]
	WORD	$0x6e321eb5					//     eor.16b	v21, v21, v18
	WORD	$0x6e331e94					//     eor.16b	v20, v20, v19
	WORD	$0x6e301ed6					//     eor.16b	v22, v22, v16
	WORD	$0x6e311ef7					//     eor.16b	v23, v23, v17
	WORD	$0x4eb686b5					//     add.4s	v21, v21, v22
	WORD	$0x4eb78694					//     add.4s	v20, v20, v23
	WORD	$0x4f2556ba					//     shl.4s	v26, v21, #5
	WORD	$0x6f2546ba					//     sri.4s	v26, v21, #27
	WORD	$0x4f255695					//     shl.4s	v21, v20, #5
	WORD	$0x6f254695					//     sri.4s	v21, v20, #27
	WORD	$0x6e381f54					//     eor.16b	v20, v26, v24
	WORD	$0x6e391eb5					//     eor.16b	v21, v21, v25
	WORD	$0x4eb68696					//     add.4s	v22, v20, v22
	WORD	$0x4eb786b7					//     add.4s	v23, v21, v23
	WORD	$0x4f3156d8					//     shl.4s	v24, v22, #17
	WORD	$0x6f3146d8					//     sri.4s	v24, v22, #15
	WORD	$0x4f3156f6					//     shl.4s	v22, v23, #17
	WORD	$0x6f3146f6					//     sri.4s	v22, v23, #15
	WORD	$0x4eb48714					//     add.4s	v20, v24, v20
	WORD	$0x4eb586d5					//     add.4s	v21, v22, v21
	WORD	$0x6ea04717					//     ushl.4s	v23, v24, v0
	WORD	$0x6ea14718					//     ushl.4s	v24, v24, v1
	WORD	$0x6e371f17					//     eor.16b	v23, v24, v23
	WORD	$0x6ea246d8					//     ushl.4s	v24, v22, v2
	WORD	$0x6ea346d6					//     ushl.4s	v22, v22, v3
	WORD	$0x6e381ed8					//     eor.16b	v24, v22, v24
	WORD	$0x6e144296					//     ext.16b	v22, v20, v20, #8
	WORD	$0x0ea00ad6					//     rev64.2s	v22, v22
	WORD	$0x2e162299					//     ext.8b	v25, v20, v22, #4
	WORD	$0x2e1422d4					//     ext.8b	v20, v22, v20, #4
	WORD	$0x6e180734					//     mov.d	v20[1], v25[0]
	WORD	$0x6e1542b6					//     ext.16b	v22, v21, v21, #8
	WORD	$0x0ea00ad6					//     rev64.2s	v22, v22
	WORD	$0x2e1622b9					//     ext.8b	v25, v21, v22, #4
	WORD	$0x2e1522d5					//     ext.8b	v21, v22, v21, #4
	WORD	$0x6e180735					//     mov.d	v21[1], v25[0]
	WORD	$0x6e1762f6					//     ext.16b	v22, v23, v23, #12
	WORD	$0x4ea00ad6					//     rev64.4s	v22, v22
	WORD	$0x6e186317					//     ext.16b	v23, v24, v24, #12
	WORD	$0x4ea00af7					//     rev64.4s	v23, v23
	WORD	$0x6e124258					//     ext.16b	v24, v18, v18, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x6e180658					//     mov.d	v24[1], v18[0]
	WORD	$0x6e136273					//     ext.16b	v19, v19, v19, #12
	WORD	$0x6e104212					//     ext.16b	v18, v16, v16, #8
	WORD	$0x0ea00a59					//     rev64.2s	v25, v18
	WORD	$0x6e180619					//     mov.d	v25[1], v16[0]
	WORD	$0x6e116231					//     ext.16b	v17, v17, v17, #12
	WORD	$0x4ea78712					//     add.4s	v18, v24, v7
	WORD	$0x4eb384b3					//     add.4s	v19, v5, v19
	WORD	$0x4ea68730					//     add.4s	v16, v25, v6
	WORD	$0x4ea48631					//     add.4s	v17, v17, v4
	WORD	$0x91010129					//     add	x9, x9, #64
	WORD	$0x710d013f					//     cmp	w9, #832
	BNE		LBB1_21						//     b.ne	LBB1_21
										// ; %bb.22:                               ;   in Loop: Header=BB1_20 Depth=1
	WORD	$0x6e271eb5					//     eor.16b	v21, v21, v7
	WORD	$0x6e251ef7					//     eor.16b	v23, v23, v5
	WORD	$0xad015c15					//     stp	q21, q23, [x0, #32]
	WORD	$0x6e261e94					//     eor.16b	v20, v20, v6
	WORD	$0x6e241ed6					//     eor.16b	v22, v22, v4
	WORD	$0xad025814					//     stp	q20, q22, [x0, #64]
	WORD	$0x91020021					//     add	x1, x1, #128
	WORD	$0xd1020042					//     sub	x2, x2, #128
	WORD	$0xf101fc5f					//     cmp	x2, #127
	BHI		LBB1_20                     //     b.hi	LBB1_20
LBB1_23:								// LBB1_23:
	CBZ		R2, LBB1_30                 //     cbz	x2, LBB1_30
										// ; %bb.24:
	WORD	$0xf100205f					//     cmp	x2, #8
	BLO		LBB1_26						//     b.lo	LBB1_26
										// ; %bb.25:
	WORD	$0xcb010008					//     sub	x8, x0, x1
	WORD	$0x91018108					//     add	x8, x8, #96
	WORD	$0xf101011f					//     cmp	x8, #64
	BHS		LBB1_33						//     b.hs	LBB1_33
LBB1_26:								// LBB1_26:
	WORD	$0xd2800008					//     mov	x8, #0                          ; =0x0
LBB1_27:								// LBB1_27:
	WORD	$0xcb080049					//     sub	x9, x2, x8
	WORD	$0x8b00010a					//     add	x10, x8, x0
	WORD	$0x9101814a					//     add	x10, x10, #96
	WORD	$0x8b080028					//     add	x8, x1, x8
LBB1_28:								// LBB1_28:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0x3840150b					//     ldrb	w11, [x8], #1
	WORD	$0x3800154b					//     strb	w11, [x10], #1
	WORD	$0xf1000529					//     subs	x9, x9, #1
	BNE		LBB1_28						//     b.ne	LBB1_28
LBB1_29:								// LBB1_29:
	WORD	$0xb9001002					//     str	w2, [x0, #16]
LBB1_30:								// LBB1_30:
	WORD	$0xa8c17bfd					//     ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	RET									//     ret
LBB1_31:								// LBB1_31:
	WORD	$0xf101011f					//     cmp	x8, #64
	BHS		LBB1_37						// b.hs	LBB1_37
										// ; %bb.32:
	WORD	$0xd2800009					//     mov	x9, #0                          ; =0x0
	B		LBB1_41						//     b	LBB1_41
LBB1_33:								// LBB1_33:
	WORD	$0xf101005f					//     cmp	x2, #64
	BHS		LBB1_44						//     b.hs	LBB1_44
										// ; %bb.34:
	WORD	$0xd2800008					//     mov	x8, #0                          ; =0x0
	B		LBB1_48						//     b	LBB1_48
LBB1_35:								// LBB1_35:
	WORD	$0xf10101ff					//     cmp	x15, #64
	BHS		LBB1_51						//     b.hs	LBB1_51
										// ; %bb.36:
	WORD	$0xd2800010					//     mov	x16, #0                         ; =0x0
	B		LBB1_55						//     b	LBB1_55
LBB1_37:								// LBB1_37:
	WORD	$0x9240144a					//     and	x10, x2, #0x3f
	WORD	$0xcb0a0109					//     sub	x9, x8, x10
	WORD	$0x8b0001cb					//     add	x11, x14, x0
	WORD	$0x9102416b					//     add	x11, x11, #144
	WORD	$0x9100802c					//     add	x12, x1, #32
	WORD	$0xaa0903ed					//     mov	x13, x9
LBB1_38:								// LBB1_38:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xad7f0580					//     ldp	q0, q1, [x12, #-32]
	WORD	$0xacc20d82					//     ldp	q2, q3, [x12], #64
	WORD	$0xad3e8560					//     stp	q0, q1, [x11, #-48]
	WORD	$0xad3f8d62					//     stp	q2, q3, [x11, #-16]
	WORD	$0x9101016b					//     add	x11, x11, #64
	WORD	$0xf10101ad					//     subs	x13, x13, #64
	BNE		LBB1_38						//     b.ne	LBB1_38
										// ; %bb.39:
	CBZ		R10, LBB1_7					//     cbz	x10, LBB1_7
										// ; %bb.40:
	WORD	$0xf100215f					//     cmp	x10, #8
	BLO		LBB1_5						//     b.lo	LBB1_5
LBB1_41:								// LBB1_41:
	WORD	$0xaa0903ed					//     mov	x13, x9
	WORD	$0x9240084a					//     and	x10, x2, #0x7
	WORD	$0x8b09002b					//     add	x11, x1, x9
	WORD	$0xcb0a0109					//     sub	x9, x8, x10
	WORD	$0x8b0e01ac					//     add	x12, x13, x14
	WORD	$0x8b00018c					//     add	x12, x12, x0
	WORD	$0x9101818c					//     add	x12, x12, #96
	WORD	$0x8b0a01ad					//     add	x13, x13, x10
	WORD	$0xcb0801ad					//     sub	x13, x13, x8
LBB1_42:								// LBB1_42:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xfc408560					//     ldr	d0, [x11], #8
	WORD	$0xfc008580					//     str	d0, [x12], #8
	WORD	$0xb10021ad					//     adds	x13, x13, #8
	BNE		LBB1_42						//     b.ne	LBB1_42
										// ; %bb.43:
	CBNZ	R10, LBB1_5					//     cbnz	x10, LBB1_5
	B		LBB1_7						//     b	LBB1_7
LBB1_44:								// LBB1_44:
	WORD	$0x927a0048					//     and	x8, x2, #0x40
	WORD	$0x91008029					//     add	x9, x1, #32
	WORD	$0x9102400a					//     add	x10, x0, #144
	WORD	$0xaa0803eb					//     mov	x11, x8
LBB1_45:								// LBB1_45:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xad7f0520					//     ldp	q0, q1, [x9, #-32]
	WORD	$0xacc20d22					//     ldp	q2, q3, [x9], #64
	WORD	$0xad3e8540					//     stp	q0, q1, [x10, #-48]
	WORD	$0xad3f8d42					//     stp	q2, q3, [x10, #-16]
	WORD	$0x9101014a					//     add	x10, x10, #64
	WORD	$0xf101016b					//     subs	x11, x11, #64
	BNE		LBB1_45						//     b.ne	LBB1_45
										// ; %bb.46:
	WORD	$0xeb08005f					//     cmp	x2, x8
	BEQ		LBB1_29						//     b.eq	LBB1_29
										// ; %bb.47:
	WORD	$0xf27d085f					//     tst	x2, #0x38
	BEQ		LBB1_27						//     b.eq	LBB1_27
LBB1_48:								// LBB1_48:
	WORD	$0xaa0803eb					//     mov	x11, x8
	WORD	$0x927d0c48					//     and	x8, x2, #0x78
	WORD	$0x8b0b0029					//     add	x9, x1, x11
	WORD	$0x8b00016a					//     add	x10, x11, x0
	WORD	$0x9101814a					//     add	x10, x10, #96
	WORD	$0xcb08016b					//     sub	x11, x11, x8
LBB1_49:								// LBB1_49:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xfc408520					//     ldr	d0, [x9], #8
	WORD	$0xfc008540					//     str	d0, [x10], #8
	WORD	$0xb100216b					//     adds	x11, x11, #8
	BNE		LBB1_49						//     b.ne	LBB1_49
										// ; %bb.50:
	WORD	$0xeb08005f					//     cmp	x2, x8
	BEQ		LBB1_29						//     b.eq	LBB1_29
	B		LBB1_27						//     b	LBB1_27
LBB1_51:								// LBB1_51:
	WORD	$0x924015b1					//     and	x17, x13, #0x3f
	WORD	$0xcb1101f0					//     sub	x16, x15, x17
	WORD	$0x8b0001c3					//     add	x3, x14, x0
	WORD	$0x91024063					//     add	x3, x3, #144
	WORD	$0x91008024					//     add	x4, x1, #32
	WORD	$0xaa1003e5					//     mov	x5, x16
LBB1_52:								// LBB1_52:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xad7f0480					//     ldp	q0, q1, [x4, #-32]
	WORD	$0xacc20c82					//     ldp	q2, q3, [x4], #64
	WORD	$0xad3e8460					//     stp	q0, q1, [x3, #-48]
	WORD	$0xad3f8c62					//     stp	q2, q3, [x3, #-16]
	WORD	$0x91010063					//     add	x3, x3, #64
	WORD	$0xf10100a5					//     subs	x5, x5, #64
	BNE		LBB1_52						//     b.ne	LBB1_52
										// ; %bb.53:
	CBZ		R17, LBB1_15				//     cbz	x17, LBB1_15
										// ; %bb.54:
	WORD	$0xf100223f					//     cmp	x17, #8
	BLO		LBB1_13						//     b.lo	LBB1_13
LBB1_55:								// LBB1_55:
	WORD	$0xaa1003e5					//     mov	x5, x16
	WORD	$0x924009b1					//     and	x17, x13, #0x7
	WORD	$0x8b100023					//     add	x3, x1, x16
	WORD	$0xcb1101f0					//     sub	x16, x15, x17
	WORD	$0x8b0e00a4					//     add	x4, x5, x14
	WORD	$0x8b000084					//     add	x4, x4, x0
	WORD	$0x91018084					//     add	x4, x4, #96
	WORD	$0x8b1100a5					//     add	x5, x5, x17
	WORD	$0xcb0f00a5					//     sub	x5, x5, x15
LBB1_56:								// LBB1_56:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xfc408460					//     ldr	d0, [x3], #8
	WORD	$0xfc008480					//     str	d0, [x4], #8
	WORD	$0xb10020a5					//     adds	x5, x5, #8
	BNE		LBB1_56						//     b.ne	LBB1_56
										// ; %bb.57:
	CBNZ	R17, LBB1_13				//     cbnz	x17, LBB1_13
	B		LBB1_15						//     b	LBB1_15

TEXT ·__lsh256_neon_final(SB), NOSPLIT, $32
	MOVD ctx+0(FP), R0
	MOVD hashval_base+8(FP), R1
	//hashval_len+16
	//hashval_cap+24

										// ; %bb.0:
	WORD	$0xa9bf7bfd					//     stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD	$0x910003fd					//     mov	x29, sp
	WORD	$0xb9401009					//     ldr	w9, [x0, #16]
	WORD	$0x8b090008					//     add	x8, x0, x9
	WORD	$0x5280100a					//     mov	w10, #128                       ; =0x80
	WORD	$0x3901810a					//     strb	w10, [x8, #96]
	WORD	$0x11000528					//     add	w8, w9, #1
	WORD	$0x7101fd1f					//     cmp	w8, #127
	BHI		LBB2_14						//     b.hi LBB2_14
										// ; %bb.1:
	WORD	$0x52800fea					//     mov	w10, #127                       ; =0x7f
	WORD	$0x4b090149					//     sub	w9, w10, w9
	WORD	$0x7100213f					//     cmp	w9, #8
	BHS		LBB2_3						//     b.hs	LBB2_3
										// ; %bb.2:
	WORD	$0xd280000a					//     mov	x10, #0                         ; =0x0
	B		LBB2_12						//     b	LBB2_12
LBB2_3:									// LBB2_3:
	WORD	$0x7101013f					//     cmp	w9, #64
	BHS		LBB2_5						//     b.hs	LBB2_5
										// ; %bb.4:
	WORD	$0xd280000a					//     mov	x10, #0                         ; =0x0
	B		LBB2_9						//     b	LBB2_9
LBB2_5:									// LBB2_5:
	WORD	$0x927a652a					//     and	x10, x9, #0xffffffc0
	WORD	$0x8b00010b					//     add	x11, x8, x0
	WORD	$0x9102416b					//     add	x11, x11, #144
	WORD	$0x6f00e400					//     movi.2d	v0, #0000000000000000
	WORD	$0xaa0a03ec					//     mov	x12, x10
LBB2_6:									// LBB2_6:                                 ; =>This Inner Loop Header: Depth=1
	WORD	$0xad3e8160					//     stp	q0, q0, [x11, #-48]
	WORD	$0xad3f8160					//     stp	q0, q0, [x11, #-16]
	WORD	$0x9101016b					//     add	x11, x11, #64
	WORD	$0xf101018c					//     subs	x12, x12, #64
	BNE		LBB2_6						//     b.ne	LBB2_6
										// ; %bb.7:
	WORD	$0xeb09015f					//     cmp	x10, x9
	BEQ		LBB2_14						//     b.eq	LBB2_14
										// ; %bb.8:
	WORD	$0xf27d093f					//     tst	x9, #0x38
	BEQ		LBB2_12						//     b.eq	LBB2_12
LBB2_9:									// LBB2_9:
	WORD	$0xaa0a03ec					//     mov	x12, x10
	WORD	$0x927d712a					//     and	x10, x9, #0xfffffff8
	WORD	$0x8b08018b					//     add	x11, x12, x8
	WORD	$0x8b00016b					//     add	x11, x11, x0
	WORD	$0x9101816b					//     add	x11, x11, #96
	WORD	$0xcb0a018c					//     sub	x12, x12, x10
	WORD	$0x6f00e400					//     movi.2d	v0, #0000000000000000
LBB2_10:								// LBB2_10:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0xfc008560					//     str	d0, [x11], #8
	WORD	$0xb100218c					//     adds	x12, x12, #8
	BNE		LBB2_10						//     b.ne	LBB2_10
										// ; %bb.11:
	WORD	$0xeb09015f					//     cmp	x10, x9
	BEQ		LBB2_14						//     b.eq	LBB2_14
LBB2_12:								// LBB2_12:
	WORD	$0xcb0a0129					//     sub	x9, x9, x10
	WORD	$0x8b080148					//     add	x8, x10, x8
	WORD	$0x8b000108					//     add	x8, x8, x0
	WORD	$0x91018108					//     add	x8, x8, #96
LBB2_13:								// LBB2_13:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0x3800151f					//     strb	wzr, [x8], #1
	WORD	$0xf1000529					//     subs	x9, x9, #1
	BNE		LBB2_13						//     b.ne	LBB2_13
LBB2_14:								// LBB2_14:
	WORD	$0xd2800008					//     mov	x8, #0                          ; =0x0
	WORD	$0xad430003					//     ldp	q3, q0, [x0, #96]
	WORD	$0xad440402					//     ldp	q2, q1, [x0, #128]
	WORD	$0xad454006					//     ldp	q6, q16, [x0, #160]
	WORD	$0xad461404					//     ldp	q4, q5, [x0, #192]
	WORD	$0xad415414					//     ldp	q20, q21, [x0, #32]
	MOVD	$·lCPI1_0<>(SB), R9			//     adrp	x9, lCPI2_0@PAGE
	FMOVQ	0x00(R9), F7				//     ldr	q7, [x9, lCPI2_0@PAGEOFF]
										//     adrp	x9, lCPI2_1@PAGE
	FMOVQ	0x10(R9), F17				//     ldr	q17, [x9, lCPI2_1@PAGEOFF]
										//     adrp	x9, lCPI2_2@PAGE
	FMOVQ	0x20(R9), F18				//     ldr	q18, [x9, lCPI2_2@PAGEOFF]
										//     adrp	x9, lCPI2_3@PAGE
	FMOVQ	0x30(R9), F19				//     ldr	q19, [x9, lCPI2_3@PAGEOFF]
	MOVD	·step(SB), R9       		//     adrp	x9, _STEP256@PAGE
					                	//     add	x9, x9, _STEP256@PAGEOFF
	WORD	$0xad425c16					//     ldp	q22, q23, [x0, #64]
LBB2_15:								// LBB2_15:                                ; =>This Inner Loop Header: Depth=1
	WORD	$0x8b08012a					//     add	x10, x9, x8
	WORD	$0xad406558					//     ldp	q24, q25, [x10]
	WORD	$0x6e231e94					//     eor.16b	v20, v20, v3
	WORD	$0x6e201eb5					//     eor.16b	v21, v21, v0
	WORD	$0x6e221ed6					//     eor.16b	v22, v22, v2
	WORD	$0x6e211ef7					//     eor.16b	v23, v23, v1
	WORD	$0x4eb486d4					//     add.4s	v20, v22, v20
	WORD	$0x4eb586f5					//     add.4s	v21, v23, v21
	WORD	$0x4f3d569a					//     shl.4s	v26, v20, #29
	WORD	$0x6f3d469a					//     sri.4s	v26, v20, #3
	WORD	$0x4f3d56b4					//     shl.4s	v20, v21, #29
	WORD	$0x6f3d46b4					//     sri.4s	v20, v21, #3
	WORD	$0x6e381f55					//     eor.16b	v21, v26, v24
	WORD	$0x6e391e94					//     eor.16b	v20, v20, v25
	WORD	$0x4eb686b6					//     add.4s	v22, v21, v22
	WORD	$0x4eb78697					//     add.4s	v23, v20, v23
	WORD	$0x4eb686d8					//     add.4s	v24, v22, v22
	WORD	$0x6f2146d8					//     sri.4s	v24, v22, #31
	WORD	$0x4eb786f6					//     add.4s	v22, v23, v23
	WORD	$0x6f2146f6					//     sri.4s	v22, v23, #31
	WORD	$0x4eb58715					//     add.4s	v21, v24, v21
	WORD	$0x4eb486d4					//     add.4s	v20, v22, v20
	WORD	$0x6ea74717					//     ushl.4s	v23, v24, v7
	WORD	$0x6eb14718					//     ushl.4s	v24, v24, v17
	WORD	$0x6e371f17					//     eor.16b	v23, v24, v23
	WORD	$0x6eb246d8					//     ushl.4s	v24, v22, v18
	WORD	$0x6eb346d6					//     ushl.4s	v22, v22, v19
	WORD	$0x6e381ed6					//     eor.16b	v22, v22, v24
	WORD	$0x6e1542b8					//     ext.16b	v24, v21, v21, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e1822b9					//     ext.8b	v25, v21, v24, #4
	WORD	$0x2e152315					//     ext.8b	v21, v24, v21, #4
	WORD	$0x6e180735					//     mov.d	v21[1], v25[0]
	WORD	$0x6e144298					//     ext.16b	v24, v20, v20, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e182299					//     ext.8b	v25, v20, v24, #4
	WORD	$0x2e142314					//     ext.8b	v20, v24, v20, #4
	WORD	$0x6e180734					//     mov.d	v20[1], v25[0]
	WORD	$0x6e1762f7					//     ext.16b	v23, v23, v23, #12
	WORD	$0x4ea00af7					//     rev64.4s	v23, v23
	WORD	$0x6e1662d6					//     ext.16b	v22, v22, v22, #12
	WORD	$0x4ea00ad6					//     rev64.4s	v22, v22
	WORD	$0x6e034078					//     ext.16b	v24, v3, v3, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x6e180478					//     mov.d	v24[1], v3[0]
	WORD	$0x6e024043					//     ext.16b	v3, v2, v2, #8
	WORD	$0x0ea00879					//     rev64.2s	v25, v3
	WORD	$0x6e180459					//     mov.d	v25[1], v2[0]
	WORD	$0x6e006000					//     ext.16b	v0, v0, v0, #12
	WORD	$0x6e016021					//     ext.16b	v1, v1, v1, #12
	WORD	$0x4eb884c3					//     add.4s	v3, v6, v24
	WORD	$0x4ea08600					//     add.4s	v0, v16, v0
	WORD	$0x4eb98482					//     add.4s	v2, v4, v25
	WORD	$0x4ea184a1					//     add.4s	v1, v5, v1
	WORD	$0xad416558					//     ldp	q24, q25, [x10, #32]
	WORD	$0x6e261e94					//     eor.16b	v20, v20, v6
	WORD	$0x6e301ed6					//     eor.16b	v22, v22, v16
	WORD	$0x6e241eb5					//     eor.16b	v21, v21, v4
	WORD	$0x6e251ef7					//     eor.16b	v23, v23, v5
	WORD	$0x4eb58694					//     add.4s	v20, v20, v21
	WORD	$0x4eb786d6					//     add.4s	v22, v22, v23
	WORD	$0x4f25569a					//     shl.4s	v26, v20, #5
	WORD	$0x6f25469a					//     sri.4s	v26, v20, #27
	WORD	$0x4f2556d4					//     shl.4s	v20, v22, #5
	WORD	$0x6f2546d4					//     sri.4s	v20, v22, #27
	WORD	$0x6e381f56					//     eor.16b	v22, v26, v24
	WORD	$0x6e391e94					//     eor.16b	v20, v20, v25
	WORD	$0x4eb586d5					//     add.4s	v21, v22, v21
	WORD	$0x4eb78697					//     add.4s	v23, v20, v23
	WORD	$0x4f3156b8					//     shl.4s	v24, v21, #17
	WORD	$0x6f3146b8					//     sri.4s	v24, v21, #15
	WORD	$0x4f3156f5					//     shl.4s	v21, v23, #17
	WORD	$0x6f3146f5					//     sri.4s	v21, v23, #15
	WORD	$0x4eb68716					//     add.4s	v22, v24, v22
	WORD	$0x4eb486b4					//     add.4s	v20, v21, v20
	WORD	$0x6ea74717					//     ushl.4s	v23, v24, v7
	WORD	$0x6eb14718					//     ushl.4s	v24, v24, v17
	WORD	$0x6e371f17					//     eor.16b	v23, v24, v23
	WORD	$0x6eb246b8					//     ushl.4s	v24, v21, v18
	WORD	$0x6eb346b5					//     ushl.4s	v21, v21, v19
	WORD	$0x6e381eb5					//     eor.16b	v21, v21, v24
	WORD	$0x6e1642d8					//     ext.16b	v24, v22, v22, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e1822d9					//     ext.8b	v25, v22, v24, #4
	WORD	$0x2e162316					//     ext.8b	v22, v24, v22, #4
	WORD	$0x6e180736					//     mov.d	v22[1], v25[0]
	WORD	$0x6e144298					//     ext.16b	v24, v20, v20, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x2e182299					//     ext.8b	v25, v20, v24, #4
	WORD	$0x2e142314					//     ext.8b	v20, v24, v20, #4
	WORD	$0x6e180734					//     mov.d	v20[1], v25[0]
	WORD	$0x6e1762f7					//     ext.16b	v23, v23, v23, #12
	WORD	$0x4ea00af7					//     rev64.4s	v23, v23
	WORD	$0x6e1562b5					//     ext.16b	v21, v21, v21, #12
	WORD	$0x4ea00ab5					//     rev64.4s	v21, v21
	WORD	$0x6e0640d8					//     ext.16b	v24, v6, v6, #8
	WORD	$0x0ea00b18					//     rev64.2s	v24, v24
	WORD	$0x6e1804d8					//     mov.d	v24[1], v6[0]
	WORD	$0x6e106210					//     ext.16b	v16, v16, v16, #12
	WORD	$0x6e044086					//     ext.16b	v6, v4, v4, #8
	WORD	$0x0ea008d9					//     rev64.2s	v25, v6
	WORD	$0x6e180499					//     mov.d	v25[1], v4[0]
	WORD	$0x6e0560a5					//     ext.16b	v5, v5, v5, #12
	WORD	$0x4ea38706					//     add.4s	v6, v24, v3
	WORD	$0x4eb08410					//     add.4s	v16, v0, v16
	WORD	$0x4ea28724					//     add.4s	v4, v25, v2
	WORD	$0x4ea184a5					//     add.4s	v5, v5, v1
	WORD	$0x91010108					//     add	x8, x8, #64
	WORD	$0x710d011f					//     cmp	w8, #832
	BNE		LBB2_15						//     b.ne	LBB2_15
										// ; %bb.16:
	WORD	$0x6e221ec2					//     eor.16b	v2, v22, v2
	WORD	$0x6e211ee1					//     eor.16b	v1, v23, v1
	WORD	$0xad020402					//     stp	q2, q1, [x0, #64]
	WORD	$0xce030a82					//     eor3.16b	v2, v20, v3, v2
	WORD	$0xce0006a0					//     eor3.16b	v0, v21, v0, v1
	WORD	$0xad010002					//     stp	q2, q0, [x0, #32]
	WORD	$0x3d800022					//     str	q2, [x1]
	WORD	$0x3dc00c00					//     ldr	q0, [x0, #48]
	WORD	$0x3d800420					//     str	q0, [x1, #16]
	WORD	$0xa8c17bfd					//     ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	RET									//     ret
