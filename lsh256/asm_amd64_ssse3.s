//go:build (amd64 || amd64p32) && !purego
// +build amd64 amd64p32
// +build !purego

// GENERATED BY C2GOASM
// EDITED BY RYUANERIN
// -- DO NOT EDIT

#include "textflag.h"

DATA LCDATA2<>+0x000(SB)/8, $0x6c1b10a2917caf90   
DATA LCDATA2<>+0x008(SB)/8, $0xcf7782436f352943   
DATA LCDATA2<>+0x010(SB)/8, $0x29e96ff22ceb7472   
DATA LCDATA2<>+0x018(SB)/8, $0x2eeb26428a9ba428   
DATA LCDATA2<>+0x020(SB)/8, $0x0c0f0e0d03020100   
DATA LCDATA2<>+0x028(SB)/8, $0x0605040709080b0a   
DATA LCDATA2<>+0x030(SB)/8, $0x0f0e0d0c00030201   
DATA LCDATA2<>+0x038(SB)/8, $0x050407060a09080b   
DATA LCDATA2<>+0x040(SB)/8, $0x872bb30e0e2c4021   
DATA LCDATA2<>+0x048(SB)/8, $0x46f9c612a45e6cb2   
DATA LCDATA2<>+0x050(SB)/8, $0x1359621b185fe69e   
DATA LCDATA2<>+0x058(SB)/8, $0x1a116870263fccb2   
GLOBL LCDATA2<>(SB), RODATA|NOPTR, $96

TEXT Â·__lsh256_ssse3_update(SB), NOSPLIT, $32
	MOVQ ctx+0(FP), DI
	MOVQ data_base+8(FP), SI
	MOVQ data_len+16(FP), DX
	//   data_cap+24

	LEAQ LCDATA2<>(SB), BP

	WORD $0x4f8b; BYTE $0x10 // mov    ecx, dword [rdi + 16]
	LONG $0x11048d48         // lea    rax, [rcx + rdx]
	LONG $0x7ff88348         // cmp    rax, 127
	JA   LBB1_4
	WORD $0xd285             // test    edx, edx
	JLE  LBB1_28
	LONG $0x0f048d4c         // lea    r8, [rdi + rcx]
	LONG $0x60c08349         // add    r8, 96
	WORD $0xd089             // mov    eax, edx
	LONG $0x08f88348         // cmp    rax, 8
	JB   LBB1_3
	LONG $0x0f0c8d4c         // lea    r9, [rdi + rcx]
	WORD $0x2949; BYTE $0xf1 // sub    r9, rsi
	LONG $0x60c18349         // add    r9, 96
	LONG $0x20f98349         // cmp    r9, 32
	JAE  LBB1_12

LBB1_3:
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_23:
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	WORD $0x2945; BYTE $0xcb // sub    r11d, r9d
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	LONG $0x03e38341         // and    r11d, 3
	JE   LBB1_25

LBB1_24:
	LONG $0x1cb60f42; BYTE $0x0e // movzx    ebx, byte [rsi + r9]
	LONG $0x081c8843             // mov    byte [r8 + r9], bl
	WORD $0xff49; BYTE $0xc1     // inc    r9
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_24

LBB1_25:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB1_28
	LONG $0x39048d4c // lea    r8, [rcx + rdi]
	LONG $0x63c08349 // add    r8, 99

LBB1_27:
	LONG $0x14b60f46; BYTE $0x0e   // movzx    r10d, byte [rsi + r9]
	LONG $0x08548847; BYTE $0xfd   // mov    byte [r8 + r9 - 3], r10b
	LONG $0x54b60f46; WORD $0x010e // movzx    r10d, byte [rsi + r9 + 1]
	LONG $0x08548847; BYTE $0xfe   // mov    byte [r8 + r9 - 2], r10b
	LONG $0x54b60f46; WORD $0x020e // movzx    r10d, byte [rsi + r9 + 2]
	LONG $0x08548847; BYTE $0xff   // mov    byte [r8 + r9 - 1], r10b
	LONG $0x54b60f46; WORD $0x030e // movzx    r10d, byte [rsi + r9 + 3]
	LONG $0x08148847               // mov    byte [r8 + r9], r10b
	LONG $0x04c18349               // add    r9, 4
	WORD $0x394c; BYTE $0xc8       // cmp    rax, r9
	JNE  LBB1_27

LBB1_28:
	WORD $0xd101 // add    ecx, edx
	JMP  LBB1_69

LBB1_4:
	LONG $0x4f6f0ff3; BYTE $0x20   // movdqu    xmm1, oword [rdi + 32]
	LONG $0x6f0f44f3; WORD $0x304f // movdqu    xmm9, oword [rdi + 48]
	LONG $0x7f6f0ff3; BYTE $0x40   // movdqu    xmm7, oword [rdi + 64]
	LONG $0x6f0f44f3; WORD $0x5047 // movdqu    xmm8, oword [rdi + 80]
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB1_44
	LONG $0x0080b841; WORD $0x0000 // mov    r8d, 128
	WORD $0x2941; BYTE $0xc8       // sub    r8d, ecx
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	WORD $0x8545; BYTE $0xc0       // test    r8d, r8d
	JLE  LBB1_41
	LONG $0x0f0c8d4c               // lea    r9, [rdi + rcx]
	LONG $0x60c18349               // add    r9, 96
	LONG $0x08f88341               // cmp    r8d, 8
	JB   LBB1_7
	LONG $0x0f148d4c               // lea    r10, [rdi + rcx]
	WORD $0x2949; BYTE $0xf2       // sub    r10, rsi
	LONG $0x60c28349               // add    r10, 96
	LONG $0x20fa8349               // cmp    r10, 32
	JAE  LBB1_14

LBB1_7:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB1_36:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	WORD $0x8949; BYTE $0xc3 // mov    r11, rax
	LONG $0x03e38349         // and    r11, 3
	JE   LBB1_38

LBB1_37:
	LONG $0x1cb60f42; BYTE $0x06 // movzx    ebx, byte [rsi + r8]
	LONG $0x011c8843             // mov    byte [r9 + r8], bl
	WORD $0xff49; BYTE $0xc0     // inc    r8
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_37

LBB1_38:
	LONG $0x03fa8349         // cmp    r10, 3
	JB   LBB1_41
	WORD $0x0148; BYTE $0xf9 // add    rcx, rdi
	LONG $0x63c18348         // add    rcx, 99

LBB1_40:
	LONG $0x0cb60f46; BYTE $0x06   // movzx    r9d, byte [rsi + r8]
	LONG $0x014c8846; BYTE $0xfd   // mov    byte [rcx + r8 - 3], r9b
	LONG $0x4cb60f46; WORD $0x0106 // movzx    r9d, byte [rsi + r8 + 1]
	LONG $0x014c8846; BYTE $0xfe   // mov    byte [rcx + r8 - 2], r9b
	LONG $0x4cb60f46; WORD $0x0206 // movzx    r9d, byte [rsi + r8 + 2]
	LONG $0x014c8846; BYTE $0xff   // mov    byte [rcx + r8 - 1], r9b
	LONG $0x4cb60f46; WORD $0x0306 // movzx    r9d, byte [rsi + r8 + 3]
	LONG $0x010c8846               // mov    byte [rcx + r8], r9b
	LONG $0x04c08349               // add    r8, 4
	WORD $0x394c; BYTE $0xc0       // cmp    rax, r8
	JNE  LBB1_40

LBB1_41:
	LONG $0x476f0ff3; BYTE $0x60         // movdqu    xmm0, oword [rdi + 96]
	LONG $0x776f0ff3; BYTE $0x70         // movdqu    xmm6, oword [rdi + 112]
	QUAD $0x00000080a76f0ff3             // movdqu    xmm4, oword [rdi + 128]
	QUAD $0x000000909f6f0ff3             // movdqu    xmm3, oword [rdi + 144]
	QUAD $0x0000a09f6f0f44f3; BYTE $0x00 // movdqu    xmm11, oword [rdi + 160]
	QUAD $0x0000b0976f0f44f3; BYTE $0x00 // movdqu    xmm10, oword [rdi + 176]
	QUAD $0x000000c0976f0ff3             // movdqu    xmm2, oword [rdi + 192]
	QUAD $0x000000d0af6f0ff3             // movdqu    xmm5, oword [rdi + 208]
	LONG $0xc8ef0f66                     // pxor    xmm1, xmm0
	LONG $0xfcef0f66                     // pxor    xmm7, xmm4
	LONG $0xef0f4466; BYTE $0xce         // pxor    xmm9, xmm6
	LONG $0xef0f4466; BYTE $0xc3         // pxor    xmm8, xmm3
	LONG $0xcffe0f66                     // paddd    xmm1, xmm7
	LONG $0xfe0f4566; BYTE $0xc8         // paddd    xmm9, xmm8
	LONG $0x6f0f4466; BYTE $0xe1         // movdqa    xmm12, xmm1
	LONG $0x720f4166; WORD $0x03d4       // psrld    xmm12, 3
	LONG $0xf1720f66; BYTE $0x1d         // pslld    xmm1, 29
	LONG $0xeb0f4166; BYTE $0xcc         // por    xmm1, xmm12
	LONG $0x6f0f4566; BYTE $0xe1         // movdqa    xmm12, xmm9
	LONG $0x720f4166; WORD $0x03d4       // psrld    xmm12, 3
	LONG $0x720f4166; WORD $0x1df1       // pslld    xmm9, 29
	LONG $0xeb0f4566; BYTE $0xcc         // por    xmm9, xmm12
	LONG $0x4def0f66; BYTE $0x00         // pxor    xmm1, oword 0[rbp]
	LONG $0xf9fe0f66                     // paddd    xmm7, xmm1
	LONG $0xef0f4466; WORD $0x104d       // pxor    xmm9, oword 16[rbp]
	LONG $0xfe0f4566; BYTE $0xc1         // paddd    xmm8, xmm9
	LONG $0x6f0f4466; BYTE $0xe7         // movdqa    xmm12, xmm7
	LONG $0x720f4166; WORD $0x1fd4       // psrld    xmm12, 31
	LONG $0xfffe0f66                     // paddd    xmm7, xmm7
	LONG $0xeb0f4166; BYTE $0xfc         // por    xmm7, xmm12
	LONG $0x6f0f4566; BYTE $0xe0         // movdqa    xmm12, xmm8
	LONG $0x720f4166; WORD $0x1fd4       // psrld    xmm12, 31
	LONG $0xfe0f4566; BYTE $0xc0         // paddd    xmm8, xmm8
	LONG $0xeb0f4566; BYTE $0xc4         // por    xmm8, xmm12
	LONG $0xcffe0f66                     // paddd    xmm1, xmm7
	LONG $0xfe0f4566; BYTE $0xc8         // paddd    xmm9, xmm8
	LONG $0x700f4466; WORD $0xd2e1       // pshufd    xmm12, xmm1, 210
	LONG $0x700f4166; WORD $0xd2c9       // pshufd    xmm1, xmm9, 210
	LONG $0x6f0f4466; WORD $0x204d       // movdqa    xmm9, oword 32[rbp]
	LONG $0x380f4166; WORD $0xf900       // pshufb    xmm7, xmm9
	LONG $0x6f0f4466; WORD $0x306d       // movdqa    xmm13, oword 48[rbp]
	LONG $0x380f4566; WORD $0xc500       // pshufb    xmm8, xmm13
	LONG $0xef0f4166; BYTE $0xcb         // pxor    xmm1, xmm11
	LONG $0xef0f4466; BYTE $0xe2         // pxor    xmm12, xmm2
	LONG $0xfe0f4166; BYTE $0xcc         // paddd    xmm1, xmm12
	LONG $0xef0f4566; BYTE $0xc2         // pxor    xmm8, xmm10
	LONG $0xfdef0f66                     // pxor    xmm7, xmm5
	LONG $0xfe0f4466; BYTE $0xc7         // paddd    xmm8, xmm7
	LONG $0x6f0f4466; BYTE $0xf1         // movdqa    xmm14, xmm1
	LONG $0x720f4166; WORD $0x1bd6       // psrld    xmm14, 27
	LONG $0xf1720f66; BYTE $0x05         // pslld    xmm1, 5
	LONG $0xeb0f4166; BYTE $0xce         // por    xmm1, xmm14
	LONG $0x6f0f4566; BYTE $0xf0         // movdqa    xmm14, xmm8
	LONG $0x720f4166; WORD $0x1bd6       // psrld    xmm14, 27
	LONG $0x720f4166; WORD $0x05f0       // pslld    xmm8, 5
	LONG $0xeb0f4566; BYTE $0xc6         // por    xmm8, xmm14
	LONG $0x4def0f66; BYTE $0x40         // pxor    xmm1, oword 64[rbp]
	LONG $0xfe0f4466; BYTE $0xe1         // paddd    xmm12, xmm1
	LONG $0xef0f4466; WORD $0x5045       // pxor    xmm8, oword 80[rbp]
	LONG $0xfe0f4166; BYTE $0xf8         // paddd    xmm7, xmm8
	LONG $0x6f0f4566; BYTE $0xf4         // movdqa    xmm14, xmm12
	LONG $0x720f4166; WORD $0x0fd6       // psrld    xmm14, 15
	LONG $0x720f4166; WORD $0x11f4       // pslld    xmm12, 17
	LONG $0xeb0f4566; BYTE $0xe6         // por    xmm12, xmm14
	LONG $0x6f0f4466; BYTE $0xf7         // movdqa    xmm14, xmm7
	LONG $0x720f4166; WORD $0x0fd6       // psrld    xmm14, 15
	LONG $0xf7720f66; BYTE $0x11         // pslld    xmm7, 17
	LONG $0xeb0f4166; BYTE $0xfe         // por    xmm7, xmm14
	LONG $0xfe0f4166; BYTE $0xcc         // paddd    xmm1, xmm12
	LONG $0xfe0f4466; BYTE $0xc7         // paddd    xmm8, xmm7
	LONG $0x700f4466; WORD $0xd2f1       // pshufd    xmm14, xmm1, 210
	LONG $0x700f4166; WORD $0xd2c8       // pshufd    xmm1, xmm8, 210
	LONG $0x380f4566; WORD $0xe100       // pshufb    xmm12, xmm9
	LONG $0x380f4166; WORD $0xfd00       // pshufb    xmm7, xmm13
	LONG $0x000070b9; BYTE $0x00         // mov    ecx, 112
	MOVQ Â·step(SB), R8                   // lea    r8, [rip + _g_StepConstants]
LBB1_42:
	LONG $0xc0700f66; BYTE $0x4b               // pshufd    xmm0, xmm0, 75
	LONG $0xfe0f4166; BYTE $0xc3               // paddd    xmm0, xmm11
	LONG $0xf6700f66; BYTE $0x93               // pshufd    xmm6, xmm6, 147
	LONG $0xfe0f4166; BYTE $0xf2               // paddd    xmm6, xmm10
	LONG $0xe4700f66; BYTE $0x4b               // pshufd    xmm4, xmm4, 75
	LONG $0xe2fe0f66                           // paddd    xmm4, xmm2
	LONG $0xdb700f66; BYTE $0x93               // pshufd    xmm3, xmm3, 147
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xef0f4466; BYTE $0xf4               // pxor    xmm14, xmm4
	LONG $0xfe0f4166; BYTE $0xce               // paddd    xmm1, xmm14
	LONG $0xfeef0f66                           // pxor    xmm7, xmm6
	LONG $0xef0f4466; BYTE $0xe3               // pxor    xmm12, xmm3
	LONG $0xfe0f4166; BYTE $0xfc               // paddd    xmm7, xmm12
	LONG $0x6f0f4466; BYTE $0xc1               // movdqa    xmm8, xmm1
	LONG $0x720f4166; WORD $0x03d0             // psrld    xmm8, 3
	LONG $0xf1720f66; BYTE $0x1d               // pslld    xmm1, 29
	LONG $0xeb0f4166; BYTE $0xc8               // por    xmm1, xmm8
	LONG $0x6f0f4466; BYTE $0xc7               // movdqa    xmm8, xmm7
	LONG $0x720f4166; WORD $0x03d0             // psrld    xmm8, 3
	LONG $0xf7720f66; BYTE $0x1d               // pslld    xmm7, 29
	LONG $0xeb0f4166; BYTE $0xf8               // por    xmm7, xmm8
	LONG $0xef0f4266; WORD $0x014c; BYTE $0xd0 // pxor    xmm1, oword [rcx + r8 - 48]
	LONG $0xfe0f4466; BYTE $0xf1               // paddd    xmm14, xmm1
	LONG $0xef0f4266; WORD $0x017c; BYTE $0xe0 // pxor    xmm7, oword [rcx + r8 - 32]
	LONG $0xfe0f4466; BYTE $0xe7               // paddd    xmm12, xmm7
	LONG $0x6f0f4566; BYTE $0xc6               // movdqa    xmm8, xmm14
	LONG $0x720f4166; WORD $0x1fd0             // psrld    xmm8, 31
	LONG $0xfe0f4566; BYTE $0xf6               // paddd    xmm14, xmm14
	LONG $0xeb0f4566; BYTE $0xf0               // por    xmm14, xmm8
	LONG $0x6f0f4566; BYTE $0xc4               // movdqa    xmm8, xmm12
	LONG $0x720f4166; WORD $0x1fd0             // psrld    xmm8, 31
	LONG $0xfe0f4566; BYTE $0xe4               // paddd    xmm12, xmm12
	LONG $0xeb0f4566; BYTE $0xe0               // por    xmm12, xmm8
	LONG $0xfe0f4166; BYTE $0xce               // paddd    xmm1, xmm14
	LONG $0xfe0f4166; BYTE $0xfc               // paddd    xmm7, xmm12
	LONG $0x700f4466; WORD $0xd2c1             // pshufd    xmm8, xmm1, 210
	LONG $0xcf700f66; BYTE $0xd2               // pshufd    xmm1, xmm7, 210
	LONG $0x380f4566; WORD $0xf100             // pshufb    xmm14, xmm9
	LONG $0x380f4566; WORD $0xe500             // pshufb    xmm12, xmm13
	LONG $0x700f4566; WORD $0x4bdb             // pshufd    xmm11, xmm11, 75
	LONG $0xfe0f4466; BYTE $0xd8               // paddd    xmm11, xmm0
	LONG $0x700f4566; WORD $0x93d2             // pshufd    xmm10, xmm10, 147
	LONG $0xfe0f4466; BYTE $0xd6               // paddd    xmm10, xmm6
	LONG $0xd2700f66; BYTE $0x4b               // pshufd    xmm2, xmm2, 75
	LONG $0xd4fe0f66                           // paddd    xmm2, xmm4
	LONG $0xed700f66; BYTE $0x93               // pshufd    xmm5, xmm5, 147
	LONG $0xebfe0f66                           // paddd    xmm5, xmm3
	LONG $0xef0f4166; BYTE $0xcb               // pxor    xmm1, xmm11
	LONG $0xef0f4466; BYTE $0xc2               // pxor    xmm8, xmm2
	LONG $0xef0f4566; BYTE $0xe2               // pxor    xmm12, xmm10
	LONG $0xef0f4466; BYTE $0xf5               // pxor    xmm14, xmm5
	LONG $0xfe0f4166; BYTE $0xc8               // paddd    xmm1, xmm8
	LONG $0xfe0f4566; BYTE $0xe6               // paddd    xmm12, xmm14
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xd7720f66; BYTE $0x1b               // psrld    xmm7, 27
	LONG $0xf1720f66; BYTE $0x05               // pslld    xmm1, 5
	LONG $0xcfeb0f66                           // por    xmm1, xmm7
	LONG $0x6f0f4166; BYTE $0xfc               // movdqa    xmm7, xmm12
	LONG $0xd7720f66; BYTE $0x1b               // psrld    xmm7, 27
	LONG $0x720f4166; WORD $0x05f4             // pslld    xmm12, 5
	LONG $0xeb0f4466; BYTE $0xe7               // por    xmm12, xmm7
	LONG $0xef0f4266; WORD $0x014c; BYTE $0xf0 // pxor    xmm1, oword [rcx + r8 - 16]
	LONG $0xef0f4666; WORD $0x0124             // pxor    xmm12, oword [rcx + r8]
	LONG $0xfe0f4466; BYTE $0xc1               // paddd    xmm8, xmm1
	LONG $0xfe0f4566; BYTE $0xf4               // paddd    xmm14, xmm12
	LONG $0x6f0f4166; BYTE $0xf8               // movdqa    xmm7, xmm8
	LONG $0xd7720f66; BYTE $0x0f               // psrld    xmm7, 15
	LONG $0x720f4166; WORD $0x11f0             // pslld    xmm8, 17
	LONG $0xeb0f4466; BYTE $0xc7               // por    xmm8, xmm7
	LONG $0x6f0f4566; BYTE $0xfe               // movdqa    xmm15, xmm14
	LONG $0x720f4166; WORD $0x0fd7             // psrld    xmm15, 15
	LONG $0x720f4166; WORD $0x11f6             // pslld    xmm14, 17
	LONG $0x6f0f4166; BYTE $0xfe               // movdqa    xmm7, xmm14
	LONG $0xeb0f4166; BYTE $0xff               // por    xmm7, xmm15
	LONG $0xfe0f4166; BYTE $0xc8               // paddd    xmm1, xmm8
	LONG $0xfe0f4466; BYTE $0xe7               // paddd    xmm12, xmm7
	LONG $0x700f4466; WORD $0xd2f1             // pshufd    xmm14, xmm1, 210
	LONG $0x700f4166; WORD $0xd2cc             // pshufd    xmm1, xmm12, 210
	LONG $0x6f0f4566; BYTE $0xe0               // movdqa    xmm12, xmm8
	LONG $0x380f4566; WORD $0xe100             // pshufb    xmm12, xmm9
	LONG $0x380f4166; WORD $0xfd00             // pshufb    xmm7, xmm13
	LONG $0x40c18348                           // add    rcx, 64
	LONG $0x70f98148; WORD $0x0003; BYTE $0x00 // cmp    rcx, 880
	JNE  LBB1_42
	LONG $0xc0700f66; BYTE $0x4b               // pshufd    xmm0, xmm0, 75
	LONG $0xfe0f4166; BYTE $0xc3               // paddd    xmm0, xmm11
	LONG $0xf6700f66; BYTE $0x93               // pshufd    xmm6, xmm6, 147
	LONG $0xfe0f4166; BYTE $0xf2               // paddd    xmm6, xmm10
	LONG $0xe4700f66; BYTE $0x4b               // pshufd    xmm4, xmm4, 75
	LONG $0xe2fe0f66                           // paddd    xmm4, xmm2
	LONG $0xd3700f66; BYTE $0x93               // pshufd    xmm2, xmm3, 147
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xef0f4466; BYTE $0xf4               // pxor    xmm14, xmm4
	LONG $0xfeef0f66                           // pxor    xmm7, xmm6
	LONG $0xef0f4466; BYTE $0xe2               // pxor    xmm12, xmm2
	WORD $0x0148; BYTE $0xc6                   // add    rsi, rax
	WORD $0x2948; BYTE $0xc2                   // sub    rdx, rax
	LONG $0x001047c7; WORD $0x0000; BYTE $0x00 // mov    dword [rdi + 16], 0
	LONG $0x6f0f4466; BYTE $0xcf               // movdqa    xmm9, xmm7
	LONG $0x6f0f4566; BYTE $0xc4               // movdqa    xmm8, xmm12
	LONG $0x6f0f4166; BYTE $0xfe               // movdqa    xmm7, xmm14

LBB1_44:
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 128
	JB   LBB1_49
	LONG $0x6d6f0f66; BYTE $0x20               // movdqa    xmm5, oword 32[rbp]
	LONG $0x756f0f66; BYTE $0x30               // movdqa    xmm6, oword 48[rbp]
	MOVQ Â·step(SB), AX                         //  lea    rax, [rip + _g_StepConstants]
LBB1_46:
	LONG $0x6f0f44f3; BYTE $0x3e   // movdqu    xmm15, oword [rsi]
	LONG $0x6f0f44f3; WORD $0x106e // movdqu    xmm13, oword [rsi + 16]
	LONG $0x6f0f44f3; WORD $0x205e // movdqu    xmm11, oword [rsi + 32]
	LONG $0x6f0f44f3; WORD $0x3056 // movdqu    xmm10, oword [rsi + 48]
	LONG $0x666f0ff3; BYTE $0x40   // movdqu    xmm4, oword [rsi + 64]
	LONG $0x5e6f0ff3; BYTE $0x50   // movdqu    xmm3, oword [rsi + 80]
	LONG $0x6f0f44f3; WORD $0x6076 // movdqu    xmm14, oword [rsi + 96]
	LONG $0x6f0f44f3; WORD $0x7066 // movdqu    xmm12, oword [rsi + 112]
	LONG $0xef0f4166; BYTE $0xcf   // pxor    xmm1, xmm15
	LONG $0xef0f4166; BYTE $0xfb   // pxor    xmm7, xmm11
	LONG $0xef0f4566; BYTE $0xcd   // pxor    xmm9, xmm13
	LONG $0xef0f4566; BYTE $0xc2   // pxor    xmm8, xmm10
	LONG $0xcffe0f66               // paddd    xmm1, xmm7
	LONG $0xfe0f4566; BYTE $0xc8   // paddd    xmm9, xmm8
	LONG $0xc16f0f66               // movdqa    xmm0, xmm1
	LONG $0xd0720f66; BYTE $0x03   // psrld    xmm0, 3
	LONG $0xf1720f66; BYTE $0x1d   // pslld    xmm1, 29
	LONG $0xc8eb0f66               // por    xmm1, xmm0
	LONG $0x4def0f66; BYTE $0x00   // pxor    xmm1, oword 0[rbp]
	LONG $0x6f0f4166; BYTE $0xc1   // movdqa    xmm0, xmm9
	LONG $0xd0720f66; BYTE $0x03   // psrld    xmm0, 3
	LONG $0x720f4166; WORD $0x1df1 // pslld    xmm9, 29
	LONG $0xeb0f4466; BYTE $0xc8   // por    xmm9, xmm0
	LONG $0xef0f4466; WORD $0x104d // pxor    xmm9, oword 16[rbp]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xfe0f4566; BYTE $0xc1   // paddd    xmm8, xmm9
	LONG $0xc76f0f66               // movdqa    xmm0, xmm7
	LONG $0xd0720f66; BYTE $0x1f   // psrld    xmm0, 31
	LONG $0xfffe0f66               // paddd    xmm7, xmm7
	LONG $0xf8eb0f66               // por    xmm7, xmm0
	LONG $0x6f0f4166; BYTE $0xc0   // movdqa    xmm0, xmm8
	LONG $0xd0720f66; BYTE $0x1f   // psrld    xmm0, 31
	LONG $0xfe0f4566; BYTE $0xc0   // paddd    xmm8, xmm8
	LONG $0xeb0f4466; BYTE $0xc0   // por    xmm8, xmm0
	LONG $0xcffe0f66               // paddd    xmm1, xmm7
	LONG $0xfe0f4566; BYTE $0xc8   // paddd    xmm9, xmm8
	LONG $0xd1700f66; BYTE $0xd2   // pshufd    xmm2, xmm1, 210
	LONG $0x700f4166; WORD $0xd2c1 // pshufd    xmm0, xmm9, 210
	LONG $0x00380f66; BYTE $0xfd   // pshufb    xmm7, xmm5
	LONG $0x380f4466; WORD $0xc600 // pshufb    xmm8, xmm6
	LONG $0xc4ef0f66               // pxor    xmm0, xmm4
	LONG $0xef0f4166; BYTE $0xd6   // pxor    xmm2, xmm14
	LONG $0xc2fe0f66               // paddd    xmm0, xmm2
	LONG $0xef0f4466; BYTE $0xc3   // pxor    xmm8, xmm3
	LONG $0xef0f4166; BYTE $0xfc   // pxor    xmm7, xmm12
	LONG $0xfe0f4466; BYTE $0xc7   // paddd    xmm8, xmm7
	LONG $0xc86f0f66               // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1b   // psrld    xmm1, 27
	LONG $0xf0720f66; BYTE $0x05   // pslld    xmm0, 5
	LONG $0xc1eb0f66               // por    xmm0, xmm1
	LONG $0x45ef0f66; BYTE $0x40   // pxor    xmm0, oword 64[rbp]
	LONG $0x6f0f4166; BYTE $0xc8   // movdqa    xmm1, xmm8
	LONG $0xd1720f66; BYTE $0x1b   // psrld    xmm1, 27
	LONG $0x720f4166; WORD $0x05f0 // pslld    xmm8, 5
	LONG $0xeb0f4466; BYTE $0xc1   // por    xmm8, xmm1
	LONG $0xef0f4466; WORD $0x5045 // pxor    xmm8, oword 80[rbp]
	LONG $0xd0fe0f66               // paddd    xmm2, xmm0
	LONG $0xfe0f4166; BYTE $0xf8   // paddd    xmm7, xmm8
	LONG $0xca6f0f66               // movdqa    xmm1, xmm2
	LONG $0xd1720f66; BYTE $0x0f   // psrld    xmm1, 15
	LONG $0xf2720f66; BYTE $0x11   // pslld    xmm2, 17
	LONG $0xd1eb0f66               // por    xmm2, xmm1
	LONG $0xcf6f0f66               // movdqa    xmm1, xmm7
	LONG $0xd1720f66; BYTE $0x0f   // psrld    xmm1, 15
	LONG $0xf7720f66; BYTE $0x11   // pslld    xmm7, 17
	LONG $0xf9eb0f66               // por    xmm7, xmm1
	LONG $0xc2fe0f66               // paddd    xmm0, xmm2
	LONG $0xfe0f4466; BYTE $0xc7   // paddd    xmm8, xmm7
	LONG $0xc0700f66; BYTE $0xd2   // pshufd    xmm0, xmm0, 210
	LONG $0x700f4166; WORD $0xd2c8 // pshufd    xmm1, xmm8, 210
	LONG $0x00380f66; BYTE $0xd5   // pshufb    xmm2, xmm5
	LONG $0x00380f66; BYTE $0xfe   // pshufb    xmm7, xmm6
	LONG $0x000070b9; BYTE $0x00   // mov    ecx, 112

LBB1_47:
	LONG $0x700f4566; WORD $0x4bff             // pshufd    xmm15, xmm15, 75
	LONG $0xfe0f4466; BYTE $0xfc               // paddd    xmm15, xmm4
	LONG $0x700f4566; WORD $0x93ed             // pshufd    xmm13, xmm13, 147
	LONG $0xfe0f4466; BYTE $0xeb               // paddd    xmm13, xmm3
	LONG $0x700f4566; WORD $0x4bdb             // pshufd    xmm11, xmm11, 75
	LONG $0xfe0f4566; BYTE $0xde               // paddd    xmm11, xmm14
	LONG $0x700f4566; WORD $0x93d2             // pshufd    xmm10, xmm10, 147
	LONG $0xfe0f4566; BYTE $0xd4               // paddd    xmm10, xmm12
	LONG $0xef0f4166; BYTE $0xcf               // pxor    xmm1, xmm15
	LONG $0xef0f4166; BYTE $0xc3               // pxor    xmm0, xmm11
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xef0f4166; BYTE $0xfd               // pxor    xmm7, xmm13
	LONG $0xef0f4166; BYTE $0xd2               // pxor    xmm2, xmm10
	LONG $0xfafe0f66                           // paddd    xmm7, xmm2
	LONG $0x6f0f4466; BYTE $0xc1               // movdqa    xmm8, xmm1
	LONG $0x720f4166; WORD $0x03d0             // psrld    xmm8, 3
	LONG $0xf1720f66; BYTE $0x1d               // pslld    xmm1, 29
	LONG $0xeb0f4166; BYTE $0xc8               // por    xmm1, xmm8
	LONG $0x6f0f4466; BYTE $0xc7               // movdqa    xmm8, xmm7
	LONG $0x720f4166; WORD $0x03d0             // psrld    xmm8, 3
	LONG $0xf7720f66; BYTE $0x1d               // pslld    xmm7, 29
	LONG $0xeb0f4166; BYTE $0xf8               // por    xmm7, xmm8
	LONG $0x4cef0f66; WORD $0xd001             // pxor    xmm1, oword [rcx + rax - 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7cef0f66; WORD $0xe001             // pxor    xmm7, oword [rcx + rax - 32]
	LONG $0xd7fe0f66                           // paddd    xmm2, xmm7
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0x720f4166; WORD $0x1fd0             // psrld    xmm8, 31
	LONG $0xc0fe0f66                           // paddd    xmm0, xmm0
	LONG $0xeb0f4166; BYTE $0xc0               // por    xmm0, xmm8
	LONG $0x6f0f4466; BYTE $0xc2               // movdqa    xmm8, xmm2
	LONG $0x720f4166; WORD $0x1fd0             // psrld    xmm8, 31
	LONG $0xd2fe0f66                           // paddd    xmm2, xmm2
	LONG $0xeb0f4166; BYTE $0xd0               // por    xmm2, xmm8
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xfafe0f66                           // paddd    xmm7, xmm2
	LONG $0x700f4466; WORD $0xd2c1             // pshufd    xmm8, xmm1, 210
	LONG $0xcf700f66; BYTE $0xd2               // pshufd    xmm1, xmm7, 210
	LONG $0x00380f66; BYTE $0xc5               // pshufb    xmm0, xmm5
	LONG $0x00380f66; BYTE $0xd6               // pshufb    xmm2, xmm6
	LONG $0xe4700f66; BYTE $0x4b               // pshufd    xmm4, xmm4, 75
	LONG $0xfe0f4166; BYTE $0xe7               // paddd    xmm4, xmm15
	LONG $0xdb700f66; BYTE $0x93               // pshufd    xmm3, xmm3, 147
	LONG $0xfe0f4166; BYTE $0xdd               // paddd    xmm3, xmm13
	LONG $0x700f4566; WORD $0x4bf6             // pshufd    xmm14, xmm14, 75
	LONG $0xfe0f4566; BYTE $0xf3               // paddd    xmm14, xmm11
	LONG $0x700f4566; WORD $0x93e4             // pshufd    xmm12, xmm12, 147
	LONG $0xfe0f4566; BYTE $0xe2               // paddd    xmm12, xmm10
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xef0f4566; BYTE $0xc6               // pxor    xmm8, xmm14
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xef0f4166; BYTE $0xc4               // pxor    xmm0, xmm12
	LONG $0xfe0f4166; BYTE $0xc8               // paddd    xmm1, xmm8
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xd7720f66; BYTE $0x1b               // psrld    xmm7, 27
	LONG $0xf1720f66; BYTE $0x05               // pslld    xmm1, 5
	LONG $0xcfeb0f66                           // por    xmm1, xmm7
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xd7720f66; BYTE $0x1b               // psrld    xmm7, 27
	LONG $0xf2720f66; BYTE $0x05               // pslld    xmm2, 5
	LONG $0xd7eb0f66                           // por    xmm2, xmm7
	LONG $0x4cef0f66; WORD $0xf001             // pxor    xmm1, oword [rcx + rax - 16]
	LONG $0x14ef0f66; BYTE $0x01               // pxor    xmm2, oword [rcx + rax]
	LONG $0xfe0f4466; BYTE $0xc1               // paddd    xmm8, xmm1
	LONG $0xc2fe0f66                           // paddd    xmm0, xmm2
	LONG $0x6f0f4166; BYTE $0xf8               // movdqa    xmm7, xmm8
	LONG $0xd7720f66; BYTE $0x0f               // psrld    xmm7, 15
	LONG $0x720f4166; WORD $0x11f0             // pslld    xmm8, 17
	LONG $0xeb0f4466; BYTE $0xc7               // por    xmm8, xmm7
	LONG $0x6f0f4466; BYTE $0xc8               // movdqa    xmm9, xmm0
	LONG $0x720f4166; WORD $0x0fd1             // psrld    xmm9, 15
	LONG $0xf0720f66; BYTE $0x11               // pslld    xmm0, 17
	LONG $0xf86f0f66                           // movdqa    xmm7, xmm0
	LONG $0xeb0f4166; BYTE $0xf9               // por    xmm7, xmm9
	LONG $0xfe0f4166; BYTE $0xc8               // paddd    xmm1, xmm8
	LONG $0xd7fe0f66                           // paddd    xmm2, xmm7
	LONG $0xc1700f66; BYTE $0xd2               // pshufd    xmm0, xmm1, 210
	LONG $0xca700f66; BYTE $0xd2               // pshufd    xmm1, xmm2, 210
	LONG $0x6f0f4166; BYTE $0xd0               // movdqa    xmm2, xmm8
	LONG $0x00380f66; BYTE $0xd5               // pshufb    xmm2, xmm5
	LONG $0x00380f66; BYTE $0xfe               // pshufb    xmm7, xmm6
	LONG $0x40c18348                           // add    rcx, 64
	LONG $0x70f98148; WORD $0x0003; BYTE $0x00 // cmp    rcx, 880
	JNE  LBB1_47
	LONG $0x700f4566; WORD $0x4bc7             // pshufd    xmm8, xmm15, 75
	LONG $0xfe0f4466; BYTE $0xc4               // paddd    xmm8, xmm4
	LONG $0x700f4166; WORD $0x93e5             // pshufd    xmm4, xmm13, 147
	LONG $0xe3fe0f66                           // paddd    xmm4, xmm3
	LONG $0x700f4166; WORD $0x4bdb             // pshufd    xmm3, xmm11, 75
	LONG $0xfe0f4166; BYTE $0xde               // paddd    xmm3, xmm14
	LONG $0x700f4566; WORD $0x93d2             // pshufd    xmm10, xmm10, 147
	LONG $0xfe0f4566; BYTE $0xd4               // paddd    xmm10, xmm12
	LONG $0xef0f4166; BYTE $0xc8               // pxor    xmm1, xmm8
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0x6f0f4466; BYTE $0xcf               // movdqa    xmm9, xmm7
	LONG $0xef0f4466; BYTE $0xcc               // pxor    xmm9, xmm4
	LONG $0xef0f4166; BYTE $0xd2               // pxor    xmm2, xmm10
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x80c28348                           // add    rdx, -128
	LONG $0xf86f0f66                           // movdqa    xmm7, xmm0
	LONG $0x6f0f4466; BYTE $0xc2               // movdqa    xmm8, xmm2
	LONG $0x7ffa8348                           // cmp    rdx, 127
	JA   LBB1_46
	JMP  LBB1_50

LBB1_49:
	LONG $0x6f0f4166; BYTE $0xd0 // movdqa    xmm2, xmm8
	LONG $0xc76f0f66             // movdqa    xmm0, xmm7

LBB1_50:
	LONG $0x4f7f0ff3; BYTE $0x20   // movdqu    oword [rdi + 32], xmm1
	LONG $0x7f0f44f3; WORD $0x304f // movdqu    oword [rdi + 48], xmm9
	LONG $0x477f0ff3; BYTE $0x40   // movdqu    oword [rdi + 64], xmm0
	LONG $0x577f0ff3; BYTE $0x50   // movdqu    oword [rdi + 80], xmm2
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB1_70
	LONG $0x08fa8348               // cmp    rdx, 8
	JB   LBB1_52
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	WORD $0x2948; BYTE $0xf0       // sub    rax, rsi
	LONG $0x60c08348               // add    rax, 96
	LONG $0x20f88348               // cmp    rax, 32
	JAE  LBB1_55

LBB1_52:
	WORD $0xc031 // xor    eax, eax

LBB1_64:
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xd1 // add    rcx, rdx
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x03e08349         // and    r8, 3
	JE   LBB1_66

LBB1_65:
	LONG $0x0cb60f44; BYTE $0x06 // movzx    r9d, byte [rsi + rax]
	LONG $0x074c8844; BYTE $0x60 // mov    byte [rdi + rax + 96], r9b
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0xff49; BYTE $0xc8     // dec    r8
	JNE  LBB1_65

LBB1_66:
	LONG $0x03f98348 // cmp    rcx, 3
	JB   LBB1_68

LBB1_67:
	LONG $0x060cb60f             // movzx    ecx, byte [rsi + rax]
	LONG $0x60074c88             // mov    byte [rdi + rax + 96], cl
	LONG $0x064cb60f; BYTE $0x01 // movzx    ecx, byte [rsi + rax + 1]
	LONG $0x61074c88             // mov    byte [rdi + rax + 97], cl
	LONG $0x064cb60f; BYTE $0x02 // movzx    ecx, byte [rsi + rax + 2]
	LONG $0x62074c88             // mov    byte [rdi + rax + 98], cl
	LONG $0x064cb60f; BYTE $0x03 // movzx    ecx, byte [rsi + rax + 3]
	LONG $0x63074c88             // mov    byte [rdi + rax + 99], cl
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JNE  LBB1_67

LBB1_68:
	WORD $0xd189 // mov    ecx, edx

LBB1_69:
	WORD $0x4f89; BYTE $0x10 // mov    dword [rdi + 16], ecx

LBB1_70:
	RET

LBB1_12:
	WORD $0xf883; BYTE $0x20 // cmp    eax, 32
	JAE  LBB1_16
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB1_20

LBB1_55:
	LONG $0x20fa8348 // cmp    rdx, 32
	JAE  LBB1_57
	WORD $0xc031     // xor    eax, eax
	JMP  LBB1_61

LBB1_14:
	LONG $0x20f88341         // cmp    r8d, 32
	JAE  LBB1_29
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB1_33

LBB1_16:
	WORD $0x8941; BYTE $0xd2 // mov    r10d, edx
	LONG $0x1fe28341         // and    r10d, 31
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0x294d; BYTE $0xd1 // sub    r9, r10
	LONG $0x391c8d4c         // lea    r11, [rcx + rdi]
	LONG $0x70c38349         // add    r11, 112
	WORD $0xdb31             // xor    ebx, ebx

LBB1_17:
	LONG $0x046f0ff3; BYTE $0x1e               // movdqu    xmm0, oword [rsi + rbx]
	LONG $0x4c6f0ff3; WORD $0x101e             // movdqu    xmm1, oword [rsi + rbx + 16]
	LONG $0x7f0f41f3; WORD $0x1b44; BYTE $0xf0 // movdqu    oword [r11 + rbx - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x1b0c             // movdqu    oword [r11 + rbx], xmm1
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xd9                   // cmp    r9, rbx
	JNE  LBB1_17
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB1_28
	LONG $0x08fa8341                           // cmp    r10d, 8
	JB   LBB1_23

LBB1_20:
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	LONG $0x07e38341         // and    r11d, 7
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0x294d; BYTE $0xd9 // sub    r9, r11

LBB1_21:
	LONG $0x161c8b4a         // mov    rbx, qword [rsi + r10]
	LONG $0x101c894b         // mov    qword [r8 + r10], rbx
	LONG $0x08c28349         // add    r10, 8
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JNE  LBB1_21
	WORD $0x854d; BYTE $0xdb // test    r11, r11
	JNE  LBB1_23
	JMP  LBB1_28

LBB1_57:
	WORD $0xd089             // mov    eax, edx
	WORD $0xe083; BYTE $0x60 // and    eax, 96
	WORD $0xc931             // xor    ecx, ecx

LBB1_58:
	LONG $0x046f0ff3; BYTE $0x0e   // movdqu    xmm0, oword [rsi + rcx]
	LONG $0x4c6f0ff3; WORD $0x100e // movdqu    xmm1, oword [rsi + rcx + 16]
	LONG $0x447f0ff3; WORD $0x600f // movdqu    oword [rdi + rcx + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x700f // movdqu    oword [rdi + rcx + 112], xmm1
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_58
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JE   LBB1_68
	WORD $0xc2f6; BYTE $0x18       // test    dl, 24
	JE   LBB1_64

LBB1_61:
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe083; BYTE $0x78 // and    eax, 120

LBB1_62:
	LONG $0x0e048b4c             // mov    r8, qword [rsi + rcx]
	LONG $0x0f44894c; BYTE $0x60 // mov    qword [rdi + rcx + 96], r8
	LONG $0x08c18348             // add    rcx, 8
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_62
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JE   LBB1_68
	JMP  LBB1_64

LBB1_29:
	WORD $0x8941; BYTE $0xc0 // mov    r8d, eax
	LONG $0xe0e08341         // and    r8d, -32
	LONG $0x39148d4c         // lea    r10, [rcx + rdi]
	LONG $0x70c28349         // add    r10, 112
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d

LBB1_30:
	LONG $0x04100f42; BYTE $0x1e   // movups    xmm0, oword [rsi + r11]
	LONG $0x54100f42; WORD $0x101e // movups    xmm2, oword [rsi + r11 + 16]
	LONG $0x44110f43; WORD $0xf01a // movups    oword [r10 + r11 - 16], xmm0
	LONG $0x14110f43; BYTE $0x1a   // movups    oword [r10 + r11], xmm2
	LONG $0x20c38349               // add    r11, 32
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB1_30
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB1_41
	WORD $0x18a8                   // test    al, 24
	JE   LBB1_36

LBB1_33:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0x8941; BYTE $0xc0 // mov    r8d, eax
	LONG $0xf8e08341         // and    r8d, -8

LBB1_34:
	LONG $0x161c8b4e         // mov    r11, qword [rsi + r10]
	LONG $0x111c894f         // mov    qword [r9 + r10], r11
	LONG $0x08c28349         // add    r10, 8
	WORD $0x394d; BYTE $0xd0 // cmp    r8, r10
	JNE  LBB1_34
	WORD $0x3949; BYTE $0xc0 // cmp    r8, rax
	JE   LBB1_41
	JMP  LBB1_36


TEXT Â·__lsh256_ssse3_final(SB), NOSPLIT, $16
	MOVQ ctx+0(FP), DI
	MOVQ hashval_base+8(FP), SI

	LEAQ LCDATA2<>(SB), BP

	LONG $0x10478b44               // mov    r8d, dword [rdi + 16]
	LONG $0x0744c642; WORD $0x8060 // mov    byte [rdi + r8 + 96], -128
	LONG $0x00007fba; BYTE $0x00   // mov    edx, 127
	WORD $0x2944; BYTE $0xc2       // sub    edx, r8d
	WORD $0xd285                   // test    edx, edx
	JLE  LBB2_13
	LONG $0x07048d4a               // lea    rax, [rdi + r8]
	LONG $0x61c08348               // add    rax, 97
	WORD $0xd189                   // mov    ecx, edx
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JAE  LBB2_3
	WORD $0xd231                   // xor    edx, edx
	JMP  LBB2_12

LBB2_3:
	WORD $0xfa83; BYTE $0x20 // cmp    edx, 32
	JAE  LBB2_5
	WORD $0xd231             // xor    edx, edx
	JMP  LBB2_9

LBB2_5:
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe283; BYTE $0xe0 // and    edx, -32
	WORD $0x0149; BYTE $0xf8 // add    r8, rdi
	LONG $0x71c08349         // add    r8, 113
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x570f; BYTE $0xc0 // xorps    xmm0, xmm0

LBB2_6:
	LONG $0x44110f43; WORD $0xf008 // movups    oword [r8 + r9 - 16], xmm0
	LONG $0x04110f43; BYTE $0x08   // movups    oword [r8 + r9], xmm0
	LONG $0x20c18349               // add    r9, 32
	WORD $0x394c; BYTE $0xca       // cmp    rdx, r9
	JNE  LBB2_6
	WORD $0x3948; BYTE $0xca       // cmp    rdx, rcx
	JE   LBB2_13
	WORD $0xc1f6; BYTE $0x18       // test    cl, 24
	JE   LBB2_12

LBB2_9:
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe283; BYTE $0xf8 // and    edx, -8

LBB2_10:
	QUAD $0x000000000004c74a // mov    qword [rax + r8], 0
	LONG $0x08c08349         // add    r8, 8
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JNE  LBB2_10
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JE   LBB2_13

LBB2_12:
	LONG $0x001004c6         // mov    byte [rax + rdx], 0
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JNE  LBB2_12

LBB2_13:
	LONG $0x6f0f44f3; WORD $0x2047 // movdqu    xmm8, oword [rdi + 32]
	LONG $0x6f0f44f3; WORD $0x3057 // movdqu    xmm10, oword [rdi + 48]
	LONG $0x6f0f44f3; WORD $0x404f // movdqu    xmm9, oword [rdi + 64]
	LONG $0x6f0f44f3; WORD $0x506f // movdqu    xmm13, oword [rdi + 80]
	LONG $0x6f6f0ff3; BYTE $0x60   // movdqu    xmm5, oword [rdi + 96]
	LONG $0x5f6f0ff3; BYTE $0x70   // movdqu    xmm3, oword [rdi + 112]
	QUAD $0x00000080976f0ff3       // movdqu    xmm2, oword [rdi + 128]
	QUAD $0x00000090876f0ff3       // movdqu    xmm0, oword [rdi + 144]
	QUAD $0x000000a0bf6f0ff3       // movdqu    xmm7, oword [rdi + 160]
	QUAD $0x000000b0b76f0ff3       // movdqu    xmm6, oword [rdi + 176]
	QUAD $0x000000c0a76f0ff3       // movdqu    xmm4, oword [rdi + 192]
	QUAD $0x000000d08f6f0ff3       // movdqu    xmm1, oword [rdi + 208]
	LONG $0xef0f4466; BYTE $0xc5   // pxor    xmm8, xmm5
	LONG $0xef0f4466; BYTE $0xca   // pxor    xmm9, xmm2
	LONG $0xef0f4466; BYTE $0xd3   // pxor    xmm10, xmm3
	LONG $0xef0f4466; BYTE $0xe8   // pxor    xmm13, xmm0
	LONG $0xfe0f4566; BYTE $0xc1   // paddd    xmm8, xmm9
	LONG $0xfe0f4566; BYTE $0xd5   // paddd    xmm10, xmm13
	LONG $0x6f0f4566; BYTE $0xd8   // movdqa    xmm11, xmm8
	LONG $0x720f4166; WORD $0x03d3 // psrld    xmm11, 3
	LONG $0x720f4166; WORD $0x1df0 // pslld    xmm8, 29
	LONG $0xeb0f4566; BYTE $0xc3   // por    xmm8, xmm11
	LONG $0x6f0f4566; BYTE $0xda   // movdqa    xmm11, xmm10
	LONG $0x720f4166; WORD $0x03d3 // psrld    xmm11, 3
	LONG $0x720f4166; WORD $0x1df2 // pslld    xmm10, 29
	LONG $0xeb0f4566; BYTE $0xd3   // por    xmm10, xmm11
	LONG $0xef0f4466; WORD $0x0045 // pxor    xmm8, oword 0[rbp]
	LONG $0xfe0f4566; BYTE $0xc8   // paddd    xmm9, xmm8
	LONG $0xef0f4466; WORD $0x1055 // pxor    xmm10, oword 16[rbp]
	LONG $0xfe0f4566; BYTE $0xea   // paddd    xmm13, xmm10
	LONG $0x6f0f4566; BYTE $0xd9   // movdqa    xmm11, xmm9
	LONG $0x720f4166; WORD $0x1fd3 // psrld    xmm11, 31
	LONG $0xfe0f4566; BYTE $0xc9   // paddd    xmm9, xmm9
	LONG $0xeb0f4566; BYTE $0xcb   // por    xmm9, xmm11
	LONG $0x6f0f4566; BYTE $0xdd   // movdqa    xmm11, xmm13
	LONG $0x720f4166; WORD $0x1fd3 // psrld    xmm11, 31
	LONG $0xfe0f4566; BYTE $0xed   // paddd    xmm13, xmm13
	LONG $0xeb0f4566; BYTE $0xeb   // por    xmm13, xmm11
	LONG $0xfe0f4566; BYTE $0xc1   // paddd    xmm8, xmm9
	LONG $0xfe0f4566; BYTE $0xd5   // paddd    xmm10, xmm13
	LONG $0x700f4566; WORD $0xd2c0 // pshufd    xmm8, xmm8, 210
	LONG $0x700f4566; WORD $0xd2e2 // pshufd    xmm12, xmm10, 210
	LONG $0x6f0f4466; WORD $0x2055 // movdqa    xmm10, oword 32[rbp]
	LONG $0x380f4566; WORD $0xca00 // pshufb    xmm9, xmm10
	LONG $0x6f0f4466; WORD $0x305d // movdqa    xmm11, oword 48[rbp]
	LONG $0x380f4566; WORD $0xeb00 // pshufb    xmm13, xmm11
	LONG $0xef0f4466; BYTE $0xe7   // pxor    xmm12, xmm7
	LONG $0xef0f4466; BYTE $0xc4   // pxor    xmm8, xmm4
	LONG $0xfe0f4566; BYTE $0xe0   // paddd    xmm12, xmm8
	LONG $0xef0f4466; BYTE $0xee   // pxor    xmm13, xmm6
	LONG $0xef0f4466; BYTE $0xc9   // pxor    xmm9, xmm1
	LONG $0xfe0f4566; BYTE $0xe9   // paddd    xmm13, xmm9
	LONG $0x6f0f4566; BYTE $0xf4   // movdqa    xmm14, xmm12
	LONG $0x720f4166; WORD $0x1bd6 // psrld    xmm14, 27
	LONG $0x720f4166; WORD $0x05f4 // pslld    xmm12, 5
	LONG $0xeb0f4566; BYTE $0xe6   // por    xmm12, xmm14
	LONG $0x6f0f4566; BYTE $0xf5   // movdqa    xmm14, xmm13
	LONG $0x720f4166; WORD $0x1bd6 // psrld    xmm14, 27
	LONG $0x720f4166; WORD $0x05f5 // pslld    xmm13, 5
	LONG $0xeb0f4566; BYTE $0xee   // por    xmm13, xmm14
	LONG $0xef0f4466; WORD $0x4065 // pxor    xmm12, oword 64[rbp]
	LONG $0xfe0f4566; BYTE $0xc4   // paddd    xmm8, xmm12
	LONG $0xef0f4466; WORD $0x506d // pxor    xmm13, oword 80[rbp]
	LONG $0xfe0f4566; BYTE $0xcd   // paddd    xmm9, xmm13
	LONG $0x6f0f4566; BYTE $0xf0   // movdqa    xmm14, xmm8
	LONG $0x720f4166; WORD $0x0fd6 // psrld    xmm14, 15
	LONG $0x720f4166; WORD $0x11f0 // pslld    xmm8, 17
	LONG $0xeb0f4566; BYTE $0xc6   // por    xmm8, xmm14
	LONG $0x6f0f4566; BYTE $0xf1   // movdqa    xmm14, xmm9
	LONG $0x720f4166; WORD $0x0fd6 // psrld    xmm14, 15
	LONG $0x720f4166; WORD $0x11f1 // pslld    xmm9, 17
	LONG $0xeb0f4566; BYTE $0xce   // por    xmm9, xmm14
	LONG $0xfe0f4566; BYTE $0xe0   // paddd    xmm12, xmm8
	LONG $0xfe0f4566; BYTE $0xe9   // paddd    xmm13, xmm9
	LONG $0x700f4566; WORD $0xd2e4 // pshufd    xmm12, xmm12, 210
	LONG $0x700f4566; WORD $0xd2ed // pshufd    xmm13, xmm13, 210
	LONG $0x380f4566; WORD $0xc200 // pshufb    xmm8, xmm10
	LONG $0x380f4566; WORD $0xcb00 // pshufb    xmm9, xmm11
	LONG $0x000070b8; BYTE $0x00   // mov    eax, 112
	MOVQ Â·step(SB), CX             // lea    rcx, [rip + _g_StepConstants]

LBB2_14:
	LONG $0xed700f66; BYTE $0x4b               // pshufd    xmm5, xmm5, 75
	LONG $0xeffe0f66                           // paddd    xmm5, xmm7
	LONG $0xdb700f66; BYTE $0x93               // pshufd    xmm3, xmm3, 147
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd2700f66; BYTE $0x4b               // pshufd    xmm2, xmm2, 75
	LONG $0xd4fe0f66                           // paddd    xmm2, xmm4
	LONG $0xc0700f66; BYTE $0x93               // pshufd    xmm0, xmm0, 147
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0xef0f4466; BYTE $0xed               // pxor    xmm13, xmm5
	LONG $0xef0f4466; BYTE $0xe2               // pxor    xmm12, xmm2
	LONG $0xfe0f4566; BYTE $0xec               // paddd    xmm13, xmm12
	LONG $0xef0f4466; BYTE $0xcb               // pxor    xmm9, xmm3
	LONG $0xef0f4466; BYTE $0xc0               // pxor    xmm8, xmm0
	LONG $0xfe0f4566; BYTE $0xc8               // paddd    xmm9, xmm8
	LONG $0x6f0f4566; BYTE $0xf5               // movdqa    xmm14, xmm13
	LONG $0x720f4166; WORD $0x03d6             // psrld    xmm14, 3
	LONG $0x720f4166; WORD $0x1df5             // pslld    xmm13, 29
	LONG $0xeb0f4566; BYTE $0xee               // por    xmm13, xmm14
	LONG $0x6f0f4566; BYTE $0xf1               // movdqa    xmm14, xmm9
	LONG $0x720f4166; WORD $0x03d6             // psrld    xmm14, 3
	LONG $0x720f4166; WORD $0x1df1             // pslld    xmm9, 29
	LONG $0xeb0f4566; BYTE $0xce               // por    xmm9, xmm14
	LONG $0xef0f4466; WORD $0x086c; BYTE $0xd0 // pxor    xmm13, oword [rax + rcx - 48]
	LONG $0xfe0f4566; BYTE $0xe5               // paddd    xmm12, xmm13
	LONG $0xef0f4466; WORD $0x084c; BYTE $0xe0 // pxor    xmm9, oword [rax + rcx - 32]
	LONG $0xfe0f4566; BYTE $0xc1               // paddd    xmm8, xmm9
	LONG $0x6f0f4566; BYTE $0xf4               // movdqa    xmm14, xmm12
	LONG $0x720f4166; WORD $0x1fd6             // psrld    xmm14, 31
	LONG $0xfe0f4566; BYTE $0xe4               // paddd    xmm12, xmm12
	LONG $0xeb0f4566; BYTE $0xe6               // por    xmm12, xmm14
	LONG $0x6f0f4566; BYTE $0xf0               // movdqa    xmm14, xmm8
	LONG $0x720f4166; WORD $0x1fd6             // psrld    xmm14, 31
	LONG $0xfe0f4566; BYTE $0xc0               // paddd    xmm8, xmm8
	LONG $0xeb0f4566; BYTE $0xc6               // por    xmm8, xmm14
	LONG $0xfe0f4566; BYTE $0xec               // paddd    xmm13, xmm12
	LONG $0xfe0f4566; BYTE $0xc8               // paddd    xmm9, xmm8
	LONG $0x700f4566; WORD $0xd2f5             // pshufd    xmm14, xmm13, 210
	LONG $0x700f4566; WORD $0xd2e9             // pshufd    xmm13, xmm9, 210
	LONG $0x380f4566; WORD $0xe200             // pshufb    xmm12, xmm10
	LONG $0x380f4566; WORD $0xc300             // pshufb    xmm8, xmm11
	LONG $0xff700f66; BYTE $0x4b               // pshufd    xmm7, xmm7, 75
	LONG $0xfdfe0f66                           // paddd    xmm7, xmm5
	LONG $0xf6700f66; BYTE $0x93               // pshufd    xmm6, xmm6, 147
	LONG $0xf3fe0f66                           // paddd    xmm6, xmm3
	LONG $0xe4700f66; BYTE $0x4b               // pshufd    xmm4, xmm4, 75
	LONG $0xe2fe0f66                           // paddd    xmm4, xmm2
	LONG $0xc9700f66; BYTE $0x93               // pshufd    xmm1, xmm1, 147
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xef0f4466; BYTE $0xef               // pxor    xmm13, xmm7
	LONG $0xef0f4466; BYTE $0xf4               // pxor    xmm14, xmm4
	LONG $0xef0f4466; BYTE $0xc6               // pxor    xmm8, xmm6
	LONG $0xef0f4466; BYTE $0xe1               // pxor    xmm12, xmm1
	LONG $0xfe0f4566; BYTE $0xee               // paddd    xmm13, xmm14
	LONG $0xfe0f4566; BYTE $0xc4               // paddd    xmm8, xmm12
	LONG $0x6f0f4566; BYTE $0xcd               // movdqa    xmm9, xmm13
	LONG $0x720f4166; WORD $0x1bd1             // psrld    xmm9, 27
	LONG $0x720f4166; WORD $0x05f5             // pslld    xmm13, 5
	LONG $0xeb0f4566; BYTE $0xe9               // por    xmm13, xmm9
	LONG $0x6f0f4566; BYTE $0xc8               // movdqa    xmm9, xmm8
	LONG $0x720f4166; WORD $0x1bd1             // psrld    xmm9, 27
	LONG $0x720f4166; WORD $0x05f0             // pslld    xmm8, 5
	LONG $0xeb0f4566; BYTE $0xc1               // por    xmm8, xmm9
	LONG $0xef0f4466; WORD $0x086c; BYTE $0xf0 // pxor    xmm13, oword [rax + rcx - 16]
	LONG $0xef0f4466; WORD $0x0804             // pxor    xmm8, oword [rax + rcx]
	LONG $0xfe0f4566; BYTE $0xf5               // paddd    xmm14, xmm13
	LONG $0xfe0f4566; BYTE $0xe0               // paddd    xmm12, xmm8
	LONG $0x6f0f4566; BYTE $0xce               // movdqa    xmm9, xmm14
	LONG $0x720f4166; WORD $0x0fd1             // psrld    xmm9, 15
	LONG $0x720f4166; WORD $0x11f6             // pslld    xmm14, 17
	LONG $0xeb0f4566; BYTE $0xf1               // por    xmm14, xmm9
	LONG $0x6f0f4566; BYTE $0xfc               // movdqa    xmm15, xmm12
	LONG $0x720f4166; WORD $0x0fd7             // psrld    xmm15, 15
	LONG $0x720f4166; WORD $0x11f4             // pslld    xmm12, 17
	LONG $0x6f0f4566; BYTE $0xcc               // movdqa    xmm9, xmm12
	LONG $0xeb0f4566; BYTE $0xcf               // por    xmm9, xmm15
	LONG $0xfe0f4566; BYTE $0xee               // paddd    xmm13, xmm14
	LONG $0xfe0f4566; BYTE $0xc1               // paddd    xmm8, xmm9
	LONG $0x700f4566; WORD $0xd2e5             // pshufd    xmm12, xmm13, 210
	LONG $0x700f4566; WORD $0xd2e8             // pshufd    xmm13, xmm8, 210
	LONG $0x6f0f4566; BYTE $0xc6               // movdqa    xmm8, xmm14
	LONG $0x380f4566; WORD $0xc200             // pshufb    xmm8, xmm10
	LONG $0x380f4566; WORD $0xcb00             // pshufb    xmm9, xmm11
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x03703d48; WORD $0x0000             // cmp    rax, 880
	JNE  LBB2_14
	LONG $0xed700f66; BYTE $0x4b               // pshufd    xmm5, xmm5, 75
	LONG $0xeffe0f66                           // paddd    xmm5, xmm7
	LONG $0xdb700f66; BYTE $0x93               // pshufd    xmm3, xmm3, 147
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd2700f66; BYTE $0x4b               // pshufd    xmm2, xmm2, 75
	LONG $0xd4fe0f66                           // paddd    xmm2, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc0700f66; BYTE $0x93               // pshufd    xmm0, xmm0, 147
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xef0f4166; BYTE $0xd5               // pxor    xmm2, xmm13
	LONG $0xef0f4166; BYTE $0xd4               // pxor    xmm2, xmm12
	LONG $0xef0f4166; BYTE $0xc1               // pxor    xmm0, xmm9
	LONG $0xef0f4166; BYTE $0xc0               // pxor    xmm0, xmm8
	LONG $0x167f0ff3                           // movdqu    oword [rsi], xmm2
	LONG $0x467f0ff3; BYTE $0x10               // movdqu    oword [rsi + 16], xmm0
	RET
