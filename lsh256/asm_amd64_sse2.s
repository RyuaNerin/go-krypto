//go:build amd64 && !purego && (!gccgo || go1.18)
// +build amd64
// +build !purego
// +build !gccgo go1.18

// GENERATED BY C2GOASM
// EDITED BY RYUANERIN
// -- DO NOT EDIT

#include "textflag.h"

TEXT 路__lsh256_sse2_init(SB), NOSPLIT, $0-16
	MOVQ	ctx+0(FP), DI
	MOVQ	algtype+8(FP), SI

	MOVQ 	SI, 0(DI)
	MOVQ 	$0, 16(DI)

	CMPQ 	SI, $32
	JEQ  	LSH256_INIT_256

LSH256_INIT_224:
	MOVD	路iv224(SB), BP
	JMP		LSH256_INIT_RET

LSH256_INIT_256:
	MOVD	路iv256(SB), BP

LSH256_INIT_RET:
	MOVAPS	 0(BP), X0
	MOVAPS	16(BP), X1
	MOVAPS	32(BP), X2
	MOVAPS	48(BP), X3

	MOVUPS	X0, 32(DI)
	MOVUPS	X1, 48(DI)
	MOVUPS	X2, 64(DI)
	MOVUPS	X3, 80(DI)
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x6c1b10a2917caf90
DATA LCDATA2<>+0x008(SB)/8, $0xcf7782436f352943
DATA LCDATA2<>+0x010(SB)/8, $0x29e96ff22ceb7472
DATA LCDATA2<>+0x018(SB)/8, $0x2eeb26428a9ba428
DATA LCDATA2<>+0x020(SB)/8, $0xffffffff00000000
DATA LCDATA2<>+0x028(SB)/8, $0xffffffffffffffff
DATA LCDATA2<>+0x030(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x038(SB)/8, $0xffffffff00000000
DATA LCDATA2<>+0x040(SB)/8, $0xffffffffffffffff
DATA LCDATA2<>+0x048(SB)/8, $0x00000000ffffffff
DATA LCDATA2<>+0x050(SB)/8, $0x872bb30e0e2c4021
DATA LCDATA2<>+0x058(SB)/8, $0x46f9c612a45e6cb2
DATA LCDATA2<>+0x060(SB)/8, $0x1359621b185fe69e
DATA LCDATA2<>+0x068(SB)/8, $0x1a116870263fccb2
DATA LCDATA2<>+0x070(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x078(SB)/8, $0x0000000000000000
GLOBL LCDATA2<>(SB), RODATA|NOPTR, $128

// stacksize 96
TEXT 路__lsh256_sse2_update(SB), NOSPLIT, $128-32
	MOVQ ctx+0(FP), DI
	MOVQ data_base+8(FP), SI
	MOVQ data_len+16(FP), DX
	//   data_cap+24

	// stack 96
	MOVQ SP, BP
	ADDQ $16, SP
	ANDQ $-16, SP
	MOVQ BP, 96(SP)
	LEAQ LCDATA2<>(SB), BP

	WORD $0x4f8b; BYTE $0x10 // mov    ecx, dword [rdi + 16]
	LONG $0x11048d48         // lea    rax, [rcx + rdx]
	LONG $0x7ff88348         // cmp    rax, 127
	JA   LBB1_4
	WORD $0xd285             // test    edx, edx
	JLE  LBB1_28
	LONG $0x0f048d4c         // lea    r8, [rdi + rcx]
	LONG $0x60c08349         // add    r8, 96
	WORD $0xd089             // mov    eax, edx
	LONG $0x08f88348         // cmp    rax, 8
	JB   LBB1_3
	LONG $0x0f0c8d4c         // lea    r9, [rdi + rcx]
	WORD $0x2949; BYTE $0xf1 // sub    r9, rsi
	LONG $0x60c18349         // add    r9, 96
	LONG $0x20f98349         // cmp    r9, 32
	JAE  LBB1_12

LBB1_3:
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_23:
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	WORD $0x2945; BYTE $0xcb // sub    r11d, r9d
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	LONG $0x03e38341         // and    r11d, 3
	JE   LBB1_25

LBB1_24:
	LONG $0x1cb60f42; BYTE $0x0e // movzx    ebx, byte [rsi + r9]
	LONG $0x081c8843             // mov    byte [r8 + r9], bl
	WORD $0xff49; BYTE $0xc1     // inc    r9
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_24

LBB1_25:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB1_28
	LONG $0x39048d4c // lea    r8, [rcx + rdi]
	LONG $0x63c08349 // add    r8, 99

LBB1_27:
	LONG $0x14b60f46; BYTE $0x0e   // movzx    r10d, byte [rsi + r9]
	LONG $0x08548847; BYTE $0xfd   // mov    byte [r8 + r9 - 3], r10b
	LONG $0x54b60f46; WORD $0x010e // movzx    r10d, byte [rsi + r9 + 1]
	LONG $0x08548847; BYTE $0xfe   // mov    byte [r8 + r9 - 2], r10b
	LONG $0x54b60f46; WORD $0x020e // movzx    r10d, byte [rsi + r9 + 2]
	LONG $0x08548847; BYTE $0xff   // mov    byte [r8 + r9 - 1], r10b
	LONG $0x54b60f46; WORD $0x030e // movzx    r10d, byte [rsi + r9 + 3]
	LONG $0x08148847               // mov    byte [r8 + r9], r10b
	LONG $0x04c18349               // add    r9, 4
	WORD $0x394c; BYTE $0xc8       // cmp    rax, r9
	JNE  LBB1_27

LBB1_28:
	WORD $0xd101 // add    ecx, edx
	JMP  LBB1_68

LBB1_4:
	LONG $0x576f0ff3; BYTE $0x20   // movdqu    xmm2, oword [rdi + 32]
	LONG $0x4f6f0ff3; BYTE $0x30   // movdqu    xmm1, oword [rdi + 48]
	LONG $0x5f6f0ff3; BYTE $0x40   // movdqu    xmm3, oword [rdi + 64]
	LONG $0x476f0ff3; BYTE $0x50   // movdqu    xmm0, oword [rdi + 80]
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB1_44
	LONG $0x0080b841; WORD $0x0000 // mov    r8d, 128
	WORD $0x2941; BYTE $0xc8       // sub    r8d, ecx
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	WORD $0x8545; BYTE $0xc0       // test    r8d, r8d
	JLE  LBB1_41
	LONG $0x0f0c8d4c               // lea    r9, [rdi + rcx]
	LONG $0x60c18349               // add    r9, 96
	LONG $0x08f88341               // cmp    r8d, 8
	JB   LBB1_7
	LONG $0x0f148d4c               // lea    r10, [rdi + rcx]
	WORD $0x2949; BYTE $0xf2       // sub    r10, rsi
	LONG $0x60c28349               // add    r10, 96
	LONG $0x20fa8349               // cmp    r10, 32
	JAE  LBB1_14

LBB1_7:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB1_36:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	WORD $0x8949; BYTE $0xc3 // mov    r11, rax
	LONG $0x03e38349         // and    r11, 3
	JE   LBB1_38

LBB1_37:
	LONG $0x1cb60f42; BYTE $0x06 // movzx    ebx, byte [rsi + r8]
	LONG $0x011c8843             // mov    byte [r9 + r8], bl
	WORD $0xff49; BYTE $0xc0     // inc    r8
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_37

LBB1_38:
	LONG $0x03fa8349         // cmp    r10, 3
	JB   LBB1_41
	WORD $0x0148; BYTE $0xf9 // add    rcx, rdi
	LONG $0x63c18348         // add    rcx, 99

LBB1_40:
	LONG $0x0cb60f46; BYTE $0x06   // movzx    r9d, byte [rsi + r8]
	LONG $0x014c8846; BYTE $0xfd   // mov    byte [rcx + r8 - 3], r9b
	LONG $0x4cb60f46; WORD $0x0106 // movzx    r9d, byte [rsi + r8 + 1]
	LONG $0x014c8846; BYTE $0xfe   // mov    byte [rcx + r8 - 2], r9b
	LONG $0x4cb60f46; WORD $0x0206 // movzx    r9d, byte [rsi + r8 + 2]
	LONG $0x014c8846; BYTE $0xff   // mov    byte [rcx + r8 - 1], r9b
	LONG $0x4cb60f46; WORD $0x0306 // movzx    r9d, byte [rsi + r8 + 3]
	LONG $0x010c8846               // mov    byte [rcx + r8], r9b
	LONG $0x04c08349               // add    r8, 4
	WORD $0x394c; BYTE $0xc0       // cmp    rax, r8
	JNE  LBB1_40

LBB1_41:
	LONG $0x7f6f0ff3; BYTE $0x60         // movdqu    xmm7, oword [rdi + 96]
	LONG $0x776f0ff3; BYTE $0x70         // movdqu    xmm6, oword [rdi + 112]
	QUAD $0x00000080af6f0ff3             // movdqu    xmm5, oword [rdi + 128]
	QUAD $0x00000090a76f0ff3             // movdqu    xmm4, oword [rdi + 144]
	LONG $0x7c7f0f66; WORD $0x2024       // movdqa    oword [rsp + 32], xmm7
	LONG $0xd7ef0f66                     // pxor    xmm2, xmm7
	LONG $0x6c7f0f66; WORD $0x1024       // movdqa    oword [rsp + 16], xmm5
	LONG $0xddef0f66                     // pxor    xmm3, xmm5
	LONG $0x747f0f66; WORD $0x3024       // movdqa    oword [rsp + 48], xmm6
	LONG $0xceef0f66                     // pxor    xmm1, xmm6
	LONG $0x247f0f66; BYTE $0x24         // movdqa    oword [rsp], xmm4
	LONG $0xc4ef0f66                     // pxor    xmm0, xmm4
	LONG $0xd3fe0f66                     // paddd    xmm2, xmm3
	LONG $0xc8fe0f66                     // paddd    xmm1, xmm0
	LONG $0x6f0f4466; BYTE $0xc2         // movdqa    xmm8, xmm2
	LONG $0x720f4166; WORD $0x03d0       // psrld    xmm8, 3
	LONG $0xf2720f66; BYTE $0x1d         // pslld    xmm2, 29
	LONG $0xeb0f4166; BYTE $0xd0         // por    xmm2, xmm8
	LONG $0x6f0f4466; BYTE $0xc1         // movdqa    xmm8, xmm1
	LONG $0x720f4166; WORD $0x03d0       // psrld    xmm8, 3
	LONG $0xf1720f66; BYTE $0x1d         // pslld    xmm1, 29
	LONG $0xeb0f4166; BYTE $0xc8         // por    xmm1, xmm8
	LONG $0x55ef0f66; BYTE $0x00         // pxor    xmm2, oword 0[rbp]
	LONG $0xdafe0f66                     // paddd    xmm3, xmm2
	LONG $0x4def0f66; BYTE $0x10         // pxor    xmm1, oword 16[rbp]
	LONG $0xc1fe0f66                     // paddd    xmm0, xmm1
	LONG $0x6f0f4466; BYTE $0xc3         // movdqa    xmm8, xmm3
	LONG $0x720f4166; WORD $0x1fd0       // psrld    xmm8, 31
	LONG $0xdbfe0f66                     // paddd    xmm3, xmm3
	LONG $0xeb0f4166; BYTE $0xd8         // por    xmm3, xmm8
	LONG $0x6f0f4466; BYTE $0xc0         // movdqa    xmm8, xmm0
	LONG $0x720f4166; WORD $0x1fd0       // psrld    xmm8, 31
	LONG $0xc0fe0f66                     // paddd    xmm0, xmm0
	LONG $0xeb0f4166; BYTE $0xc0         // por    xmm0, xmm8
	LONG $0xd3fe0f66                     // paddd    xmm2, xmm3
	LONG $0x6f0f4466; WORD $0x204d       // movdqa    xmm9, oword 32[rbp]
	LONG $0xef0f4566; BYTE $0xc0         // pxor    xmm8, xmm8
	LONG $0x100f44f3; BYTE $0xc3         // movss    xmm8, xmm3
	LONG $0xdb0f4166; BYTE $0xd9         // pand    xmm3, xmm9
	LONG $0x6f0f4166; BYTE $0xe9         // movdqa    xmm5, xmm9
	LONG $0x6f0f4466; BYTE $0xcb         // movdqa    xmm9, xmm3
	LONG $0x720f4166; WORD $0x18d1       // psrld    xmm9, 24
	LONG $0xf3720f66; BYTE $0x08         // pslld    xmm3, 8
	LONG $0xeb0f4166; BYTE $0xd9         // por    xmm3, xmm9
	LONG $0xe4ef0f66                     // pxor    xmm4, xmm4
	LONG $0xc3570f44                     // xorps    xmm8, xmm3
	LONG $0xdc100ff2                     // movsd    xmm3, xmm4
	LONG $0x280f4466; BYTE $0xd3         // movapd    xmm10, xmm3
	LONG $0x720f4166; WORD $0x18d2       // psrld    xmm10, 24
	LONG $0xf3720f66; BYTE $0x08         // pslld    xmm3, 8
	LONG $0xeb0f4166; BYTE $0xda         // por    xmm3, xmm10
	LONG $0x6f0f4466; WORD $0x304d       // movdqa    xmm9, oword 48[rbp]
	LONG $0x7e0f45f3; BYTE $0xc0         // movq    xmm8, xmm8
	LONG $0xef0f4466; BYTE $0xc3         // pxor    xmm8, xmm3
	LONG $0x6f0f4466; BYTE $0xd3         // movdqa    xmm10, xmm3
	LONG $0xdb0f4566; BYTE $0xd1         // pand    xmm10, xmm9
	LONG $0x6f0f4166; BYTE $0xda         // movdqa    xmm3, xmm10
	LONG $0xd3720f66; BYTE $0x18         // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f2       // pslld    xmm10, 8
	LONG $0xeb0f4466; BYTE $0xd3         // por    xmm10, xmm3
	LONG $0x756f0f66; BYTE $0x40         // movdqa    xmm6, oword 64[rbp]
	LONG $0x6f0f4466; BYTE $0xd8         // movdqa    xmm11, xmm0
	LONG $0xdb0f4466; BYTE $0xde         // pand    xmm11, xmm6
	LONG $0x6f0f4166; BYTE $0xdb         // movdqa    xmm3, xmm11
	LONG $0xd3720f66; BYTE $0x18         // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f3       // pslld    xmm11, 8
	LONG $0xeb0f4466; BYTE $0xdb         // por    xmm11, xmm3
	LONG $0x7e0f45f3; BYTE $0xe3         // movq    xmm12, xmm11
	LONG $0x6f0f4166; BYTE $0xdc         // movdqa    xmm3, xmm12
	LONG $0xd3720f66; BYTE $0x18         // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f4       // pslld    xmm12, 8
	LONG $0xeb0f4466; BYTE $0xe3         // por    xmm12, xmm3
	LONG $0xff570f45                     // xorps    xmm15, xmm15
	LONG $0x100f45f3; BYTE $0xfc         // movss    xmm15, xmm12
	LONG $0xdf280f41                     // movaps    xmm3, xmm15
	LONG $0xd3720f66; BYTE $0x18         // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f7       // pslld    xmm15, 8
	LONG $0xeb0f4466; BYTE $0xfb         // por    xmm15, xmm3
	LONG $0x6f0f4166; BYTE $0xd8         // movdqa    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x08         // pslldq    xmm3, 8
	LONG $0xd8c60f41; BYTE $0x62         // shufps    xmm3, xmm8, 98
	LONG $0xc8fe0f66                     // paddd    xmm1, xmm0
	LONG $0xdb0f4166; BYTE $0xc1         // pand    xmm0, xmm9
	LONG $0xef0f4166; BYTE $0xc3         // pxor    xmm0, xmm11
	QUAD $0x0000a0b76f0f44f3; BYTE $0x00 // movdqu    xmm14, oword [rdi + 160]
	LONG $0xc4100ff2                     // movsd    xmm0, xmm4
	LONG $0x570f4166; BYTE $0xc4         // xorpd    xmm0, xmm12
	LONG $0xc0570f45                     // xorps    xmm8, xmm8
	LONG $0xc0c60f44; BYTE $0x30         // shufps    xmm8, xmm0, 48
	LONG $0xc0c60f44; BYTE $0x68         // shufps    xmm8, xmm0, 104
	QUAD $0x0000c0af6f0f44f3; BYTE $0x00 // movdqu    xmm13, oword [rdi + 192]
	LONG $0xc7570f45                     // xorps    xmm8, xmm15
	QUAD $0x000000d0a7100f44             // movups    xmm12, oword [rdi + 208]
	LONG $0xc2700f66; BYTE $0xd2         // pshufd    xmm0, xmm2, 210
	LONG $0xf9700f66; BYTE $0xd2         // pshufd    xmm7, xmm1, 210
	LONG $0x700f4166; WORD $0x6cca       // pshufd    xmm1, xmm10, 108
	LONG $0xef0f4166; BYTE $0xfe         // pxor    xmm7, xmm14
	LONG $0xef0f4166; BYTE $0xc5         // pxor    xmm0, xmm13
	LONG $0xf8fe0f66                     // paddd    xmm7, xmm0
	LONG $0xdc570f41                     // xorps    xmm3, xmm12
	WORD $0x570f; BYTE $0xd9             // xorps    xmm3, xmm1
	LONG $0xcf6f0f66                     // movdqa    xmm1, xmm7
	LONG $0xd1720f66; BYTE $0x1b         // psrld    xmm1, 27
	LONG $0xf7720f66; BYTE $0x05         // pslld    xmm7, 5
	LONG $0xf9eb0f66                     // por    xmm7, xmm1
	QUAD $0x000000b0bf100f44             // movups    xmm15, oword [rdi + 176]
	LONG $0xc7570f45                     // xorps    xmm8, xmm15
	LONG $0xfe0f4466; BYTE $0xc3         // paddd    xmm8, xmm3
	LONG $0x6f0f4166; BYTE $0xc8         // movdqa    xmm1, xmm8
	LONG $0xd1720f66; BYTE $0x1b         // psrld    xmm1, 27
	LONG $0x720f4166; WORD $0x05f0       // pslld    xmm8, 5
	LONG $0x7def0f66; BYTE $0x50         // pxor    xmm7, oword 80[rbp]
	LONG $0xeb0f4466; BYTE $0xc1         // por    xmm8, xmm1
	LONG $0xc7fe0f66                     // paddd    xmm0, xmm7
	LONG $0xc86f0f66                     // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x0f         // psrld    xmm1, 15
	LONG $0xf0720f66; BYTE $0x11         // pslld    xmm0, 17
	LONG $0xc1eb0f66                     // por    xmm0, xmm1
	LONG $0xef0f4466; WORD $0x6045       // pxor    xmm8, oword 96[rbp]
	LONG $0xfe0f4166; BYTE $0xd8         // paddd    xmm3, xmm8
	LONG $0xcb6f0f66                     // movdqa    xmm1, xmm3
	LONG $0xd1720f66; BYTE $0x0f         // psrld    xmm1, 15
	LONG $0xf3720f66; BYTE $0x11         // pslld    xmm3, 17
	LONG $0xd9eb0f66                     // por    xmm3, xmm1
	LONG $0xf8fe0f66                     // paddd    xmm7, xmm0
	LONG $0xc9ef0f66                     // pxor    xmm1, xmm1
	LONG $0xc8100ff3                     // movss    xmm1, xmm0
	LONG $0xc5db0f66                     // pand    xmm0, xmm5
	LONG $0x6f0f4466; BYTE $0xd0         // movdqa    xmm10, xmm0
	LONG $0x720f4166; WORD $0x18d2       // psrld    xmm10, 24
	LONG $0xf0720f66; BYTE $0x08         // pslld    xmm0, 8
	LONG $0xeb0f4166; BYTE $0xc2         // por    xmm0, xmm10
	WORD $0x570f; BYTE $0xc8             // xorps    xmm1, xmm0
	LONG $0xc4100ff2                     // movsd    xmm0, xmm4
	LONG $0x280f4466; BYTE $0xd0         // movapd    xmm10, xmm0
	LONG $0x720f4166; WORD $0x18d2       // psrld    xmm10, 24
	LONG $0xf0720f66; BYTE $0x08         // pslld    xmm0, 8
	LONG $0xeb0f4166; BYTE $0xc2         // por    xmm0, xmm10
	LONG $0xe97e0ff3                     // movq    xmm5, xmm1
	LONG $0xe8ef0f66                     // pxor    xmm5, xmm0
	LONG $0xdb0f4166; BYTE $0xc1         // pand    xmm0, xmm9
	LONG $0x6f0f4466; BYTE $0xd0         // movdqa    xmm10, xmm0
	LONG $0x720f4166; WORD $0x18d2       // psrld    xmm10, 24
	LONG $0xf0720f66; BYTE $0x08         // pslld    xmm0, 8
	LONG $0xeb0f4166; BYTE $0xc2         // por    xmm0, xmm10
	LONG $0x6f0f4466; BYTE $0xd3         // movdqa    xmm10, xmm3
	LONG $0xdb0f4466; BYTE $0xd6         // pand    xmm10, xmm6
	LONG $0x6f0f4566; BYTE $0xda         // movdqa    xmm11, xmm10
	LONG $0x720f4166; WORD $0x18d3       // psrld    xmm11, 24
	LONG $0x720f4166; WORD $0x08f2       // pslld    xmm10, 8
	LONG $0xeb0f4566; BYTE $0xd3         // por    xmm10, xmm11
	LONG $0x7e0f45f3; BYTE $0xda         // movq    xmm11, xmm10
	LONG $0x6f0f4166; BYTE $0xcb         // movdqa    xmm1, xmm11
	LONG $0xd1720f66; BYTE $0x18         // psrld    xmm1, 24
	LONG $0x720f4166; WORD $0x08f3       // pslld    xmm11, 8
	LONG $0xeb0f4466; BYTE $0xd9         // por    xmm11, xmm1
	LONG $0xd2ef0f66                     // pxor    xmm2, xmm2
	LONG $0x100f41f3; BYTE $0xd3         // movss    xmm2, xmm11
	WORD $0x280f; BYTE $0xca             // movaps    xmm1, xmm2
	LONG $0xd1720f66; BYTE $0x18         // psrld    xmm1, 24
	LONG $0xf2720f66; BYTE $0x08         // pslld    xmm2, 8
	LONG $0xd1eb0f66                     // por    xmm2, xmm1
	LONG $0xcd6f0f66                     // movdqa    xmm1, xmm5
	LONG $0xf9730f66; BYTE $0x08         // pslldq    xmm1, 8
	LONG $0x62cdc60f                     // shufps    xmm1, xmm5, 98
	LONG $0xc0700f66; BYTE $0x6c         // pshufd    xmm0, xmm0, 108
	LONG $0xc1ef0f66                     // pxor    xmm0, xmm1
	LONG $0xfe0f4466; BYTE $0xc3         // paddd    xmm8, xmm3
	LONG $0xdb0f4166; BYTE $0xd9         // pand    xmm3, xmm9
	LONG $0xef0f4166; BYTE $0xda         // pxor    xmm3, xmm10
	LONG $0xdc100ff2                     // movsd    xmm3, xmm4
	LONG $0x570f4166; BYTE $0xdb         // xorpd    xmm3, xmm11
	WORD $0x570f; BYTE $0xc9             // xorps    xmm1, xmm1
	LONG $0x30cbc60f                     // shufps    xmm1, xmm3, 48
	LONG $0x68cbc60f                     // shufps    xmm1, xmm3, 104
	WORD $0x570f; BYTE $0xca             // xorps    xmm1, xmm2
	LONG $0xdf700f66; BYTE $0xd2         // pshufd    xmm3, xmm7, 210
	LONG $0x700f4166; WORD $0xd2d0       // pshufd    xmm2, xmm8, 210
	LONG $0x000070b9; BYTE $0x00         // mov    ecx, 112
	MOVQ 路step(SB), R8                   // lea    r8, [rip + _g_StepConstants]
LBB1_42:
	LONG $0x646f0f66; WORD $0x2024             // movdqa    xmm4, oword [rsp + 32]
	LONG $0xe4700f66; BYTE $0x4b               // pshufd    xmm4, xmm4, 75
	LONG $0xfe0f4166; BYTE $0xe6               // paddd    xmm4, xmm14
	LONG $0x7c6f0f66; WORD $0x3024             // movdqa    xmm7, oword [rsp + 48]
	LONG $0xff700f66; BYTE $0x93               // pshufd    xmm7, xmm7, 147
	LONG $0xfe0f4166; BYTE $0xff               // paddd    xmm7, xmm15
	LONG $0x746f0f66; WORD $0x1024             // movdqa    xmm6, oword [rsp + 16]
	LONG $0xf6700f66; BYTE $0x4b               // pshufd    xmm6, xmm6, 75
	LONG $0xfe0f4166; BYTE $0xf5               // paddd    xmm6, xmm13
	LONG $0x2c6f0f66; BYTE $0x24               // movdqa    xmm5, oword [rsp]
	LONG $0xed700f66; BYTE $0x93               // pshufd    xmm5, xmm5, 147
	LONG $0xfe0f4166; BYTE $0xec               // paddd    xmm5, xmm12
	LONG $0xd4ef0f66                           // pxor    xmm2, xmm4
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	WORD $0x570f; BYTE $0xcf                   // xorps    xmm1, xmm7
	LONG $0xc5ef0f66                           // pxor    xmm0, xmm5
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0x6f0f4466; BYTE $0xc2               // movdqa    xmm8, xmm2
	LONG $0x720f4166; WORD $0x03d0             // psrld    xmm8, 3
	LONG $0xf2720f66; BYTE $0x1d               // pslld    xmm2, 29
	LONG $0xeb0f4166; BYTE $0xd0               // por    xmm2, xmm8
	LONG $0x6f0f4466; BYTE $0xc1               // movdqa    xmm8, xmm1
	LONG $0x720f4166; WORD $0x03d0             // psrld    xmm8, 3
	LONG $0xf1720f66; BYTE $0x1d               // pslld    xmm1, 29
	LONG $0xeb0f4166; BYTE $0xc8               // por    xmm1, xmm8
	LONG $0xef0f4266; WORD $0x0154; BYTE $0xd0 // pxor    xmm2, oword [rcx + r8 - 48]
	LONG $0xef0f4266; WORD $0x014c; BYTE $0xe0 // pxor    xmm1, oword [rcx + r8 - 32]
	LONG $0xdafe0f66                           // paddd    xmm3, xmm2
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x6f0f4466; BYTE $0xc3               // movdqa    xmm8, xmm3
	LONG $0x720f4166; WORD $0x1fd0             // psrld    xmm8, 31
	LONG $0xdbfe0f66                           // paddd    xmm3, xmm3
	LONG $0x6f0f4466; BYTE $0xd0               // movdqa    xmm10, xmm0
	LONG $0x720f4166; WORD $0x1fd2             // psrld    xmm10, 31
	LONG $0xeb0f4166; BYTE $0xd8               // por    xmm3, xmm8
	LONG $0xc0fe0f66                           // paddd    xmm0, xmm0
	LONG $0xeb0f4166; BYTE $0xc2               // por    xmm0, xmm10
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x100f44f3; BYTE $0xc3               // movss    xmm8, xmm3
	LONG $0x6f0f4466; BYTE $0xd3               // movdqa    xmm10, xmm3
	LONG $0x5d6f0f66; BYTE $0x20               // movdqa    xmm3, oword 32[rbp]
	LONG $0xdb0f4466; BYTE $0xd3               // pand    xmm10, xmm3
	LONG $0x6f0f4166; BYTE $0xda               // movdqa    xmm3, xmm10
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f2             // pslld    xmm10, 8
	LONG $0xeb0f4466; BYTE $0xd3               // por    xmm10, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0x6f0f4466; WORD $0x404d             // movdqa    xmm9, oword 64[rbp]
	LONG $0xdb0f4166; BYTE $0xd9               // pand    xmm3, xmm9
	LONG $0xc2570f45                           // xorps    xmm8, xmm10
	LONG $0x6f0f4466; BYTE $0xdb               // movdqa    xmm11, xmm3
	LONG $0x720f4166; WORD $0x18d3             // psrld    xmm11, 24
	LONG $0xf3720f66; BYTE $0x08               // pslld    xmm3, 8
	LONG $0xef0f4566; BYTE $0xc9               // pxor    xmm9, xmm9
	LONG $0x100f45f2; BYTE $0xd1               // movsd    xmm10, xmm9
	LONG $0xeb0f4166; BYTE $0xdb               // por    xmm3, xmm11
	LONG $0x7e0f44f3; BYTE $0xdb               // movq    xmm11, xmm3
	LONG $0x6f0f4466; WORD $0x304d             // movdqa    xmm9, oword 48[rbp]
	LONG $0xdb0f4166; BYTE $0xc1               // pand    xmm0, xmm9
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0x6f0f4166; BYTE $0xdb               // movdqa    xmm3, xmm11
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f3             // pslld    xmm11, 8
	LONG $0xeb0f4466; BYTE $0xdb               // por    xmm11, xmm3
	LONG $0x280f4166; BYTE $0xda               // movapd    xmm3, xmm10
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f2             // pslld    xmm10, 8
	LONG $0xeb0f4466; BYTE $0xd3               // por    xmm10, xmm3
	LONG $0xef0f4566; BYTE $0xc9               // pxor    xmm9, xmm9
	LONG $0x100f45f3; BYTE $0xcb               // movss    xmm9, xmm11
	LONG $0x7045120f                           // movlps    xmm0, qword 112[rbp]
	LONG $0xc3570f41                           // xorps    xmm0, xmm11
	LONG $0xd9280f41                           // movaps    xmm3, xmm9
	LONG $0x720f4166; WORD $0x08f1             // pslld    xmm9, 8
	LONG $0x700f4466; WORD $0xd2da             // pshufd    xmm11, xmm2, 210
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0xd1700f66; BYTE $0xd2               // pshufd    xmm2, xmm1, 210
	LONG $0x7e0f41f3; BYTE $0xc8               // movq    xmm1, xmm8
	LONG $0xef0f4166; BYTE $0xca               // pxor    xmm1, xmm10
	LONG $0xeb0f4466; BYTE $0xcb               // por    xmm9, xmm3
	LONG $0xc0570f45                           // xorps    xmm8, xmm8
	LONG $0xc0c60f44; BYTE $0x30               // shufps    xmm8, xmm0, 48
	LONG $0xc0c60f44; BYTE $0x68               // shufps    xmm8, xmm0, 104
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x08               // pslldq    xmm3, 8
	LONG $0x730f4166; WORD $0x0cda             // psrldq    xmm10, 12
	LONG $0x55c60f44; WORD $0xe270             // shufps    xmm10, oword 112[rbp], 226
	LONG $0x62d9c60f                           // shufps    xmm3, xmm1, 98
	LONG $0xc2280f41                           // movaps    xmm0, xmm10
	LONG $0x720f4166; WORD $0x08f2             // pslld    xmm10, 8
	LONG $0x700f4566; WORD $0x4bf6             // pshufd    xmm14, xmm14, 75
	LONG $0xd0720f66; BYTE $0x18               // psrld    xmm0, 24
	LONG $0x647f0f66; WORD $0x2024             // movdqa    oword [rsp + 32], xmm4
	LONG $0xfe0f4466; BYTE $0xf4               // paddd    xmm14, xmm4
	LONG $0x700f4566; WORD $0x93ff             // pshufd    xmm15, xmm15, 147
	LONG $0x247c290f; BYTE $0x30               // movaps    oword [rsp + 48], xmm7
	LONG $0xfe0f4466; BYTE $0xff               // paddd    xmm15, xmm7
	LONG $0xc1570f45                           // xorps    xmm8, xmm9
	LONG $0x700f4566; WORD $0x4bed             // pshufd    xmm13, xmm13, 75
	LONG $0x747f0f66; WORD $0x1024             // movdqa    oword [rsp + 16], xmm6
	LONG $0xfe0f4466; BYTE $0xee               // paddd    xmm13, xmm6
	LONG $0x700f4566; WORD $0x93e4             // pshufd    xmm12, xmm12, 147
	LONG $0xeb0f4466; BYTE $0xd0               // por    xmm10, xmm0
	LONG $0x2c7f0f66; BYTE $0x24               // movdqa    oword [rsp], xmm5
	LONG $0xfe0f4466; BYTE $0xe5               // paddd    xmm12, xmm5
	LONG $0xef0f4166; BYTE $0xd6               // pxor    xmm2, xmm14
	LONG $0xef0f4566; BYTE $0xdd               // pxor    xmm11, xmm13
	LONG $0xc7570f45                           // xorps    xmm8, xmm15
	LONG $0xdc570f41                           // xorps    xmm3, xmm12
	LONG $0xda570f41                           // xorps    xmm3, xmm10
	LONG $0xfe0f4166; BYTE $0xd3               // paddd    xmm2, xmm11
	LONG $0xfe0f4466; BYTE $0xc3               // paddd    xmm8, xmm3
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x1b               // psrld    xmm0, 27
	LONG $0xf2720f66; BYTE $0x05               // pslld    xmm2, 5
	LONG $0xd0eb0f66                           // por    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc0               // movdqa    xmm0, xmm8
	LONG $0xd0720f66; BYTE $0x1b               // psrld    xmm0, 27
	LONG $0x720f4166; WORD $0x05f0             // pslld    xmm8, 5
	LONG $0xeb0f4466; BYTE $0xc0               // por    xmm8, xmm0
	LONG $0xef0f4266; WORD $0x0154; BYTE $0xf0 // pxor    xmm2, oword [rcx + r8 - 16]
	LONG $0xef0f4666; WORD $0x0104             // pxor    xmm8, oword [rcx + r8]
	LONG $0xfe0f4466; BYTE $0xda               // paddd    xmm11, xmm2
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xd0720f66; BYTE $0x0f               // psrld    xmm0, 15
	LONG $0xfe0f4166; BYTE $0xd8               // paddd    xmm3, xmm8
	LONG $0x720f4166; WORD $0x11f3             // pslld    xmm11, 17
	LONG $0xeb0f4466; BYTE $0xd8               // por    xmm11, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xd0720f66; BYTE $0x0f               // psrld    xmm0, 15
	LONG $0xf3720f66; BYTE $0x11               // pslld    xmm3, 17
	LONG $0xfe0f4166; BYTE $0xd3               // paddd    xmm2, xmm11
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0x100f41f3; BYTE $0xcb               // movss    xmm1, xmm11
	LONG $0xdb0f4466; WORD $0x205d             // pand    xmm11, oword 32[rbp]
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xd0720f66; BYTE $0x18               // psrld    xmm0, 24
	LONG $0x720f4166; WORD $0x08f3             // pslld    xmm11, 8
	LONG $0xeb0f4466; BYTE $0xd8               // por    xmm11, xmm0
	LONG $0xcb570f41                           // xorps    xmm1, xmm11
	LONG $0xc3280f41                           // movaps    xmm0, xmm11
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xc4100ff2                           // movsd    xmm0, xmm4
	LONG $0x280f4466; BYTE $0xc8               // movapd    xmm9, xmm0
	LONG $0x720f4166; WORD $0x18d1             // psrld    xmm9, 24
	LONG $0xf0720f66; BYTE $0x08               // pslld    xmm0, 8
	LONG $0x6f0f4466; BYTE $0xd3               // movdqa    xmm10, xmm3
	LONG $0xdb0f4466; WORD $0x4055             // pand    xmm10, oword 64[rbp]
	LONG $0xeb0f4166; BYTE $0xc1               // por    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0x720f4166; WORD $0x18d1             // psrld    xmm9, 24
	LONG $0x720f4166; WORD $0x08f2             // pslld    xmm10, 8
	LONG $0xeb0f4566; BYTE $0xd1               // por    xmm10, xmm9
	LONG $0xc97e0ff3                           // movq    xmm1, xmm1
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x6f0f4466; BYTE $0xc9               // movdqa    xmm9, xmm1
	LONG $0x730f4166; WORD $0x08f9             // pslldq    xmm9, 8
	LONG $0xc9c60f44; BYTE $0x62               // shufps    xmm9, xmm1, 98
	LONG $0xd8730f66; BYTE $0x0c               // psrldq    xmm0, 12
	LONG $0xe2c4c60f                           // shufps    xmm0, xmm4, 226
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0xf0720f66; BYTE $0x08               // pslld    xmm0, 8
	LONG $0xc1eb0f66                           // por    xmm0, xmm1
	LONG $0xfe0f4466; BYTE $0xc3               // paddd    xmm8, xmm3
	LONG $0xef0f4166; BYTE $0xc1               // pxor    xmm0, xmm9
	LONG $0x7e0f41f3; BYTE $0xca               // movq    xmm1, xmm10
	LONG $0x5ddb0f66; BYTE $0x30               // pand    xmm3, oword 48[rbp]
	LONG $0xef0f4166; BYTE $0xda               // pxor    xmm3, xmm10
	LONG $0x6f0f4466; BYTE $0xc9               // movdqa    xmm9, xmm1
	LONG $0x720f4166; WORD $0x18d1             // psrld    xmm9, 24
	LONG $0xf1720f66; BYTE $0x08               // pslld    xmm1, 8
	LONG $0xeb0f4166; BYTE $0xc9               // por    xmm1, xmm9
	LONG $0xef0f4566; BYTE $0xc9               // pxor    xmm9, xmm9
	LONG $0x100f44f3; BYTE $0xc9               // movss    xmm9, xmm1
	LONG $0xdc100ff2                           // movsd    xmm3, xmm4
	LONG $0xd9570f66                           // xorpd    xmm3, xmm1
	LONG $0xc9280f41                           // movaps    xmm1, xmm9
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0x720f4166; WORD $0x08f1             // pslld    xmm9, 8
	LONG $0xeb0f4466; BYTE $0xc9               // por    xmm9, xmm1
	LONG $0xc9ef0f66                           // pxor    xmm1, xmm1
	LONG $0x30cbc60f                           // shufps    xmm1, xmm3, 48
	LONG $0x68cbc60f                           // shufps    xmm1, xmm3, 104
	LONG $0xc9570f41                           // xorps    xmm1, xmm9
	LONG $0xda700f66; BYTE $0xd2               // pshufd    xmm3, xmm2, 210
	LONG $0x700f4166; WORD $0xd2d0             // pshufd    xmm2, xmm8, 210
	LONG $0x40c18348                           // add    rcx, 64
	LONG $0x70f98148; WORD $0x0003; BYTE $0x00 // cmp    rcx, 880
	JNE  LBB1_42
	LONG $0x7c700f66; WORD $0x2024; BYTE $0x4b // pshufd    xmm7, oword [rsp + 32], 75
	LONG $0xfe0f4166; BYTE $0xfe               // paddd    xmm7, xmm14
	LONG $0x74700f66; WORD $0x3024; BYTE $0x93 // pshufd    xmm6, oword [rsp + 48], 147
	LONG $0xfe0f4166; BYTE $0xf7               // paddd    xmm6, xmm15
	LONG $0x6c700f66; WORD $0x1024; BYTE $0x4b // pshufd    xmm5, oword [rsp + 16], 75
	LONG $0xfe0f4166; BYTE $0xed               // paddd    xmm5, xmm13
	LONG $0x24700f66; WORD $0x9324             // pshufd    xmm4, oword [rsp], 147
	LONG $0xfe0f4166; BYTE $0xe4               // paddd    xmm4, xmm12
	LONG $0xd7ef0f66                           // pxor    xmm2, xmm7
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	WORD $0x570f; BYTE $0xce                   // xorps    xmm1, xmm6
	LONG $0xc4ef0f66                           // pxor    xmm0, xmm4
	WORD $0x0148; BYTE $0xc6                   // add    rsi, rax
	WORD $0x2948; BYTE $0xc2                   // sub    rdx, rax
	LONG $0x001047c7; WORD $0x0000; BYTE $0x00 // mov    dword [rdi + 16], 0

LBB1_44:
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 128
	JB   LBB1_49
	MOVQ 路step(SB), AX                         // lea    rax, [rip + _g_StepConstants]
LBB1_46:
	LONG $0x366f0ff3                           // movdqu    xmm6, oword [rsi]
	LONG $0x56100f44; BYTE $0x10               // movups    xmm10, oword [rsi + 16]
	LONG $0x6e6f0ff3; BYTE $0x20               // movdqu    xmm5, oword [rsi + 32]
	LONG $0x666f0ff3; BYTE $0x30               // movdqu    xmm4, oword [rsi + 48]
	LONG $0x6f0f44f3; WORD $0x406e             // movdqu    xmm13, oword [rsi + 64]
	LONG $0x507e100f                           // movups    xmm7, oword [rsi + 80]
	LONG $0x243c290f                           // movaps    oword [rsp], xmm7
	LONG $0x607e100f                           // movups    xmm7, oword [rsi + 96]
	LONG $0x247c290f; BYTE $0x40               // movaps    oword [rsp + 64], xmm7
	LONG $0x747f0f66; WORD $0x2024             // movdqa    oword [rsp + 32], xmm6
	LONG $0xd6ef0f66                           // pxor    xmm2, xmm6
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xca570f41                           // xorps    xmm1, xmm10
	LONG $0x647f0f66; WORD $0x3024             // movdqa    oword [rsp + 48], xmm4
	LONG $0xc4ef0f66                           // pxor    xmm0, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xf26f0f66                           // movdqa    xmm6, xmm2
	LONG $0xd6720f66; BYTE $0x03               // psrld    xmm6, 3
	LONG $0xf2720f66; BYTE $0x1d               // pslld    xmm2, 29
	LONG $0xd6eb0f66                           // por    xmm2, xmm6
	LONG $0x55ef0f66; BYTE $0x00               // pxor    xmm2, oword 0[rbp]
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xd6720f66; BYTE $0x03               // psrld    xmm6, 3
	LONG $0xf1720f66; BYTE $0x1d               // pslld    xmm1, 29
	LONG $0xceeb0f66                           // por    xmm1, xmm6
	LONG $0x4def0f66; BYTE $0x10               // pxor    xmm1, oword 16[rbp]
	LONG $0xdafe0f66                           // paddd    xmm3, xmm2
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xd6720f66; BYTE $0x1f               // psrld    xmm6, 31
	LONG $0xdbfe0f66                           // paddd    xmm3, xmm3
	LONG $0xdeeb0f66                           // por    xmm3, xmm6
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xd6720f66; BYTE $0x1f               // psrld    xmm6, 31
	LONG $0xc0fe0f66                           // paddd    xmm0, xmm0
	LONG $0xc6eb0f66                           // por    xmm0, xmm6
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xf3100ff3                           // movss    xmm6, xmm3
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp]
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0x6f0f4466; BYTE $0xc3               // movdqa    xmm8, xmm3
	LONG $0x720f4166; WORD $0x18d0             // psrld    xmm8, 24
	LONG $0xf3720f66; BYTE $0x08               // pslld    xmm3, 8
	LONG $0xeb0f4166; BYTE $0xd8               // por    xmm3, xmm8
	WORD $0x570f; BYTE $0xf3                   // xorps    xmm6, xmm3
	LONG $0xe4570f45                           // xorps    xmm12, xmm12
	LONG $0x100f41f2; BYTE $0xdc               // movsd    xmm3, xmm12
	LONG $0x280f4466; BYTE $0xc3               // movapd    xmm8, xmm3
	LONG $0x720f4166; WORD $0x18d0             // psrld    xmm8, 24
	LONG $0xf3720f66; BYTE $0x08               // pslld    xmm3, 8
	LONG $0xeb0f4166; BYTE $0xd8               // por    xmm3, xmm8
	LONG $0x7e0f44f3; BYTE $0xde               // movq    xmm11, xmm6
	LONG $0xef0f4466; BYTE $0xdb               // pxor    xmm11, xmm3
	LONG $0x6f0f4466; BYTE $0xc3               // movdqa    xmm8, xmm3
	LONG $0x6f0f4466; WORD $0x3075             // movdqa    xmm14, oword 48[rbp]
	LONG $0xdb0f4566; BYTE $0xc6               // pand    xmm8, xmm14
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f0             // pslld    xmm8, 8
	LONG $0xeb0f4466; BYTE $0xc3               // por    xmm8, xmm3
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0x6f0f4466; WORD $0x407d             // movdqa    xmm15, oword 64[rbp]
	LONG $0xdb0f4166; BYTE $0xf7               // pand    xmm6, xmm15
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0xf6720f66; BYTE $0x08               // pslld    xmm6, 8
	LONG $0xf3eb0f66                           // por    xmm6, xmm3
	LONG $0xfe7e0ff3                           // movq    xmm7, xmm6
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xfbeb0f66                           // por    xmm7, xmm3
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdf100ff3                           // movss    xmm3, xmm7
	LONG $0xcb280f44                           // movaps    xmm9, xmm3
	LONG $0x720f4166; WORD $0x18d1             // psrld    xmm9, 24
	LONG $0xf3720f66; BYTE $0x08               // pslld    xmm3, 8
	LONG $0xeb0f4166; BYTE $0xd9               // por    xmm3, xmm9
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0x730f4166; WORD $0x08f9             // pslldq    xmm9, 8
	LONG $0xcbc60f45; BYTE $0x62               // shufps    xmm9, xmm11, 98
	LONG $0x6f0f4466; WORD $0x245c; BYTE $0x40 // movdqa    xmm11, oword [rsp + 64]
	LONG $0x7066100f                           // movups    xmm4, oword [rsi + 112]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd2700f66; BYTE $0xd2               // pshufd    xmm2, xmm2, 210
	LONG $0xc9700f66; BYTE $0xd2               // pshufd    xmm1, xmm1, 210
	LONG $0x700f4566; WORD $0x6cc0             // pshufd    xmm8, xmm8, 108
	LONG $0xdb0f4166; BYTE $0xc6               // pand    xmm0, xmm14
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0x100f41f2; BYTE $0xc4               // movsd    xmm0, xmm12
	LONG $0xc7570f66                           // xorpd    xmm0, xmm7
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0x30f0c60f                           // shufps    xmm6, xmm0, 48
	LONG $0x68f0c60f                           // shufps    xmm6, xmm0, 104
	WORD $0x570f; BYTE $0xf3                   // xorps    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xc5               // movdqa    xmm0, xmm13
	LONG $0xef0f4166; BYTE $0xcd               // pxor    xmm1, xmm13
	LONG $0xef0f4166; BYTE $0xd3               // pxor    xmm2, xmm11
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0x2434570f                           // xorps    xmm6, oword [rsp]
	LONG $0x2464290f; BYTE $0x10               // movaps    oword [rsp + 16], xmm4
	LONG $0xcc570f44                           // xorps    xmm9, xmm4
	LONG $0xc8570f45                           // xorps    xmm9, xmm8
	LONG $0xfe0f4166; BYTE $0xf1               // paddd    xmm6, xmm9
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xd0720f66; BYTE $0x1b               // psrld    xmm0, 27
	LONG $0xf1720f66; BYTE $0x05               // pslld    xmm1, 5
	LONG $0xc8eb0f66                           // por    xmm1, xmm0
	LONG $0x4def0f66; BYTE $0x50               // pxor    xmm1, oword 80[rbp]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x1b               // psrld    xmm0, 27
	LONG $0xf6720f66; BYTE $0x05               // pslld    xmm6, 5
	LONG $0xf0eb0f66                           // por    xmm6, xmm0
	LONG $0x75ef0f66; BYTE $0x60               // pxor    xmm6, oword 96[rbp]
	LONG $0xd1fe0f66                           // paddd    xmm2, xmm1
	LONG $0xfe0f4466; BYTE $0xce               // paddd    xmm9, xmm6
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x0f               // psrld    xmm0, 15
	LONG $0xf2720f66; BYTE $0x11               // pslld    xmm2, 17
	LONG $0xd0eb0f66                           // por    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xd0720f66; BYTE $0x0f               // psrld    xmm0, 15
	LONG $0x720f4166; WORD $0x11f1             // pslld    xmm9, 17
	LONG $0xeb0f4466; BYTE $0xc8               // por    xmm9, xmm0
	LONG $0xe2fe0f66                           // paddd    xmm4, xmm2
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc2100ff3                           // movss    xmm0, xmm2
	LONG $0x55db0f66; BYTE $0x20               // pand    xmm2, oword 32[rbp]
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0xf2720f66; BYTE $0x08               // pslld    xmm2, 8
	LONG $0xd1eb0f66                           // por    xmm2, xmm1
	WORD $0x570f; BYTE $0xc2                   // xorps    xmm0, xmm2
	LONG $0x100f41f2; BYTE $0xd4               // movsd    xmm2, xmm12
	LONG $0xca280f66                           // movapd    xmm1, xmm2
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0xf2720f66; BYTE $0x08               // pslld    xmm2, 8
	LONG $0xd1eb0f66                           // por    xmm2, xmm1
	LONG $0xc07e0ff3                           // movq    xmm0, xmm0
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xdb0f4166; BYTE $0xd6               // pand    xmm2, xmm14
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0xf2720f66; BYTE $0x08               // pslld    xmm2, 8
	LONG $0xd1eb0f66                           // por    xmm2, xmm1
	LONG $0x6f0f4166; BYTE $0xc9               // movdqa    xmm1, xmm9
	LONG $0xdb0f4166; BYTE $0xcf               // pand    xmm1, xmm15
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0xf1720f66; BYTE $0x08               // pslld    xmm1, 8
	LONG $0xcbeb0f66                           // por    xmm1, xmm3
	LONG $0xd97e0ff3                           // movq    xmm3, xmm1
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xd7720f66; BYTE $0x18               // psrld    xmm7, 24
	LONG $0xf3720f66; BYTE $0x08               // pslld    xmm3, 8
	LONG $0xdfeb0f66                           // por    xmm3, xmm7
	LONG $0xffef0f66                           // pxor    xmm7, xmm7
	LONG $0xfb100ff3                           // movss    xmm7, xmm3
	LONG $0xc7280f44                           // movaps    xmm8, xmm7
	LONG $0x720f4166; WORD $0x18d0             // psrld    xmm8, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xeb0f4166; BYTE $0xf8               // por    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0x730f4166; WORD $0x08f8             // pslldq    xmm8, 8
	LONG $0xc0c60f44; BYTE $0x62               // shufps    xmm8, xmm0, 98
	LONG $0xc2700f66; BYTE $0x6c               // pshufd    xmm0, xmm2, 108
	LONG $0xef0f4166; BYTE $0xc0               // pxor    xmm0, xmm8
	LONG $0xfe0f4166; BYTE $0xf1               // paddd    xmm6, xmm9
	LONG $0xdb0f4566; BYTE $0xce               // pand    xmm9, xmm14
	LONG $0xef0f4466; BYTE $0xc9               // pxor    xmm9, xmm1
	LONG $0xef0f4566; BYTE $0xf6               // pxor    xmm14, xmm14
	LONG $0x100f45f2; BYTE $0xcc               // movsd    xmm9, xmm12
	LONG $0x570f4466; BYTE $0xcb               // xorpd    xmm9, xmm3
	LONG $0xc9ef0f66                           // pxor    xmm1, xmm1
	LONG $0xc9c60f41; BYTE $0x30               // shufps    xmm1, xmm9, 48
	LONG $0xc9c60f41; BYTE $0x68               // shufps    xmm1, xmm9, 104
	WORD $0x570f; BYTE $0xcf                   // xorps    xmm1, xmm7
	LONG $0xdc700f66; BYTE $0xd2               // pshufd    xmm3, xmm4, 210
	LONG $0xd6700f66; BYTE $0xd2               // pshufd    xmm2, xmm6, 210
	LONG $0x000070b9; BYTE $0x00               // mov    ecx, 112

LBB1_47:
	LONG $0x646f0f66; WORD $0x2024             // movdqa    xmm4, oword [rsp + 32]
	LONG $0xe4700f66; BYTE $0x4b               // pshufd    xmm4, xmm4, 75
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x40 // movdqa    oword [rsp + 64], xmm13
	LONG $0xfe0f4166; BYTE $0xe5               // paddd    xmm4, xmm13
	LONG $0x700f4566; WORD $0x93d2             // pshufd    xmm10, xmm10, 147
	LONG $0xfe0f4466; WORD $0x2414             // paddd    xmm10, oword [rsp]
	LONG $0xed700f66; BYTE $0x4b               // pshufd    xmm5, xmm5, 75
	LONG $0xfe0f4166; BYTE $0xeb               // paddd    xmm5, xmm11
	LONG $0x6f0f4466; WORD $0x246c; BYTE $0x30 // movdqa    xmm13, oword [rsp + 48]
	LONG $0x700f4566; WORD $0x93ed             // pshufd    xmm13, xmm13, 147
	LONG $0xfe0f4466; WORD $0x246c; BYTE $0x10 // paddd    xmm13, oword [rsp + 16]
	LONG $0xd4ef0f66                           // pxor    xmm2, xmm4
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xca570f41                           // xorps    xmm1, xmm10
	LONG $0xef0f4166; BYTE $0xc5               // pxor    xmm0, xmm13
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xf26f0f66                           // movdqa    xmm6, xmm2
	LONG $0xd6720f66; BYTE $0x03               // psrld    xmm6, 3
	LONG $0xf2720f66; BYTE $0x1d               // pslld    xmm2, 29
	LONG $0xd6eb0f66                           // por    xmm2, xmm6
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xd6720f66; BYTE $0x03               // psrld    xmm6, 3
	LONG $0xf1720f66; BYTE $0x1d               // pslld    xmm1, 29
	LONG $0xceeb0f66                           // por    xmm1, xmm6
	LONG $0x54ef0f66; WORD $0xd001             // pxor    xmm2, oword [rcx + rax - 48]
	LONG $0x4cef0f66; WORD $0xe001             // pxor    xmm1, oword [rcx + rax - 32]
	LONG $0xdafe0f66                           // paddd    xmm3, xmm2
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xd6720f66; BYTE $0x1f               // psrld    xmm6, 31
	LONG $0xdbfe0f66                           // paddd    xmm3, xmm3
	LONG $0xf86f0f66                           // movdqa    xmm7, xmm0
	LONG $0xd7720f66; BYTE $0x1f               // psrld    xmm7, 31
	LONG $0xdeeb0f66                           // por    xmm3, xmm6
	LONG $0xc0fe0f66                           // paddd    xmm0, xmm0
	LONG $0xc7eb0f66                           // por    xmm0, xmm7
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xf3100ff3                           // movss    xmm6, xmm3
	LONG $0x6f0f4466; BYTE $0xc3               // movdqa    xmm8, xmm3
	LONG $0x5d6f0f66; BYTE $0x20               // movdqa    xmm3, oword 32[rbp]
	LONG $0xdb0f4466; BYTE $0xc3               // pand    xmm8, xmm3
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f0             // pslld    xmm8, 8
	LONG $0xeb0f4466; BYTE $0xc3               // por    xmm8, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0x6f0f4466; WORD $0x407d             // movdqa    xmm15, oword 64[rbp]
	LONG $0xdb0f4166; BYTE $0xdf               // pand    xmm3, xmm15
	LONG $0xf0570f41                           // xorps    xmm6, xmm8
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xd7720f66; BYTE $0x18               // psrld    xmm7, 24
	LONG $0xf3720f66; BYTE $0x08               // pslld    xmm3, 8
	LONG $0x100f45f2; BYTE $0xc6               // movsd    xmm8, xmm14
	LONG $0xdfeb0f66                           // por    xmm3, xmm7
	LONG $0xfb7e0ff3                           // movq    xmm7, xmm3
	LONG $0x6f0f4466; WORD $0x3075             // movdqa    xmm14, oword 48[rbp]
	LONG $0xdb0f4166; BYTE $0xc6               // pand    xmm0, xmm14
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xfbeb0f66                           // por    xmm7, xmm3
	LONG $0x280f4166; BYTE $0xd8               // movapd    xmm3, xmm8
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0x720f4166; WORD $0x08f0             // pslld    xmm8, 8
	LONG $0xeb0f4466; BYTE $0xc3               // por    xmm8, xmm3
	LONG $0xe4570f45                           // xorps    xmm12, xmm12
	LONG $0x100f44f3; BYTE $0xe7               // movss    xmm12, xmm7
	LONG $0x7045120f                           // movlps    xmm0, qword 112[rbp]
	WORD $0x570f; BYTE $0xc7                   // xorps    xmm0, xmm7
	LONG $0xdc280f41                           // movaps    xmm3, xmm12
	LONG $0x720f4166; WORD $0x08f4             // pslld    xmm12, 8
	LONG $0x700f4466; WORD $0xd2ca             // pshufd    xmm9, xmm2, 210
	LONG $0xd3720f66; BYTE $0x18               // psrld    xmm3, 24
	LONG $0xd1700f66; BYTE $0xd2               // pshufd    xmm2, xmm1, 210
	LONG $0xce7e0ff3                           // movq    xmm1, xmm6
	LONG $0xef0f4166; BYTE $0xc8               // pxor    xmm1, xmm8
	LONG $0xeb0f4466; BYTE $0xe3               // por    xmm12, xmm3
	WORD $0x570f; BYTE $0xf6                   // xorps    xmm6, xmm6
	LONG $0x30f0c60f                           // shufps    xmm6, xmm0, 48
	LONG $0x68f0c60f                           // shufps    xmm6, xmm0, 104
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x08               // pslldq    xmm3, 8
	LONG $0x730f4166; WORD $0x0cd8             // psrldq    xmm8, 12
	LONG $0x45c60f44; WORD $0xe270             // shufps    xmm8, oword 112[rbp], 226
	LONG $0x62d9c60f                           // shufps    xmm3, xmm1, 98
	LONG $0xc0280f41                           // movaps    xmm0, xmm8
	LONG $0x720f4166; WORD $0x08f0             // pslld    xmm8, 8
	LONG $0x4c6f0f66; WORD $0x4024             // movdqa    xmm1, oword [rsp + 64]
	LONG $0xc9700f66; BYTE $0x4b               // pshufd    xmm1, xmm1, 75
	LONG $0xd0720f66; BYTE $0x18               // psrld    xmm0, 24
	LONG $0x647f0f66; WORD $0x2024             // movdqa    oword [rsp + 32], xmm4
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0x246f0f66; BYTE $0x24               // movdqa    xmm4, oword [rsp]
	LONG $0xe4700f66; BYTE $0x93               // pshufd    xmm4, xmm4, 147
	LONG $0xfe0f4166; BYTE $0xe2               // paddd    xmm4, xmm10
	LONG $0xf4570f41                           // xorps    xmm6, xmm12
	LONG $0xe4570f45                           // xorps    xmm12, xmm12
	LONG $0x700f4566; WORD $0x4bdb             // pshufd    xmm11, xmm11, 75
	LONG $0xfe0f4466; BYTE $0xdd               // paddd    xmm11, xmm5
	LONG $0x7c6f0f66; WORD $0x1024             // movdqa    xmm7, oword [rsp + 16]
	LONG $0xff700f66; BYTE $0x93               // pshufd    xmm7, xmm7, 147
	LONG $0xeb0f4466; BYTE $0xc0               // por    xmm8, xmm0
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x30 // movdqa    oword [rsp + 48], xmm13
	LONG $0xfe0f4166; BYTE $0xfd               // paddd    xmm7, xmm13
	LONG $0x6f0f4466; BYTE $0xe9               // movdqa    xmm13, xmm1
	LONG $0xd1ef0f66                           // pxor    xmm2, xmm1
	LONG $0xef0f4566; BYTE $0xcb               // pxor    xmm9, xmm11
	LONG $0x247f0f66; BYTE $0x24               // movdqa    oword [rsp], xmm4
	WORD $0x570f; BYTE $0xf4                   // xorps    xmm6, xmm4
	LONG $0x7c7f0f66; WORD $0x1024             // movdqa    oword [rsp + 16], xmm7
	WORD $0x570f; BYTE $0xdf                   // xorps    xmm3, xmm7
	LONG $0xd8570f41                           // xorps    xmm3, xmm8
	LONG $0xfe0f4166; BYTE $0xd1               // paddd    xmm2, xmm9
	LONG $0xf3fe0f66                           // paddd    xmm6, xmm3
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x1b               // psrld    xmm0, 27
	LONG $0xf2720f66; BYTE $0x05               // pslld    xmm2, 5
	LONG $0xd0eb0f66                           // por    xmm2, xmm0
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x1b               // psrld    xmm0, 27
	LONG $0xf6720f66; BYTE $0x05               // pslld    xmm6, 5
	LONG $0xf0eb0f66                           // por    xmm6, xmm0
	LONG $0x54ef0f66; WORD $0xf001             // pxor    xmm2, oword [rcx + rax - 16]
	LONG $0x34ef0f66; BYTE $0x01               // pxor    xmm6, oword [rcx + rax]
	LONG $0xfe0f4466; BYTE $0xca               // paddd    xmm9, xmm2
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xd0720f66; BYTE $0x0f               // psrld    xmm0, 15
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0x720f4166; WORD $0x11f1             // pslld    xmm9, 17
	LONG $0xeb0f4466; BYTE $0xc8               // por    xmm9, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xd0720f66; BYTE $0x0f               // psrld    xmm0, 15
	LONG $0xf3720f66; BYTE $0x11               // pslld    xmm3, 17
	LONG $0xfe0f4166; BYTE $0xd1               // paddd    xmm2, xmm9
	LONG $0xc9ef0f66                           // pxor    xmm1, xmm1
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0x100f41f3; BYTE $0xc9               // movss    xmm1, xmm9
	LONG $0xdb0f4466; WORD $0x204d             // pand    xmm9, oword 32[rbp]
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xd0720f66; BYTE $0x18               // psrld    xmm0, 24
	LONG $0x720f4166; WORD $0x08f1             // pslld    xmm9, 8
	LONG $0xeb0f4466; BYTE $0xc8               // por    xmm9, xmm0
	LONG $0xc9570f41                           // xorps    xmm1, xmm9
	LONG $0xc1280f41                           // movaps    xmm0, xmm9
	LONG $0x100f41f2; BYTE $0xc4               // movsd    xmm0, xmm12
	LONG $0xf8280f66                           // movapd    xmm7, xmm0
	LONG $0xd7720f66; BYTE $0x18               // psrld    xmm7, 24
	LONG $0xf0720f66; BYTE $0x08               // pslld    xmm0, 8
	LONG $0x6f0f4466; BYTE $0xc3               // movdqa    xmm8, xmm3
	LONG $0xdb0f4566; BYTE $0xc7               // pand    xmm8, xmm15
	LONG $0xc7eb0f66                           // por    xmm0, xmm7
	LONG $0x6f0f4166; BYTE $0xf8               // movdqa    xmm7, xmm8
	LONG $0xd7720f66; BYTE $0x18               // psrld    xmm7, 24
	LONG $0x720f4166; WORD $0x08f0             // pslld    xmm8, 8
	LONG $0xeb0f4466; BYTE $0xc7               // por    xmm8, xmm7
	LONG $0xc97e0ff3                           // movq    xmm1, xmm1
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xff730f66; BYTE $0x08               // pslldq    xmm7, 8
	LONG $0x62f9c60f                           // shufps    xmm7, xmm1, 98
	LONG $0xd8730f66; BYTE $0x0c               // psrldq    xmm0, 12
	LONG $0xc4c60f41; BYTE $0xe2               // shufps    xmm0, xmm12, 226
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0xf0720f66; BYTE $0x08               // pslld    xmm0, 8
	LONG $0xc1eb0f66                           // por    xmm0, xmm1
	LONG $0xf3fe0f66                           // paddd    xmm6, xmm3
	LONG $0xc7ef0f66                           // pxor    xmm0, xmm7
	LONG $0x7e0f41f3; BYTE $0xc8               // movq    xmm1, xmm8
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0xef0f4166; BYTE $0xd8               // pxor    xmm3, xmm8
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xd7720f66; BYTE $0x18               // psrld    xmm7, 24
	LONG $0xf1720f66; BYTE $0x08               // pslld    xmm1, 8
	LONG $0xcfeb0f66                           // por    xmm1, xmm7
	LONG $0xffef0f66                           // pxor    xmm7, xmm7
	LONG $0xf9100ff3                           // movss    xmm7, xmm1
	LONG $0xef0f4566; BYTE $0xf6               // pxor    xmm14, xmm14
	LONG $0x100f41f2; BYTE $0xdc               // movsd    xmm3, xmm12
	LONG $0xd9570f66                           // xorpd    xmm3, xmm1
	WORD $0x280f; BYTE $0xcf                   // movaps    xmm1, xmm7
	LONG $0xd1720f66; BYTE $0x18               // psrld    xmm1, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0xc9ef0f66                           // pxor    xmm1, xmm1
	LONG $0x30cbc60f                           // shufps    xmm1, xmm3, 48
	LONG $0x68cbc60f                           // shufps    xmm1, xmm3, 104
	WORD $0x570f; BYTE $0xcf                   // xorps    xmm1, xmm7
	LONG $0xda700f66; BYTE $0xd2               // pshufd    xmm3, xmm2, 210
	LONG $0xd6700f66; BYTE $0xd2               // pshufd    xmm2, xmm6, 210
	LONG $0x40c18348                           // add    rcx, 64
	LONG $0x70f98148; WORD $0x0003; BYTE $0x00 // cmp    rcx, 880
	JNE  LBB1_47
	QUAD $0x4b202444700f4466                   // pshufd    xmm8, oword [rsp + 32], 75
	LONG $0xfe0f4566; BYTE $0xc5               // paddd    xmm8, xmm13
	LONG $0x700f4166; WORD $0x93f2             // pshufd    xmm6, xmm10, 147
	LONG $0x34fe0f66; BYTE $0x24               // paddd    xmm6, oword [rsp]
	LONG $0xed700f66; BYTE $0x4b               // pshufd    xmm5, xmm5, 75
	LONG $0xfe0f4166; BYTE $0xeb               // paddd    xmm5, xmm11
	LONG $0x7c700f66; WORD $0x3024; BYTE $0x93 // pshufd    xmm7, oword [rsp + 48], 147
	LONG $0x7cfe0f66; WORD $0x1024             // paddd    xmm7, oword [rsp + 16]
	LONG $0xef0f4166; BYTE $0xd0               // pxor    xmm2, xmm8
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	WORD $0x570f; BYTE $0xce                   // xorps    xmm1, xmm6
	LONG $0xc7ef0f66                           // pxor    xmm0, xmm7
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x80c28348                           // add    rdx, -128
	LONG $0x7ffa8348                           // cmp    rdx, 127
	JA   LBB1_46

LBB1_49:
	LONG $0x577f0ff3; BYTE $0x20 // movdqu    oword [rdi + 32], xmm2
	LONG $0x304f110f             // movups    oword [rdi + 48], xmm1
	LONG $0x5f7f0ff3; BYTE $0x40 // movdqu    oword [rdi + 64], xmm3
	LONG $0x477f0ff3; BYTE $0x50 // movdqu    oword [rdi + 80], xmm0
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB1_69
	LONG $0x08fa8348             // cmp    rdx, 8
	JB   LBB1_51
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	WORD $0x2948; BYTE $0xf0     // sub    rax, rsi
	LONG $0x60c08348             // add    rax, 96
	LONG $0x20f88348             // cmp    rax, 32
	JAE  LBB1_54

LBB1_51:
	WORD $0xc031 // xor    eax, eax

LBB1_63:
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xd1 // add    rcx, rdx
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x03e08349         // and    r8, 3
	JE   LBB1_65

LBB1_64:
	LONG $0x0cb60f44; BYTE $0x06 // movzx    r9d, byte [rsi + rax]
	LONG $0x074c8844; BYTE $0x60 // mov    byte [rdi + rax + 96], r9b
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0xff49; BYTE $0xc8     // dec    r8
	JNE  LBB1_64

LBB1_65:
	LONG $0x03f98348 // cmp    rcx, 3
	JB   LBB1_67

LBB1_66:
	LONG $0x060cb60f             // movzx    ecx, byte [rsi + rax]
	LONG $0x60074c88             // mov    byte [rdi + rax + 96], cl
	LONG $0x064cb60f; BYTE $0x01 // movzx    ecx, byte [rsi + rax + 1]
	LONG $0x61074c88             // mov    byte [rdi + rax + 97], cl
	LONG $0x064cb60f; BYTE $0x02 // movzx    ecx, byte [rsi + rax + 2]
	LONG $0x62074c88             // mov    byte [rdi + rax + 98], cl
	LONG $0x064cb60f; BYTE $0x03 // movzx    ecx, byte [rsi + rax + 3]
	LONG $0x63074c88             // mov    byte [rdi + rax + 99], cl
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JNE  LBB1_66

LBB1_67:
	WORD $0xd189 // mov    ecx, edx

LBB1_68:
	WORD $0x4f89; BYTE $0x10 // mov    dword [rdi + 16], ecx

LBB1_69:
	MOVQ 96(SP), SP
	RET

LBB1_12:
	WORD $0xf883; BYTE $0x20 // cmp    eax, 32
	JAE  LBB1_16
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB1_20

LBB1_54:
	LONG $0x20fa8348 // cmp    rdx, 32
	JAE  LBB1_56
	WORD $0xc031     // xor    eax, eax
	JMP  LBB1_60

LBB1_14:
	LONG $0x20f88341         // cmp    r8d, 32
	JAE  LBB1_29
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB1_33

LBB1_16:
	WORD $0x8941; BYTE $0xd2 // mov    r10d, edx
	LONG $0x1fe28341         // and    r10d, 31
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0x294d; BYTE $0xd1 // sub    r9, r10
	LONG $0x391c8d4c         // lea    r11, [rcx + rdi]
	LONG $0x70c38349         // add    r11, 112
	WORD $0xdb31             // xor    ebx, ebx

LBB1_17:
	LONG $0x046f0ff3; BYTE $0x1e               // movdqu    xmm0, oword [rsi + rbx]
	LONG $0x1e4c100f; BYTE $0x10               // movups    xmm1, oword [rsi + rbx + 16]
	LONG $0x7f0f41f3; WORD $0x1b44; BYTE $0xf0 // movdqu    oword [r11 + rbx - 16], xmm0
	LONG $0x0c110f41; BYTE $0x1b               // movups    oword [r11 + rbx], xmm1
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xd9                   // cmp    r9, rbx
	JNE  LBB1_17
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB1_28
	LONG $0x08fa8341                           // cmp    r10d, 8
	JB   LBB1_23

LBB1_20:
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	LONG $0x07e38341         // and    r11d, 7
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0x294d; BYTE $0xd9 // sub    r9, r11

LBB1_21:
	LONG $0x161c8b4a         // mov    rbx, qword [rsi + r10]
	LONG $0x101c894b         // mov    qword [r8 + r10], rbx
	LONG $0x08c28349         // add    r10, 8
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JNE  LBB1_21
	WORD $0x854d; BYTE $0xdb // test    r11, r11
	JNE  LBB1_23
	JMP  LBB1_28

LBB1_56:
	WORD $0xd089             // mov    eax, edx
	WORD $0xe083; BYTE $0x60 // and    eax, 96
	WORD $0xc931             // xor    ecx, ecx

LBB1_57:
	LONG $0x046f0ff3; BYTE $0x0e   // movdqu    xmm0, oword [rsi + rcx]
	LONG $0x0e4c100f; BYTE $0x10   // movups    xmm1, oword [rsi + rcx + 16]
	LONG $0x447f0ff3; WORD $0x600f // movdqu    oword [rdi + rcx + 96], xmm0
	LONG $0x0f4c110f; BYTE $0x70   // movups    oword [rdi + rcx + 112], xmm1
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_57
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JE   LBB1_67
	WORD $0xc2f6; BYTE $0x18       // test    dl, 24
	JE   LBB1_63

LBB1_60:
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe083; BYTE $0x78 // and    eax, 120

LBB1_61:
	LONG $0x0e048b4c             // mov    r8, qword [rsi + rcx]
	LONG $0x0f44894c; BYTE $0x60 // mov    qword [rdi + rcx + 96], r8
	LONG $0x08c18348             // add    rcx, 8
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_61
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JE   LBB1_67
	JMP  LBB1_63

LBB1_29:
	WORD $0x8941; BYTE $0xc0 // mov    r8d, eax
	LONG $0xe0e08341         // and    r8d, -32
	LONG $0x39148d4c         // lea    r10, [rcx + rdi]
	LONG $0x70c28349         // add    r10, 112
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d

LBB1_30:
	LONG $0x24100f42; BYTE $0x1e   // movups    xmm4, oword [rsi + r11]
	LONG $0x6c100f42; WORD $0x101e // movups    xmm5, oword [rsi + r11 + 16]
	LONG $0x64110f43; WORD $0xf01a // movups    oword [r10 + r11 - 16], xmm4
	LONG $0x2c110f43; BYTE $0x1a   // movups    oword [r10 + r11], xmm5
	LONG $0x20c38349               // add    r11, 32
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB1_30
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB1_41
	WORD $0x18a8                   // test    al, 24
	JE   LBB1_36

LBB1_33:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0x8941; BYTE $0xc0 // mov    r8d, eax
	LONG $0xf8e08341         // and    r8d, -8

LBB1_34:
	LONG $0x161c8b4e         // mov    r11, qword [rsi + r10]
	LONG $0x111c894f         // mov    qword [r9 + r10], r11
	LONG $0x08c28349         // add    r10, 8
	WORD $0x394d; BYTE $0xd0 // cmp    r8, r10
	JNE  LBB1_34
	WORD $0x3949; BYTE $0xc0 // cmp    r8, rax
	JE   LBB1_41
	JMP  LBB1_36


// stacksize 64
TEXT 路__lsh256_sse2_final(SB), NOSPLIT, $80-16
	MOVQ ctx+0(FP), DI
	MOVQ hashval+8(FP), SI

	// stack size: 64
	MOVQ SP, BP
	ADDQ $16, SP
	ANDQ $-16, SP
	MOVQ BP, 64(SP)
	LEAQ LCDATA2<>(SB), BP

	LONG $0x10478b44               // mov    r8d, dword [rdi + 16]
	LONG $0x0744c642; WORD $0x8060 // mov    byte [rdi + r8 + 96], -128
	LONG $0x00007fba; BYTE $0x00   // mov    edx, 127
	WORD $0x2944; BYTE $0xc2       // sub    edx, r8d
	WORD $0xd285                   // test    edx, edx
	JLE  LBB2_13
	LONG $0x07048d4a               // lea    rax, [rdi + r8]
	LONG $0x61c08348               // add    rax, 97
	WORD $0xd189                   // mov    ecx, edx
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JAE  LBB2_3
	WORD $0xd231                   // xor    edx, edx
	JMP  LBB2_12

LBB2_3:
	WORD $0xfa83; BYTE $0x20 // cmp    edx, 32
	JAE  LBB2_5
	WORD $0xd231             // xor    edx, edx
	JMP  LBB2_9

LBB2_5:
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe283; BYTE $0xe0 // and    edx, -32
	WORD $0x0149; BYTE $0xf8 // add    r8, rdi
	LONG $0x71c08349         // add    r8, 113
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x570f; BYTE $0xc0 // xorps    xmm0, xmm0

LBB2_6:
	LONG $0x44110f43; WORD $0xf008 // movups    oword [r8 + r9 - 16], xmm0
	LONG $0x04110f43; BYTE $0x08   // movups    oword [r8 + r9], xmm0
	LONG $0x20c18349               // add    r9, 32
	WORD $0x394c; BYTE $0xca       // cmp    rdx, r9
	JNE  LBB2_6
	WORD $0x3948; BYTE $0xca       // cmp    rdx, rcx
	JE   LBB2_13
	WORD $0xc1f6; BYTE $0x18       // test    cl, 24
	JE   LBB2_12

LBB2_9:
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe283; BYTE $0xf8 // and    edx, -8

LBB2_10:
	QUAD $0x000000000004c74a // mov    qword [rax + r8], 0
	LONG $0x08c08349         // add    r8, 8
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JNE  LBB2_10
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JE   LBB2_13

LBB2_12:
	LONG $0x001004c6         // mov    byte [rax + rdx], 0
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JNE  LBB2_12

LBB2_13:
	LONG $0x6f0f44f3; WORD $0x205f       // movdqu    xmm11, oword [rdi + 32]
	LONG $0x6f0f44f3; WORD $0x3067       // movdqu    xmm12, oword [rdi + 48]
	LONG $0x676f0ff3; BYTE $0x40         // movdqu    xmm4, oword [rdi + 64]
	LONG $0x6f0f44f3; WORD $0x5047       // movdqu    xmm8, oword [rdi + 80]
	LONG $0x5f6f0ff3; BYTE $0x60         // movdqu    xmm3, oword [rdi + 96]
	LONG $0x576f0ff3; BYTE $0x70         // movdqu    xmm2, oword [rdi + 112]
	QUAD $0x000000808f6f0ff3             // movdqu    xmm1, oword [rdi + 128]
	QUAD $0x00000090876f0ff3             // movdqu    xmm0, oword [rdi + 144]
	LONG $0x1c7f0f66; BYTE $0x24         // movdqa    oword [rsp], xmm3
	LONG $0xef0f4466; BYTE $0xdb         // pxor    xmm11, xmm3
	LONG $0x4c7f0f66; WORD $0x2024       // movdqa    oword [rsp + 32], xmm1
	LONG $0xe1ef0f66                     // pxor    xmm4, xmm1
	LONG $0x547f0f66; WORD $0x1024       // movdqa    oword [rsp + 16], xmm2
	LONG $0xef0f4466; BYTE $0xe2         // pxor    xmm12, xmm2
	LONG $0x447f0f66; WORD $0x3024       // movdqa    oword [rsp + 48], xmm0
	LONG $0xef0f4466; BYTE $0xc0         // pxor    xmm8, xmm0
	LONG $0xfe0f4466; BYTE $0xdc         // paddd    xmm11, xmm4
	LONG $0xfe0f4566; BYTE $0xe0         // paddd    xmm12, xmm8
	LONG $0x6f0f4166; BYTE $0xeb         // movdqa    xmm5, xmm11
	LONG $0xd5720f66; BYTE $0x03         // psrld    xmm5, 3
	LONG $0x720f4166; WORD $0x1df3       // pslld    xmm11, 29
	LONG $0xeb0f4466; BYTE $0xdd         // por    xmm11, xmm5
	LONG $0x6f0f4166; BYTE $0xec         // movdqa    xmm5, xmm12
	LONG $0xd5720f66; BYTE $0x03         // psrld    xmm5, 3
	LONG $0x720f4166; WORD $0x1df4       // pslld    xmm12, 29
	LONG $0xeb0f4466; BYTE $0xe5         // por    xmm12, xmm5
	LONG $0xef0f4466; WORD $0x005d       // pxor    xmm11, oword 0[rbp]
	LONG $0xfe0f4166; BYTE $0xe3         // paddd    xmm4, xmm11
	LONG $0xef0f4466; WORD $0x1065       // pxor    xmm12, oword 16[rbp]
	LONG $0xfe0f4566; BYTE $0xc4         // paddd    xmm8, xmm12
	LONG $0xec6f0f66                     // movdqa    xmm5, xmm4
	LONG $0xd5720f66; BYTE $0x1f         // psrld    xmm5, 31
	LONG $0xe4fe0f66                     // paddd    xmm4, xmm4
	LONG $0xe5eb0f66                     // por    xmm4, xmm5
	LONG $0x6f0f4166; BYTE $0xe8         // movdqa    xmm5, xmm8
	LONG $0xd5720f66; BYTE $0x1f         // psrld    xmm5, 31
	LONG $0xfe0f4566; BYTE $0xc0         // paddd    xmm8, xmm8
	LONG $0xeb0f4466; BYTE $0xc5         // por    xmm8, xmm5
	LONG $0xfe0f4466; BYTE $0xdc         // paddd    xmm11, xmm4
	LONG $0x6d6f0f66; BYTE $0x20         // movdqa    xmm5, oword 32[rbp]
	WORD $0x570f; BYTE $0xf6             // xorps    xmm6, xmm6
	LONG $0xf4100ff3                     // movss    xmm6, xmm4
	LONG $0xe5db0f66                     // pand    xmm4, xmm5
	LONG $0xd56f0f66                     // movdqa    xmm2, xmm5
	LONG $0xec6f0f66                     // movdqa    xmm5, xmm4
	LONG $0xd5720f66; BYTE $0x18         // psrld    xmm5, 24
	LONG $0xf4720f66; BYTE $0x08         // pslld    xmm4, 8
	LONG $0xe5eb0f66                     // por    xmm4, xmm5
	LONG $0xc0ef0f66                     // pxor    xmm0, xmm0
	WORD $0x570f; BYTE $0xf4             // xorps    xmm6, xmm4
	LONG $0xe0100ff2                     // movsd    xmm4, xmm0
	LONG $0xfc280f66                     // movapd    xmm7, xmm4
	LONG $0xd7720f66; BYTE $0x18         // psrld    xmm7, 24
	LONG $0xf4720f66; BYTE $0x08         // pslld    xmm4, 8
	LONG $0xe7eb0f66                     // por    xmm4, xmm7
	LONG $0x4d6f0f66; BYTE $0x30         // movdqa    xmm1, oword 48[rbp]
	LONG $0x7e0f44f3; BYTE $0xd6         // movq    xmm10, xmm6
	LONG $0xef0f4466; BYTE $0xd4         // pxor    xmm10, xmm4
	LONG $0x6f0f4466; BYTE $0xec         // movdqa    xmm13, xmm4
	LONG $0xdb0f4466; BYTE $0xe9         // pand    xmm13, xmm1
	LONG $0x6f0f4166; BYTE $0xe5         // movdqa    xmm4, xmm13
	LONG $0xd4720f66; BYTE $0x18         // psrld    xmm4, 24
	LONG $0x720f4166; WORD $0x08f5       // pslld    xmm13, 8
	LONG $0xeb0f4466; BYTE $0xec         // por    xmm13, xmm4
	LONG $0x6d6f0f66; BYTE $0x40         // movdqa    xmm5, oword 64[rbp]
	LONG $0x6f0f4166; BYTE $0xf8         // movdqa    xmm7, xmm8
	LONG $0xfddb0f66                     // pand    xmm7, xmm5
	LONG $0xe76f0f66                     // movdqa    xmm4, xmm7
	LONG $0xd4720f66; BYTE $0x18         // psrld    xmm4, 24
	LONG $0xf7720f66; BYTE $0x08         // pslld    xmm7, 8
	LONG $0xfceb0f66                     // por    xmm7, xmm4
	LONG $0x7e0f44f3; BYTE $0xcf         // movq    xmm9, xmm7
	LONG $0x6f0f4166; BYTE $0xe1         // movdqa    xmm4, xmm9
	LONG $0xd4720f66; BYTE $0x18         // psrld    xmm4, 24
	LONG $0x720f4166; WORD $0x08f1       // pslld    xmm9, 8
	LONG $0xeb0f4466; BYTE $0xcc         // por    xmm9, xmm4
	LONG $0xff570f45                     // xorps    xmm15, xmm15
	LONG $0x100f45f3; BYTE $0xf9         // movss    xmm15, xmm9
	LONG $0xe7280f41                     // movaps    xmm4, xmm15
	LONG $0xd4720f66; BYTE $0x18         // psrld    xmm4, 24
	LONG $0x720f4166; WORD $0x08f7       // pslld    xmm15, 8
	LONG $0xeb0f4466; BYTE $0xfc         // por    xmm15, xmm4
	LONG $0x6f0f4166; BYTE $0xf2         // movdqa    xmm6, xmm10
	LONG $0xfe730f66; BYTE $0x08         // pslldq    xmm6, 8
	LONG $0xf2c60f41; BYTE $0x62         // shufps    xmm6, xmm10, 98
	LONG $0xfe0f4566; BYTE $0xe0         // paddd    xmm12, xmm8
	LONG $0xdb0f4466; BYTE $0xc1         // pand    xmm8, xmm1
	LONG $0xef0f4466; BYTE $0xc7         // pxor    xmm8, xmm7
	QUAD $0x0000a0976f0f44f3; BYTE $0x00 // movdqu    xmm10, oword [rdi + 160]
	LONG $0x100f44f2; BYTE $0xc0         // movsd    xmm8, xmm0
	LONG $0x570f4566; BYTE $0xc1         // xorpd    xmm8, xmm9
	LONG $0xf6570f45                     // xorps    xmm14, xmm14
	LONG $0xf0c60f45; BYTE $0x30         // shufps    xmm14, xmm8, 48
	LONG $0xf0c60f45; BYTE $0x68         // shufps    xmm14, xmm8, 104
	QUAD $0x0000c08f6f0f44f3; BYTE $0x00 // movdqu    xmm9, oword [rdi + 192]
	LONG $0xf7570f45                     // xorps    xmm14, xmm15
	QUAD $0x000000d087100f44             // movups    xmm8, oword [rdi + 208]
	LONG $0x700f4166; WORD $0xd2fb       // pshufd    xmm7, xmm11, 210
	LONG $0x700f4166; WORD $0xd2dc       // pshufd    xmm3, xmm12, 210
	LONG $0x700f4166; WORD $0x6ce5       // pshufd    xmm4, xmm13, 108
	LONG $0xef0f4166; BYTE $0xda         // pxor    xmm3, xmm10
	LONG $0xef0f4166; BYTE $0xf9         // pxor    xmm7, xmm9
	LONG $0xdffe0f66                     // paddd    xmm3, xmm7
	LONG $0xf0570f41                     // xorps    xmm6, xmm8
	WORD $0x570f; BYTE $0xf4             // xorps    xmm6, xmm4
	LONG $0xe36f0f66                     // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1b         // psrld    xmm4, 27
	LONG $0xf3720f66; BYTE $0x05         // pslld    xmm3, 5
	LONG $0xdceb0f66                     // por    xmm3, xmm4
	QUAD $0x000000b09f100f44             // movups    xmm11, oword [rdi + 176]
	LONG $0xf3570f45                     // xorps    xmm14, xmm11
	LONG $0xfe0f4466; BYTE $0xf6         // paddd    xmm14, xmm6
	LONG $0x6f0f4166; BYTE $0xe6         // movdqa    xmm4, xmm14
	LONG $0xd4720f66; BYTE $0x1b         // psrld    xmm4, 27
	LONG $0x720f4166; WORD $0x05f6       // pslld    xmm14, 5
	LONG $0x5def0f66; BYTE $0x50         // pxor    xmm3, oword 80[rbp]
	LONG $0xeb0f4466; BYTE $0xf4         // por    xmm14, xmm4
	LONG $0xfbfe0f66                     // paddd    xmm7, xmm3
	LONG $0xe76f0f66                     // movdqa    xmm4, xmm7
	LONG $0xd4720f66; BYTE $0x0f         // psrld    xmm4, 15
	LONG $0xf7720f66; BYTE $0x11         // pslld    xmm7, 17
	LONG $0xfceb0f66                     // por    xmm7, xmm4
	LONG $0xef0f4466; WORD $0x6075       // pxor    xmm14, oword 96[rbp]
	LONG $0xfe0f4166; BYTE $0xf6         // paddd    xmm6, xmm14
	LONG $0xe66f0f66                     // movdqa    xmm4, xmm6
	LONG $0xd4720f66; BYTE $0x0f         // psrld    xmm4, 15
	LONG $0xf6720f66; BYTE $0x11         // pslld    xmm6, 17
	LONG $0xf4eb0f66                     // por    xmm6, xmm4
	LONG $0xdffe0f66                     // paddd    xmm3, xmm7
	LONG $0xe4ef0f66                     // pxor    xmm4, xmm4
	LONG $0xe7100ff3                     // movss    xmm4, xmm7
	LONG $0xfadb0f66                     // pand    xmm7, xmm2
	LONG $0x6f0f4466; BYTE $0xe7         // movdqa    xmm12, xmm7
	LONG $0x720f4166; WORD $0x18d4       // psrld    xmm12, 24
	LONG $0xf7720f66; BYTE $0x08         // pslld    xmm7, 8
	LONG $0xeb0f4166; BYTE $0xfc         // por    xmm7, xmm12
	WORD $0x570f; BYTE $0xe7             // xorps    xmm4, xmm7
	LONG $0xf8100ff2                     // movsd    xmm7, xmm0
	LONG $0x280f4466; BYTE $0xe7         // movapd    xmm12, xmm7
	LONG $0x720f4166; WORD $0x18d4       // psrld    xmm12, 24
	LONG $0xf7720f66; BYTE $0x08         // pslld    xmm7, 8
	LONG $0xeb0f4166; BYTE $0xfc         // por    xmm7, xmm12
	LONG $0xd47e0ff3                     // movq    xmm2, xmm4
	LONG $0xd7ef0f66                     // pxor    xmm2, xmm7
	LONG $0xf9db0f66                     // pand    xmm7, xmm1
	LONG $0x6f0f4466; BYTE $0xe7         // movdqa    xmm12, xmm7
	LONG $0x720f4166; WORD $0x18d4       // psrld    xmm12, 24
	LONG $0xf7720f66; BYTE $0x08         // pslld    xmm7, 8
	LONG $0xeb0f4166; BYTE $0xfc         // por    xmm7, xmm12
	LONG $0x6f0f4466; BYTE $0xee         // movdqa    xmm13, xmm6
	LONG $0xdb0f4466; BYTE $0xed         // pand    xmm13, xmm5
	LONG $0x6f0f4566; BYTE $0xe5         // movdqa    xmm12, xmm13
	LONG $0x720f4166; WORD $0x18d4       // psrld    xmm12, 24
	LONG $0x720f4166; WORD $0x08f5       // pslld    xmm13, 8
	LONG $0xeb0f4566; BYTE $0xec         // por    xmm13, xmm12
	LONG $0x7e0f41f3; BYTE $0xe5         // movq    xmm4, xmm13
	LONG $0x6f0f4466; BYTE $0xe4         // movdqa    xmm12, xmm4
	LONG $0x720f4166; WORD $0x18d4       // psrld    xmm12, 24
	LONG $0xf4720f66; BYTE $0x08         // pslld    xmm4, 8
	LONG $0xeb0f4166; BYTE $0xe4         // por    xmm4, xmm12
	LONG $0xedef0f66                     // pxor    xmm5, xmm5
	LONG $0xec100ff3                     // movss    xmm5, xmm4
	LONG $0xe5280f44                     // movaps    xmm12, xmm5
	LONG $0x720f4166; WORD $0x18d4       // psrld    xmm12, 24
	LONG $0xf5720f66; BYTE $0x08         // pslld    xmm5, 8
	LONG $0xeb0f4166; BYTE $0xec         // por    xmm5, xmm12
	LONG $0x6f0f4466; BYTE $0xfa         // movdqa    xmm15, xmm2
	LONG $0x730f4166; WORD $0x08ff       // pslldq    xmm15, 8
	LONG $0xfac60f44; BYTE $0x62         // shufps    xmm15, xmm2, 98
	LONG $0x700f4466; WORD $0x6ce7       // pshufd    xmm12, xmm7, 108
	LONG $0xef0f4566; BYTE $0xe7         // pxor    xmm12, xmm15
	LONG $0xfe0f4466; BYTE $0xf6         // paddd    xmm14, xmm6
	LONG $0xf1db0f66                     // pand    xmm6, xmm1
	LONG $0xef0f4166; BYTE $0xf5         // pxor    xmm6, xmm13
	LONG $0xf0100ff2                     // movsd    xmm6, xmm0
	LONG $0xf4570f66                     // xorpd    xmm6, xmm4
	LONG $0xef0f4566; BYTE $0xed         // pxor    xmm13, xmm13
	LONG $0xeec60f44; BYTE $0x30         // shufps    xmm13, xmm6, 48
	LONG $0xeec60f44; BYTE $0x68         // shufps    xmm13, xmm6, 104
	LONG $0xed570f44                     // xorps    xmm13, xmm5
	LONG $0xf3700f66; BYTE $0xd2         // pshufd    xmm6, xmm3, 210
	LONG $0x700f4566; WORD $0xd2f6       // pshufd    xmm14, xmm14, 210
	LONG $0x000070b8; BYTE $0x00         // mov    eax, 112
	MOVQ 路step(SB), CX                   // lea    rcx, [rip + _g_StepConstants]
LBB2_14:
	LONG $0x046f0f66; BYTE $0x24               // movdqa    xmm0, oword [rsp]
	LONG $0xc0700f66; BYTE $0x4b               // pshufd    xmm0, xmm0, 75
	LONG $0xfe0f4166; BYTE $0xc2               // paddd    xmm0, xmm10
	LONG $0x5c6f0f66; WORD $0x1024             // movdqa    xmm3, oword [rsp + 16]
	LONG $0xdb700f66; BYTE $0x93               // pshufd    xmm3, xmm3, 147
	LONG $0xfe0f4166; BYTE $0xdb               // paddd    xmm3, xmm11
	LONG $0x546f0f66; WORD $0x2024             // movdqa    xmm2, oword [rsp + 32]
	LONG $0xd2700f66; BYTE $0x4b               // pshufd    xmm2, xmm2, 75
	LONG $0xfe0f4166; BYTE $0xd1               // paddd    xmm2, xmm9
	LONG $0x4c6f0f66; WORD $0x3024             // movdqa    xmm1, oword [rsp + 48]
	LONG $0xc9700f66; BYTE $0x93               // pshufd    xmm1, xmm1, 147
	LONG $0xfe0f4166; BYTE $0xc8               // paddd    xmm1, xmm8
	LONG $0xef0f4466; BYTE $0xf0               // pxor    xmm14, xmm0
	LONG $0xf2ef0f66                           // pxor    xmm6, xmm2
	LONG $0xfe0f4466; BYTE $0xf6               // paddd    xmm14, xmm6
	LONG $0xeb570f44                           // xorps    xmm13, xmm3
	LONG $0xef0f4466; BYTE $0xe1               // pxor    xmm12, xmm1
	LONG $0xfe0f4566; BYTE $0xec               // paddd    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xd4720f66; BYTE $0x03               // psrld    xmm4, 3
	LONG $0x720f4166; WORD $0x1df6             // pslld    xmm14, 29
	LONG $0xeb0f4466; BYTE $0xf4               // por    xmm14, xmm4
	LONG $0x6f0f4166; BYTE $0xe5               // movdqa    xmm4, xmm13
	LONG $0xd4720f66; BYTE $0x03               // psrld    xmm4, 3
	LONG $0x720f4166; WORD $0x1df5             // pslld    xmm13, 29
	LONG $0xeb0f4466; BYTE $0xec               // por    xmm13, xmm4
	LONG $0xef0f4466; WORD $0x0874; BYTE $0xd0 // pxor    xmm14, oword [rax + rcx - 48]
	LONG $0xef0f4466; WORD $0x086c; BYTE $0xe0 // pxor    xmm13, oword [rax + rcx - 32]
	LONG $0xfe0f4166; BYTE $0xf6               // paddd    xmm6, xmm14
	LONG $0xfe0f4566; BYTE $0xe5               // paddd    xmm12, xmm13
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xd4720f66; BYTE $0x1f               // psrld    xmm4, 31
	LONG $0xf6fe0f66                           // paddd    xmm6, xmm6
	LONG $0x6f0f4166; BYTE $0xec               // movdqa    xmm5, xmm12
	LONG $0xd5720f66; BYTE $0x1f               // psrld    xmm5, 31
	LONG $0xf4eb0f66                           // por    xmm6, xmm4
	LONG $0xfe0f4566; BYTE $0xe4               // paddd    xmm12, xmm12
	LONG $0xeb0f4466; BYTE $0xe5               // por    xmm12, xmm5
	LONG $0xfe0f4466; BYTE $0xf6               // paddd    xmm14, xmm6
	LONG $0xfe0f4566; BYTE $0xec               // paddd    xmm13, xmm12
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe6100ff3                           // movss    xmm4, xmm6
	LONG $0x6d6f0f66; BYTE $0x20               // movdqa    xmm5, oword 32[rbp]
	LONG $0xf5db0f66                           // pand    xmm6, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xd5720f66; BYTE $0x18               // psrld    xmm5, 24
	LONG $0xf6720f66; BYTE $0x08               // pslld    xmm6, 8
	LONG $0xf5eb0f66                           // por    xmm6, xmm5
	LONG $0x6f0f4166; BYTE $0xec               // movdqa    xmm5, xmm12
	LONG $0x7d6f0f66; BYTE $0x40               // movdqa    xmm7, oword 64[rbp]
	LONG $0xefdb0f66                           // pand    xmm5, xmm7
	WORD $0x570f; BYTE $0xe6                   // xorps    xmm4, xmm6
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xd7720f66; BYTE $0x18               // psrld    xmm7, 24
	LONG $0xf5720f66; BYTE $0x08               // pslld    xmm5, 8
	LONG $0xff570f45                           // xorps    xmm15, xmm15
	LONG $0x100f41f2; BYTE $0xf7               // movsd    xmm6, xmm15
	LONG $0xefeb0f66                           // por    xmm5, xmm7
	LONG $0xfd7e0ff3                           // movq    xmm7, xmm5
	LONG $0x6f0f4466; WORD $0x307d             // movdqa    xmm15, oword 48[rbp]
	LONG $0xdb0f4566; BYTE $0xe7               // pand    xmm12, xmm15
	LONG $0xef0f4466; BYTE $0xe5               // pxor    xmm12, xmm5
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xd5720f66; BYTE $0x18               // psrld    xmm5, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xfdeb0f66                           // por    xmm7, xmm5
	LONG $0xee280f66                           // movapd    xmm5, xmm6
	LONG $0xd5720f66; BYTE $0x18               // psrld    xmm5, 24
	LONG $0xf6720f66; BYTE $0x08               // pslld    xmm6, 8
	LONG $0xf5eb0f66                           // por    xmm6, xmm5
	LONG $0xedef0f66                           // pxor    xmm5, xmm5
	LONG $0xef100ff3                           // movss    xmm5, xmm7
	LONG $0x65120f44; BYTE $0x70               // movlps    xmm12, qword 112[rbp]
	LONG $0xe7570f44                           // xorps    xmm12, xmm7
	LONG $0xfd280f44                           // movaps    xmm15, xmm5
	LONG $0xf5720f66; BYTE $0x08               // pslld    xmm5, 8
	LONG $0x700f4166; WORD $0xd2fe             // pshufd    xmm7, xmm14, 210
	LONG $0x720f4166; WORD $0x18d7             // psrld    xmm15, 24
	LONG $0x700f4566; WORD $0xd2f5             // pshufd    xmm14, xmm13, 210
	LONG $0x7e0f44f3; BYTE $0xec               // movq    xmm13, xmm4
	LONG $0xef0f4466; BYTE $0xee               // pxor    xmm13, xmm6
	LONG $0xeb0f4166; BYTE $0xef               // por    xmm5, xmm15
	WORD $0x570f; BYTE $0xe4                   // xorps    xmm4, xmm4
	LONG $0xe4c60f41; BYTE $0x30               // shufps    xmm4, xmm12, 48
	LONG $0xe4c60f41; BYTE $0x68               // shufps    xmm4, xmm12, 104
	LONG $0x6f0f4566; BYTE $0xfd               // movdqa    xmm15, xmm13
	LONG $0x730f4166; WORD $0x08ff             // pslldq    xmm15, 8
	LONG $0xde730f66; BYTE $0x0c               // psrldq    xmm6, 12
	LONG $0x7075c60f; BYTE $0xe2               // shufps    xmm6, oword 112[rbp], 226
	LONG $0xfdc60f45; BYTE $0x62               // shufps    xmm15, xmm13, 98
	LONG $0xe6280f44                           // movaps    xmm12, xmm6
	LONG $0xf6720f66; BYTE $0x08               // pslld    xmm6, 8
	LONG $0x700f4566; WORD $0x4bd2             // pshufd    xmm10, xmm10, 75
	LONG $0x720f4166; WORD $0x18d4             // psrld    xmm12, 24
	LONG $0x047f0f66; BYTE $0x24               // movdqa    oword [rsp], xmm0
	LONG $0xfe0f4466; BYTE $0xd0               // paddd    xmm10, xmm0
	LONG $0x700f4566; WORD $0x93db             // pshufd    xmm11, xmm11, 147
	LONG $0x245c290f; BYTE $0x10               // movaps    oword [rsp + 16], xmm3
	LONG $0xfe0f4466; BYTE $0xdb               // paddd    xmm11, xmm3
	WORD $0x570f; BYTE $0xe5                   // xorps    xmm4, xmm5
	LONG $0x700f4566; WORD $0x4bc9             // pshufd    xmm9, xmm9, 75
	LONG $0x547f0f66; WORD $0x2024             // movdqa    oword [rsp + 32], xmm2
	LONG $0xfe0f4466; BYTE $0xca               // paddd    xmm9, xmm2
	LONG $0x700f4566; WORD $0x93c0             // pshufd    xmm8, xmm8, 147
	LONG $0xeb0f4166; BYTE $0xf4               // por    xmm6, xmm12
	LONG $0x4c7f0f66; WORD $0x3024             // movdqa    oword [rsp + 48], xmm1
	LONG $0xfe0f4466; BYTE $0xc1               // paddd    xmm8, xmm1
	LONG $0xef0f4566; BYTE $0xf2               // pxor    xmm14, xmm10
	LONG $0xef0f4166; BYTE $0xf9               // pxor    xmm7, xmm9
	LONG $0xe3570f41                           // xorps    xmm4, xmm11
	LONG $0xf8570f45                           // xorps    xmm15, xmm8
	LONG $0xfe570f44                           // xorps    xmm15, xmm6
	LONG $0xfe0f4466; BYTE $0xf7               // paddd    xmm14, xmm7
	LONG $0xfe0f4166; BYTE $0xe7               // paddd    xmm4, xmm15
	LONG $0x6f0f4166; BYTE $0xee               // movdqa    xmm5, xmm14
	LONG $0xd5720f66; BYTE $0x1b               // psrld    xmm5, 27
	LONG $0x720f4166; WORD $0x05f6             // pslld    xmm14, 5
	LONG $0xeb0f4466; BYTE $0xf5               // por    xmm14, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xd5720f66; BYTE $0x1b               // psrld    xmm5, 27
	LONG $0xf4720f66; BYTE $0x05               // pslld    xmm4, 5
	LONG $0xe5eb0f66                           // por    xmm4, xmm5
	LONG $0xef0f4466; WORD $0x0874; BYTE $0xf0 // pxor    xmm14, oword [rax + rcx - 16]
	LONG $0x24ef0f66; BYTE $0x08               // pxor    xmm4, oword [rax + rcx]
	LONG $0xfe0f4166; BYTE $0xfe               // paddd    xmm7, xmm14
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xd5720f66; BYTE $0x0f               // psrld    xmm5, 15
	LONG $0xfe0f4466; BYTE $0xfc               // paddd    xmm15, xmm4
	LONG $0xf7720f66; BYTE $0x11               // pslld    xmm7, 17
	LONG $0xfdeb0f66                           // por    xmm7, xmm5
	LONG $0x6f0f4566; BYTE $0xe7               // movdqa    xmm12, xmm15
	LONG $0x720f4166; WORD $0x0fd4             // psrld    xmm12, 15
	LONG $0x720f4166; WORD $0x11f7             // pslld    xmm15, 17
	LONG $0xfe0f4466; BYTE $0xf7               // paddd    xmm14, xmm7
	LONG $0xedef0f66                           // pxor    xmm5, xmm5
	LONG $0xeb0f4566; BYTE $0xfc               // por    xmm15, xmm12
	LONG $0xef100ff3                           // movss    xmm5, xmm7
	LONG $0x7ddb0f66; BYTE $0x20               // pand    xmm7, oword 32[rbp]
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xd6720f66; BYTE $0x18               // psrld    xmm6, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xfeeb0f66                           // por    xmm7, xmm6
	WORD $0x570f; BYTE $0xef                   // xorps    xmm5, xmm7
	LONG $0xe7280f44                           // movaps    xmm12, xmm7
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x100f44f2; BYTE $0xe0               // movsd    xmm12, xmm0
	LONG $0x280f4166; BYTE $0xf4               // movapd    xmm6, xmm12
	LONG $0xd6720f66; BYTE $0x18               // psrld    xmm6, 24
	LONG $0x720f4166; WORD $0x08f4             // pslld    xmm12, 8
	LONG $0x6f0f4166; BYTE $0xff               // movdqa    xmm7, xmm15
	LONG $0x7ddb0f66; BYTE $0x40               // pand    xmm7, oword 64[rbp]
	LONG $0xeb0f4466; BYTE $0xe6               // por    xmm12, xmm6
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xd6720f66; BYTE $0x18               // psrld    xmm6, 24
	LONG $0xf7720f66; BYTE $0x08               // pslld    xmm7, 8
	LONG $0xfeeb0f66                           // por    xmm7, xmm6
	LONG $0xed7e0ff3                           // movq    xmm5, xmm5
	LONG $0xef0f4166; BYTE $0xec               // pxor    xmm5, xmm12
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xfe730f66; BYTE $0x08               // pslldq    xmm6, 8
	LONG $0x62f5c60f                           // shufps    xmm6, xmm5, 98
	LONG $0x730f4166; WORD $0x0cdc             // psrldq    xmm12, 12
	LONG $0xe0c60f44; BYTE $0xe2               // shufps    xmm12, xmm0, 226
	LONG $0xec280f41                           // movaps    xmm5, xmm12
	LONG $0xd5720f66; BYTE $0x18               // psrld    xmm5, 24
	LONG $0x720f4166; WORD $0x08f4             // pslld    xmm12, 8
	LONG $0xeb0f4466; BYTE $0xe5               // por    xmm12, xmm5
	LONG $0xfe0f4166; BYTE $0xe7               // paddd    xmm4, xmm15
	LONG $0xef0f4466; BYTE $0xe6               // pxor    xmm12, xmm6
	LONG $0xef7e0ff3                           // movq    xmm5, xmm7
	LONG $0xdb0f4466; WORD $0x307d             // pand    xmm15, oword 48[rbp]
	LONG $0xef0f4466; BYTE $0xff               // pxor    xmm15, xmm7
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xd6720f66; BYTE $0x18               // psrld    xmm6, 24
	LONG $0xf5720f66; BYTE $0x08               // pslld    xmm5, 8
	LONG $0xeeeb0f66                           // por    xmm5, xmm6
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xf5100ff3                           // movss    xmm6, xmm5
	LONG $0x100f44f2; BYTE $0xf8               // movsd    xmm15, xmm0
	LONG $0x570f4466; BYTE $0xfd               // xorpd    xmm15, xmm5
	WORD $0x280f; BYTE $0xee                   // movaps    xmm5, xmm6
	LONG $0xd5720f66; BYTE $0x18               // psrld    xmm5, 24
	LONG $0xf6720f66; BYTE $0x08               // pslld    xmm6, 8
	LONG $0xf5eb0f66                           // por    xmm6, xmm5
	LONG $0xed570f45                           // xorps    xmm13, xmm13
	LONG $0xefc60f45; BYTE $0x30               // shufps    xmm13, xmm15, 48
	LONG $0xefc60f45; BYTE $0x68               // shufps    xmm13, xmm15, 104
	LONG $0xee570f44                           // xorps    xmm13, xmm6
	LONG $0x700f4166; WORD $0xd2f6             // pshufd    xmm6, xmm14, 210
	LONG $0x700f4466; WORD $0xd2f4             // pshufd    xmm14, xmm4, 210
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x03703d48; WORD $0x0000             // cmp    rax, 880
	JNE  LBB2_14
	LONG $0x1c700f66; WORD $0x4b24             // pshufd    xmm3, oword [rsp], 75
	LONG $0xfe0f4166; BYTE $0xda               // paddd    xmm3, xmm10
	LONG $0x54700f66; WORD $0x1024; BYTE $0x93 // pshufd    xmm2, oword [rsp + 16], 147
	LONG $0xfe0f4166; BYTE $0xd3               // paddd    xmm2, xmm11
	LONG $0x4c700f66; WORD $0x2024; BYTE $0x4b // pshufd    xmm1, oword [rsp + 32], 75
	LONG $0xfe0f4166; BYTE $0xc9               // paddd    xmm1, xmm9
	LONG $0xcbef0f66                           // pxor    xmm1, xmm3
	LONG $0x44700f66; WORD $0x3024; BYTE $0x93 // pshufd    xmm0, oword [rsp + 48], 147
	LONG $0xfe0f4166; BYTE $0xc0               // paddd    xmm0, xmm8
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xef0f4166; BYTE $0xce               // pxor    xmm1, xmm14
	LONG $0xef0f4166; BYTE $0xc4               // pxor    xmm0, xmm12
	LONG $0xef0f4166; BYTE $0xc5               // pxor    xmm0, xmm13
	LONG $0x0e7f0ff3                           // movdqu    oword [rsi], xmm1
	LONG $0x467f0ff3; BYTE $0x10               // movdqu    oword [rsi + 16], xmm0

	MOVQ 64(SP), SP
	RET
