package internal

import (
	"math"
	"math/big"
	"testing"
)

func TestBitsToBytes(t *testing.T) {
	for bits := 0; bits < 0xFF_FFFF; bits++ {
		answer := int(math.Ceil(float64(bits) / 8))

		if BitsToBytes(bits) != answer {
			t.Fail()
			return
		}
	}
}

func TestBigLog2(t *testing.T) {
	testCases := []struct {
		x        *big.Int
		expected int
	}{
		{HI(`F`), 3}, // log2(10) =   3.3219280948873623478703194294893901758648313930245806120547563958159347766086252158501397433593701
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 191},            // log2(0xffffffffffffffffffffffff99def836146bc9b1b4d22831)            = 191.9999999999999999999999999999927355259598147153867368639753621943355137432996915346127940421656779
		{HI(`0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7`), 232}, // log2(0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7) = 232.0000000000000000000000000000000000216116853200953783196563358913593168135073887877026405481919883
	}
	for idx, tc := range testCases {
		result := BigLog2(tc.x)
		if result != tc.expected {
			t.Errorf("Test case %d: Expected: %d, Got: %d\n", idx, tc.expected, result)
			t.Fail()
			return
		}
	}
}

func TestBigLog2n(t *testing.T) {
	testCases := []struct {
		x        *big.Int
		e        int
		expected int
	}{
		{HI(`F`), 3, 1}, // log(10) / log(2**3) = 1.10730936496245411595677314316313005862161046434152687068491879860531159220287507195004658111979005
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 2, 95},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**2) = 95.99999999999999999999999999999636776297990735769336843198768109716775687164984576730639702108283895
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 3, 63},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**3) = 63.99999999999999999999999999999757850865327157179557895465845406477850458109989717820426468072189263
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 4, 47},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**4) = 47.99999999999999999999999999999818388148995367884668421599384054858387843582492288365319851054141947
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 5, 38},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**5) = 38.39999999999999999999999999999854710519196294307734737279507243886710274865993830692255880843313558
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 6, 31},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**6) = 31.99999999999999999999999999999878925432663578589778947732922703238925229054994858910213234036094632
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 7, 27},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**7) = 27.4286
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 8, 23},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**8) = 23.99999999999999999999999999999909194074497683942334210799692027429193921791246144182659925527070974
		{HI(`0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7`), 3, 77}, // log(0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7) / log(2**3) = 77.33333333333333333333333333333333334053722844003179277321877863045310560450246292923421351606399611
		{HI(`0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7`), 8, 29}, // log(0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7) / log(2**8) = 29.00000000000000000000000000000000000270146066501192228995704198641991460168842359846283006852399854
	}
	for idx, tc := range testCases {
		result := BigLog2e(tc.x, tc.e)
		if result != tc.expected {
			t.Errorf("Test case %d: Expected: %d, Got: %d\n", idx, tc.expected, result)
			t.Fail()
			return
		}
	}
}

func TestBigCeilLog2(t *testing.T) {
	testCases := []struct {
		x        *big.Int
		e        int
		expected int
	}{
		// x == 2 ** e
		{HI(`0x100000000000000000000000000000000000000`), 8, 19},                           // log(0x100000000000000000000000000000000000000) / log(2 ** 8) = 19
		{HI(`0x10000000000000000000000000000000000000000000000000000000000000000`), 8, 32}, // log(0x10000000000000000000000000000000000000000000000000000000000000000) / log(2 ** 8) = 32
		// x > (2 ** r)
		{HI(`F`), 3, 2}, // log(10) / log(2**3) = 1.10730936496245411595677314316313005862161046434152687068491879860531159220287507195004658111979005
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 2, 96},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**2) = 95.99999999999999999999999999999636776297990735769336843198768109716775687164984576730639702108283895
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 3, 64},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**3) = 63.99999999999999999999999999999757850865327157179557895465845406477850458109989717820426468072189263
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 4, 48},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**4) = 47.99999999999999999999999999999818388148995367884668421599384054858387843582492288365319851054141947
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 5, 39},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**5) = 38.39999999999999999999999999999854710519196294307734737279507243886710274865993830692255880843313558
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 6, 32},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**6) = 31.99999999999999999999999999999878925432663578589778947732922703238925229054994858910213234036094632
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 7, 28},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**7) = 27.4286
		{HI(`0xffffffffffffffffffffffff99def836146bc9b1b4d22831`), 8, 24},            // log(0xffffffffffffffffffffffff99def836146bc9b1b4d22831) / log(2**8) = 23.99999999999999999999999999999909194074497683942334210799692027429193921791246144182659925527070974
		{HI(`0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7`), 3, 78}, // log(0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7) / log(2**3) = 77.33333333333333333333333333333333334053722844003179277321877863045310560450246292923421351606399611
		{HI(`0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7`), 8, 30}, // log(0x1000000000000000000000000000013e974e72f8a6922031d2603cfe0d7) / log(2**8) = 29.00000000000000000000000000000000000270146066501192228995704198641991460168842359846283006852399854
	}
	for idx, tc := range testCases {
		result := BigCeilLog2(tc.x, tc.e)
		if result != tc.expected {
			t.Errorf("Test case %d: Expected: %d, Got: %d\n", idx, tc.expected, result)
			t.Fail()
			return
		}
	}
}
