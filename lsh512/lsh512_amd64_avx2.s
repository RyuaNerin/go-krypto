//go:build amd64 && !purego

// GENERATED BY goat
// EDITED BY RYUANERIN
// -- DO NOT EDIT

#include "textflag.h"

TEXT ·__lsh512_avx2_init(SB), NOSPLIT, $16
	MOVQ	ctx+0(FP), DI
	MOVQ	algtype+8(FP), SI

	MOVQ	SI, 0(DI)
	MOVQ	$0, 16(DI)

	CMPQ	SI, $64
	JEQ		LSH512_INIT_512
	CMPQ	SI, $48
	JEQ		LSH512_INIT_384
	CMPQ	SI, $32
	JEQ		LSH512_INIT_256

LSH512_INIT_224:
	MOVD	·iv224(SB), R8
	JMP		LSH512_INIT_RET

LSH512_INIT_256:
	MOVD	·iv256(SB), R8
	JMP		LSH512_INIT_RET
	
LSH512_INIT_384:
	MOVD	·iv384(SB), R8
	JMP		LSH512_INIT_RET
	
LSH512_INIT_512:
	MOVD	·iv512(SB), R8

LSH512_INIT_RET:
	VMOVAPS	0x00(R8), Y0
	VMOVAPS	0x20(R8), Y1
	VMOVAPS	0x40(R8), Y2
	VMOVAPS	0x60(R8), Y3

	VMOVUPS	Y0, 0x20(DI)
	VMOVUPS	Y1, 0x40(DI)
	VMOVUPS	Y2, 0x60(DI)
	VMOVUPS	Y3, 0x80(DI)

	VZEROUPPER
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x97884283c938982a
DATA LCDATA2<>+0x008(SB)/8, $0xba1fca93533e2355
DATA LCDATA2<>+0x010(SB)/8, $0xc519a2e87aeb1c03
DATA LCDATA2<>+0x018(SB)/8, $0x9a0fc95462af17b1
DATA LCDATA2<>+0x020(SB)/8, $0xfc3dda8ab019a82b
DATA LCDATA2<>+0x028(SB)/8, $0x02825d079a895407
DATA LCDATA2<>+0x030(SB)/8, $0x79f2d0a7ee06a6f7
DATA LCDATA2<>+0x038(SB)/8, $0xd76d15eed9fdf5fe
DATA LCDATA2<>+0x040(SB)/8, $0x0706050403020100
DATA LCDATA2<>+0x048(SB)/8, $0x09080f0e0d0c0b0a
DATA LCDATA2<>+0x050(SB)/8, $0x0302010007060504
DATA LCDATA2<>+0x058(SB)/8, $0x0d0c0b0a09080f0e
DATA LCDATA2<>+0x060(SB)/8, $0x0605040302010007
DATA LCDATA2<>+0x068(SB)/8, $0x080f0e0d0c0b0a09
DATA LCDATA2<>+0x070(SB)/8, $0x0605040302010007
DATA LCDATA2<>+0x078(SB)/8, $0x080f0e0d0c0b0a09
DATA LCDATA2<>+0x080(SB)/8, $0x0000000100000000
DATA LCDATA2<>+0x088(SB)/8, $0x0000000700000006
DATA LCDATA2<>+0x090(SB)/8, $0x0000000400000005
DATA LCDATA2<>+0x098(SB)/8, $0x0000000200000003
DATA LCDATA2<>+0x0a0(SB)/8, $0x1fcac64d01d0c2c1
DATA LCDATA2<>+0x0a8(SB)/8, $0xd9ea5de69161790f
DATA LCDATA2<>+0x0b0(SB)/8, $0xdebc8b6366071fc8
DATA LCDATA2<>+0x0b8(SB)/8, $0xa9d91db711c6c94b
DATA LCDATA2<>+0x0c0(SB)/8, $0x3a18653ac9c1d427
DATA LCDATA2<>+0x0c8(SB)/8, $0x84df64a223dd5b09
DATA LCDATA2<>+0x0d0(SB)/8, $0x6cc37895f4ad9e70
DATA LCDATA2<>+0x0d8(SB)/8, $0x448304c8d7f3f4d5
DATA LCDATA2<>+0x0e0(SB)/8, $0x0605040302010007
DATA LCDATA2<>+0x0e8(SB)/8, $0x080f0e0d0c0b0a09
GLOBL LCDATA2<>(SB), RODATA|NOPTR, $240

TEXT ·__lsh512_avx2_update(SB), NOSPLIT, $232-32
	MOVQ ctx+0(FP), DI
	MOVQ data_base+8(FP), SI
	MOVQ data_len+16(FP), DX
	//   data_cap+24

	// stack size: 192
	MOVQ SP, BP
	ADDQ $32, SP
	ANDQ $-32, SP
	MOVQ BP, 192(SP)
	LEAQ LCDATA2<>(SB), BP

	WORD $0x4f8b; BYTE $0x10                   // mov    ecx, dword [rdi + 16]
	LONG $0x11048d48                           // lea    rax, [rcx + rdx]
	LONG $0x00ff3d48; WORD $0x0000             // cmp    rax, 255
	JA   LBB1_4
	WORD $0xd285                               // test    edx, edx
	JLE  LBB1_28
	LONG $0x0f048d4c                           // lea    r8, [rdi + rcx]
	LONG $0xa0c08149; WORD $0x0000; BYTE $0x00 // add    r8, 160
	WORD $0xd089                               // mov    eax, edx
	LONG $0x10f88348                           // cmp    rax, 16
	JB   LBB1_3
	LONG $0x0f0c8d4c                           // lea    r9, [rdi + rcx]
	WORD $0x2949; BYTE $0xf1                   // sub    r9, rsi
	LONG $0xa0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 160
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmp    r9, 128
	JAE  LBB1_12

LBB1_3:
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_23:
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	WORD $0x2945; BYTE $0xcb // sub    r11d, r9d
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	LONG $0x03e38341         // and    r11d, 3
	JE   LBB1_25

LBB1_24:
	LONG $0x1cb60f42; BYTE $0x0e // movzx    ebx, byte [rsi + r9]
	LONG $0x081c8843             // mov    byte [r8 + r9], bl
	WORD $0xff49; BYTE $0xc1     // inc    r9
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_24

LBB1_25:
	LONG $0x03fa8349                           // cmp    r10, 3
	JB   LBB1_28
	LONG $0x39048d4c                           // lea    r8, [rcx + rdi]
	LONG $0xa3c08149; WORD $0x0000; BYTE $0x00 // add    r8, 163

LBB1_27:
	LONG $0x14b60f46; BYTE $0x0e   // movzx    r10d, byte [rsi + r9]
	LONG $0x08548847; BYTE $0xfd   // mov    byte [r8 + r9 - 3], r10b
	LONG $0x54b60f46; WORD $0x010e // movzx    r10d, byte [rsi + r9 + 1]
	LONG $0x08548847; BYTE $0xfe   // mov    byte [r8 + r9 - 2], r10b
	LONG $0x54b60f46; WORD $0x020e // movzx    r10d, byte [rsi + r9 + 2]
	LONG $0x08548847; BYTE $0xff   // mov    byte [r8 + r9 - 1], r10b
	LONG $0x54b60f46; WORD $0x030e // movzx    r10d, byte [rsi + r9 + 3]
	LONG $0x08148847               // mov    byte [r8 + r9], r10b
	LONG $0x04c18349               // add    r9, 4
	WORD $0x394c; BYTE $0xc8       // cmp    rax, r9
	JNE  LBB1_27

LBB1_28:
	WORD $0xd101 // add    ecx, edx
	JMP  LBB1_68

LBB1_4:
	LONG $0x4f6ffec5; BYTE $0x20               // vmovdqu    ymm1, yword [rdi + 32]
	LONG $0x476ffec5; BYTE $0x40               // vmovdqu    ymm0, yword [rdi + 64]
	LONG $0x5f6ffec5; BYTE $0x60               // vmovdqu    ymm3, yword [rdi + 96]
	QUAD $0x00000080976ffec5                   // vmovdqu    ymm2, yword [rdi + 128]
	WORD $0x8548; BYTE $0xc9                   // test    rcx, rcx
	JE   LBB1_44
	LONG $0x000100b8; BYTE $0x00               // mov    eax, 256
	WORD $0xc829                               // sub    eax, ecx
	WORD $0xc085                               // test    eax, eax
	JLE  LBB1_41
	LONG $0x0f0c8d4c                           // lea    r9, [rdi + rcx]
	LONG $0xa0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 160
	WORD $0xf883; BYTE $0x10                   // cmp    eax, 16
	JB   LBB1_7
	LONG $0x0f048d4c                           // lea    r8, [rdi + rcx]
	WORD $0x2949; BYTE $0xf0                   // sub    r8, rsi
	LONG $0xa0c08149; WORD $0x0000; BYTE $0x00 // add    r8, 160
	LONG $0x80f88149; WORD $0x0000; BYTE $0x00 // cmp    r8, 128
	JAE  LBB1_14

LBB1_7:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB1_36:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	WORD $0x8949; BYTE $0xc3 // mov    r11, rax
	LONG $0x03e38349         // and    r11, 3
	JE   LBB1_38

LBB1_37:
	LONG $0x1cb60f42; BYTE $0x06 // movzx    ebx, byte [rsi + r8]
	LONG $0x011c8843             // mov    byte [r9 + r8], bl
	WORD $0xff49; BYTE $0xc0     // inc    r8
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_37

LBB1_38:
	LONG $0x03fa8349                           // cmp    r10, 3
	JB   LBB1_41
	WORD $0x0148; BYTE $0xf9                   // add    rcx, rdi
	LONG $0xa3c18148; WORD $0x0000; BYTE $0x00 // add    rcx, 163

LBB1_40:
	LONG $0x0cb60f46; BYTE $0x06   // movzx    r9d, byte [rsi + r8]
	LONG $0x014c8846; BYTE $0xfd   // mov    byte [rcx + r8 - 3], r9b
	LONG $0x4cb60f46; WORD $0x0106 // movzx    r9d, byte [rsi + r8 + 1]
	LONG $0x014c8846; BYTE $0xfe   // mov    byte [rcx + r8 - 2], r9b
	LONG $0x4cb60f46; WORD $0x0206 // movzx    r9d, byte [rsi + r8 + 2]
	LONG $0x014c8846; BYTE $0xff   // mov    byte [rcx + r8 - 1], r9b
	LONG $0x4cb60f46; WORD $0x0306 // movzx    r9d, byte [rsi + r8 + 3]
	LONG $0x010c8846               // mov    byte [rcx + r8], r9b
	LONG $0x04c08349               // add    r8, 4
	WORD $0x394c; BYTE $0xc0       // cmp    rax, r8
	JNE  LBB1_40

LBB1_41:
	QUAD $0x000000a0bf6ffec5             // vmovdqu    ymm7, yword [rdi + 160]
	QUAD $0x000000c0b76ffec5             // vmovdqu    ymm6, yword [rdi + 192]
	QUAD $0x000000e0af6ffec5             // vmovdqu    ymm5, yword [rdi + 224]
	QUAD $0x00000100a76ffec5             // vmovdqu    ymm4, yword [rdi + 256]
	QUAD $0x000001209f6f7ec5             // vmovdqu    ymm11, yword [rdi + 288]
	QUAD $0x00000140976f7ec5             // vmovdqu    ymm10, yword [rdi + 320]
	QUAD $0x000001608f6f7ec5             // vmovdqu    ymm9, yword [rdi + 352]
	QUAD $0x00000180876f7ec5             // vmovdqu    ymm8, yword [rdi + 384]
	LONG $0xc9efc5c5                     // vpxor    ymm1, ymm7, ymm1
	LONG $0xdbefd5c5                     // vpxor    ymm3, ymm5, ymm3
	LONG $0xc0efcdc5                     // vpxor    ymm0, ymm6, ymm0
	LONG $0xd2efddc5                     // vpxor    ymm2, ymm4, ymm2
	LONG $0xc9d4e5c5                     // vpaddq    ymm1, ymm3, ymm1
	LONG $0xc0d4edc5                     // vpaddq    ymm0, ymm2, ymm0
	LONG $0xd1739dc5; BYTE $0x29         // vpsrlq    ymm12, ymm1, 41
	LONG $0xf173f5c5; BYTE $0x17         // vpsllq    ymm1, ymm1, 23
	LONG $0xc9eb9dc5                     // vpor    ymm1, ymm12, ymm1
	LONG $0xd0739dc5; BYTE $0x29         // vpsrlq    ymm12, ymm0, 41
	LONG $0xf073fdc5; BYTE $0x17         // vpsllq    ymm0, ymm0, 23
	LONG $0x4deff5c5; BYTE $0x00         // vpxor    ymm1, ymm1, yword 0[rbp]
	LONG $0xc0eb9dc5                     // vpor    ymm0, ymm12, ymm0
	LONG $0x45effdc5; BYTE $0x20         // vpxor    ymm0, ymm0, yword 32[rbp]
	LONG $0xdbd4f5c5                     // vpaddq    ymm3, ymm1, ymm3
	LONG $0xd2d4fdc5                     // vpaddq    ymm2, ymm0, ymm2
	LONG $0xd3739dc5; BYTE $0x05         // vpsrlq    ymm12, ymm3, 5
	LONG $0xf373e5c5; BYTE $0x3b         // vpsllq    ymm3, ymm3, 59
	LONG $0xdbeb9dc5                     // vpor    ymm3, ymm12, ymm3
	LONG $0xd2739dc5; BYTE $0x05         // vpsrlq    ymm12, ymm2, 5
	LONG $0xf273edc5; BYTE $0x3b         // vpsllq    ymm2, ymm2, 59
	LONG $0xd2eb9dc5                     // vpor    ymm2, ymm12, ymm2
	LONG $0xc9d4e5c5                     // vpaddq    ymm1, ymm3, ymm1
	LONG $0xc0d4edc5                     // vpaddq    ymm0, ymm2, ymm0
	LONG $0x00fd63c4; WORD $0xd2e1       // vpermq    ymm12, ymm1, 210
	LONG $0x00fd63c4; WORD $0xd2e8       // vpermq    ymm13, ymm0, 210
	LONG $0x00fde3c4; WORD $0x6ccb       // vpermq    ymm1, ymm3, 108
	LONG $0x456ffdc5; BYTE $0x40         // vmovdqa    ymm0, yword 64[rbp]
	LONG $0x0075e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm1, ymm0
	QUAD $0x0000e08d5a7de2c4; BYTE $0x00 // vbroadcasti128    ymm1, oword 224[rbp]
	LONG $0x006d62c4; BYTE $0xf1         // vpshufb    ymm14, ymm2, ymm1
	QUAD $0x00000080956ffdc5             // vmovdqa    ymm2, yword 128[rbp]
	LONG $0x366d42c4; BYTE $0xf6         // vpermd    ymm14, ymm2, ymm14
	LONG $0xef1541c4; BYTE $0xeb         // vpxor    ymm13, ymm13, ymm11
	LONG $0xef1d41c4; BYTE $0xe1         // vpxor    ymm12, ymm12, ymm9
	LONG $0xef0d41c4; BYTE $0xf2         // vpxor    ymm14, ymm14, ymm10
	LONG $0xdbefbdc5                     // vpxor    ymm3, ymm8, ymm3
	LONG $0xd41541c4; BYTE $0xec         // vpaddq    ymm13, ymm13, ymm12
	LONG $0xf3d40dc5                     // vpaddq    ymm14, ymm14, ymm3
	LONG $0x7305c1c4; WORD $0x39d5       // vpsrlq    ymm15, ymm13, 57
	LONG $0x7315c1c4; WORD $0x07f5       // vpsllq    ymm13, ymm13, 7
	LONG $0xeb1541c4; BYTE $0xef         // vpor    ymm13, ymm13, ymm15
	LONG $0x7305c1c4; WORD $0x39d6       // vpsrlq    ymm15, ymm14, 57
	LONG $0x730dc1c4; WORD $0x07f6       // vpsllq    ymm14, ymm14, 7
	LONG $0xeb0d41c4; BYTE $0xf7         // vpor    ymm14, ymm14, ymm15
	QUAD $0x000000a0adef15c5             // vpxor    ymm13, ymm13, yword 160[rbp]
	QUAD $0x000000c0b5ef0dc5             // vpxor    ymm14, ymm14, yword 192[rbp]
	LONG $0xd41541c4; BYTE $0xe4         // vpaddq    ymm12, ymm13, ymm12
	LONG $0xdbd48dc5                     // vpaddq    ymm3, ymm14, ymm3
	LONG $0x7305c1c4; WORD $0x3dd4       // vpsrlq    ymm15, ymm12, 61
	LONG $0x731dc1c4; WORD $0x03f4       // vpsllq    ymm12, ymm12, 3
	LONG $0xeb1d41c4; BYTE $0xe7         // vpor    ymm12, ymm12, ymm15
	LONG $0xd37385c5; BYTE $0x3d         // vpsrlq    ymm15, ymm3, 61
	LONG $0xf373e5c5; BYTE $0x03         // vpsllq    ymm3, ymm3, 3
	LONG $0xfbeb05c5                     // vpor    ymm15, ymm15, ymm3
	LONG $0xd41dc1c4; BYTE $0xdd         // vpaddq    ymm3, ymm12, ymm13
	LONG $0xd40541c4; BYTE $0xee         // vpaddq    ymm13, ymm15, ymm14
	LONG $0x00fde3c4; WORD $0xd2db       // vpermq    ymm3, ymm3, 210
	LONG $0x00fd43c4; WORD $0xd2ed       // vpermq    ymm13, ymm13, 210
	LONG $0x00fd43c4; WORD $0x6ce4       // vpermq    ymm12, ymm12, 108
	LONG $0x001d62c4; BYTE $0xe0         // vpshufb    ymm12, ymm12, ymm0
	LONG $0x000562c4; BYTE $0xf1         // vpshufb    ymm14, ymm15, ymm1
	LONG $0x366d42c4; BYTE $0xf6         // vpermd    ymm14, ymm2, ymm14
	LONG $0x0000e0b9; BYTE $0x00         // mov    ecx, 224
	MOVQ ·step(SB), R8                   // lea    r8, [rip + _g_StepConstants]
	QUAD $0x0000e0955a7de2c4; BYTE $0x00 // vbroadcasti128    ymm2, oword 224[rbp]

LBB1_42:
	LONG $0x00fde3c4; WORD $0x4bff             // vpermq    ymm7, ymm7, 75
	LONG $0xffd4a5c5                           // vpaddq    ymm7, ymm11, ymm7
	LONG $0x00fde3c4; WORD $0x93f6             // vpermq    ymm6, ymm6, 147
	LONG $0xf6d4adc5                           // vpaddq    ymm6, ymm10, ymm6
	LONG $0x00fde3c4; WORD $0x4bed             // vpermq    ymm5, ymm5, 75
	LONG $0xedd4b5c5                           // vpaddq    ymm5, ymm9, ymm5
	LONG $0x00fde3c4; WORD $0x93e4             // vpermq    ymm4, ymm4, 147
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xefef15c5                           // vpxor    ymm13, ymm13, ymm7
	LONG $0xdbefd5c5                           // vpxor    ymm3, ymm5, ymm3
	LONG $0xf6ef0dc5                           // vpxor    ymm14, ymm14, ymm6
	LONG $0xe4ef1dc5                           // vpxor    ymm12, ymm12, ymm4
	LONG $0xebd415c5                           // vpaddq    ymm13, ymm13, ymm3
	LONG $0xd41d41c4; BYTE $0xf6               // vpaddq    ymm14, ymm12, ymm14
	LONG $0x7305c1c4; WORD $0x29d5             // vpsrlq    ymm15, ymm13, 41
	LONG $0x7315c1c4; WORD $0x17f5             // vpsllq    ymm13, ymm13, 23
	LONG $0xeb1541c4; BYTE $0xef               // vpor    ymm13, ymm13, ymm15
	LONG $0x7305c1c4; WORD $0x29d6             // vpsrlq    ymm15, ymm14, 41
	LONG $0x730dc1c4; WORD $0x17f6             // vpsllq    ymm14, ymm14, 23
	LONG $0xeb0d41c4; BYTE $0xf7               // vpor    ymm14, ymm14, ymm15
	LONG $0xef1521c4; WORD $0x016c; BYTE $0xa0 // vpxor    ymm13, ymm13, yword [rcx + r8 - 96]
	LONG $0xef0d21c4; WORD $0x0174; BYTE $0xc0 // vpxor    ymm14, ymm14, yword [rcx + r8 - 64]
	LONG $0xdbd495c5                           // vpaddq    ymm3, ymm13, ymm3
	LONG $0xd40d41c4; BYTE $0xe4               // vpaddq    ymm12, ymm14, ymm12
	LONG $0xd37385c5; BYTE $0x05               // vpsrlq    ymm15, ymm3, 5
	LONG $0xf373e5c5; BYTE $0x3b               // vpsllq    ymm3, ymm3, 59
	LONG $0xdbeb85c5                           // vpor    ymm3, ymm15, ymm3
	LONG $0x7305c1c4; WORD $0x05d4             // vpsrlq    ymm15, ymm12, 5
	LONG $0x731dc1c4; WORD $0x3bf4             // vpsllq    ymm12, ymm12, 59
	LONG $0xeb1d41c4; BYTE $0xe7               // vpor    ymm12, ymm12, ymm15
	LONG $0xebd415c5                           // vpaddq    ymm13, ymm13, ymm3
	LONG $0xd41d41c4; BYTE $0xf6               // vpaddq    ymm14, ymm12, ymm14
	LONG $0x00fd43c4; WORD $0xd2ed             // vpermq    ymm13, ymm13, 210
	LONG $0x00fd43c4; WORD $0xd2f6             // vpermq    ymm14, ymm14, 210
	LONG $0x00fde3c4; WORD $0x6cdb             // vpermq    ymm3, ymm3, 108
	LONG $0x4d6ffdc5; BYTE $0x40               // vmovdqa    ymm1, yword 64[rbp]
	LONG $0x0065e2c4; BYTE $0xd9               // vpshufb    ymm3, ymm3, ymm1
	LONG $0x001d62c4; BYTE $0xe2               // vpshufb    ymm12, ymm12, ymm2
	QUAD $0x00000080856ffdc5                   // vmovdqa    ymm0, yword 128[rbp]
	LONG $0x367d42c4; BYTE $0xe4               // vpermd    ymm12, ymm0, ymm12
	LONG $0x00fd43c4; WORD $0x4bdb             // vpermq    ymm11, ymm11, 75
	LONG $0xdfd425c5                           // vpaddq    ymm11, ymm11, ymm7
	LONG $0x00fd43c4; WORD $0x93d2             // vpermq    ymm10, ymm10, 147
	LONG $0xd6d42dc5                           // vpaddq    ymm10, ymm10, ymm6
	LONG $0x00fd43c4; WORD $0x4bc9             // vpermq    ymm9, ymm9, 75
	LONG $0xcdd435c5                           // vpaddq    ymm9, ymm9, ymm5
	LONG $0x00fd43c4; WORD $0x93c0             // vpermq    ymm8, ymm8, 147
	LONG $0xc4d43dc5                           // vpaddq    ymm8, ymm8, ymm4
	LONG $0xef0d41c4; BYTE $0xf3               // vpxor    ymm14, ymm14, ymm11
	LONG $0xef1541c4; BYTE $0xe9               // vpxor    ymm13, ymm13, ymm9
	LONG $0xef1d41c4; BYTE $0xe2               // vpxor    ymm12, ymm12, ymm10
	LONG $0xdbefbdc5                           // vpxor    ymm3, ymm8, ymm3
	LONG $0xd40d41c4; BYTE $0xf5               // vpaddq    ymm14, ymm14, ymm13
	LONG $0xe3d41dc5                           // vpaddq    ymm12, ymm12, ymm3
	LONG $0x7305c1c4; WORD $0x39d6             // vpsrlq    ymm15, ymm14, 57
	LONG $0x730dc1c4; WORD $0x07f6             // vpsllq    ymm14, ymm14, 7
	LONG $0xeb0d41c4; BYTE $0xf7               // vpor    ymm14, ymm14, ymm15
	LONG $0x7305c1c4; WORD $0x39d4             // vpsrlq    ymm15, ymm12, 57
	LONG $0x731dc1c4; WORD $0x07f4             // vpsllq    ymm12, ymm12, 7
	LONG $0xeb1d41c4; BYTE $0xe7               // vpor    ymm12, ymm12, ymm15
	LONG $0xef0d21c4; WORD $0x0174; BYTE $0xe0 // vpxor    ymm14, ymm14, yword [rcx + r8 - 32]
	LONG $0xef1d21c4; WORD $0x0124             // vpxor    ymm12, ymm12, yword [rcx + r8]
	LONG $0xd40d41c4; BYTE $0xed               // vpaddq    ymm13, ymm14, ymm13
	LONG $0xdbd49dc5                           // vpaddq    ymm3, ymm12, ymm3
	LONG $0x7305c1c4; WORD $0x3dd5             // vpsrlq    ymm15, ymm13, 61
	LONG $0x7315c1c4; WORD $0x03f5             // vpsllq    ymm13, ymm13, 3
	LONG $0xeb1541c4; BYTE $0xff               // vpor    ymm15, ymm13, ymm15
	LONG $0xd37395c5; BYTE $0x3d               // vpsrlq    ymm13, ymm3, 61
	LONG $0xf373e5c5; BYTE $0x03               // vpsllq    ymm3, ymm3, 3
	LONG $0xc3eb95c5                           // vpor    ymm0, ymm13, ymm3
	LONG $0xd405c1c4; BYTE $0xde               // vpaddq    ymm3, ymm15, ymm14
	LONG $0xe0d41dc5                           // vpaddq    ymm12, ymm12, ymm0
	LONG $0x00fde3c4; WORD $0xd2db             // vpermq    ymm3, ymm3, 210
	LONG $0x00fd43c4; WORD $0xd2ec             // vpermq    ymm13, ymm12, 210
	LONG $0x00fd43c4; WORD $0x6ce7             // vpermq    ymm12, ymm15, 108
	LONG $0x001d62c4; BYTE $0xe1               // vpshufb    ymm12, ymm12, ymm1
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	QUAD $0x000000808d6ffdc5                   // vmovdqa    ymm1, yword 128[rbp]
	LONG $0x367562c4; BYTE $0xf0               // vpermd    ymm14, ymm1, ymm0
	LONG $0x80e98348                           // sub    rcx, -128
	LONG $0x60f98148; WORD $0x0007; BYTE $0x00 // cmp    rcx, 1888
	JNE  LBB1_42
	LONG $0x00fde3c4; WORD $0x4bc7             // vpermq    ymm0, ymm7, 75
	LONG $0xc0d4a5c5                           // vpaddq    ymm0, ymm11, ymm0
	LONG $0x00fde3c4; WORD $0x93ce             // vpermq    ymm1, ymm6, 147
	LONG $0xd1d4adc5                           // vpaddq    ymm2, ymm10, ymm1
	LONG $0x00fde3c4; WORD $0x4bcd             // vpermq    ymm1, ymm5, 75
	LONG $0xe9d4b5c5                           // vpaddq    ymm5, ymm9, ymm1
	LONG $0x00fde3c4; WORD $0x93cc             // vpermq    ymm1, ymm4, 147
	LONG $0xe1d4bdc5                           // vpaddq    ymm4, ymm8, ymm1
	LONG $0xc8ef95c5                           // vpxor    ymm1, ymm13, ymm0
	LONG $0xddefe5c5                           // vpxor    ymm3, ymm3, ymm5
	LONG $0xc2ef8dc5                           // vpxor    ymm0, ymm14, ymm2
	LONG $0xd4ef9dc5                           // vpxor    ymm2, ymm12, ymm4
	WORD $0x0148; BYTE $0xc6                   // add    rsi, rax
	WORD $0x2948; BYTE $0xc2                   // sub    rdx, rax
	LONG $0x001047c7; WORD $0x0000; BYTE $0x00 // mov    dword [rdi + 16], 0

LBB1_44:
	LONG $0x00fa8148; WORD $0x0001; BYTE $0x00 // cmp    rdx, 256
	JB   LBB1_49
	LONG $0x6d6ffdc5; BYTE $0x40               // vmovdqa    ymm5, yword 64[rbp]
	QUAD $0x00000080a56f7dc5                   // vmovdqa    ymm12, yword 128[rbp]
	MOVQ ·step(SB), AX                         // lea    rax, [rip + _g_StepConstants]
LBB1_46:
	LONG $0x366f7ec5                     // vmovdqu    ymm14, yword [rsi]
	LONG $0x6e6f7ec5; BYTE $0x20         // vmovdqu    ymm13, yword [rsi + 32]
	LONG $0x7e6f7ec5; BYTE $0x40         // vmovdqu    ymm15, yword [rsi + 64]
	LONG $0x7e6ffec5; BYTE $0x60         // vmovdqu    ymm7, yword [rsi + 96]
	QUAD $0x000000809e6f7ec5             // vmovdqu    ymm11, yword [rsi + 128]
	QUAD $0x000000a08e6f7ec5             // vmovdqu    ymm9, yword [rsi + 160]
	QUAD $0x000000c0a66ffec5             // vmovdqu    ymm4, yword [rsi + 192]
	QUAD $0x000000e0866f7ec5             // vmovdqu    ymm8, yword [rsi + 224]
	LONG $0xc9ef8dc5                     // vpxor    ymm1, ymm14, ymm1
	LONG $0xdbef85c5                     // vpxor    ymm3, ymm15, ymm3
	LONG $0xc0ef95c5                     // vpxor    ymm0, ymm13, ymm0
	LONG $0xd2efc5c5                     // vpxor    ymm2, ymm7, ymm2
	LONG $0xc9d4e5c5                     // vpaddq    ymm1, ymm3, ymm1
	LONG $0xc0d4edc5                     // vpaddq    ymm0, ymm2, ymm0
	LONG $0xd173adc5; BYTE $0x29         // vpsrlq    ymm10, ymm1, 41
	LONG $0xf173f5c5; BYTE $0x17         // vpsllq    ymm1, ymm1, 23
	LONG $0xc9ebadc5                     // vpor    ymm1, ymm10, ymm1
	LONG $0x4deff5c5; BYTE $0x00         // vpxor    ymm1, ymm1, yword 0[rbp]
	LONG $0xd073adc5; BYTE $0x29         // vpsrlq    ymm10, ymm0, 41
	LONG $0xf073fdc5; BYTE $0x17         // vpsllq    ymm0, ymm0, 23
	LONG $0xc0ebadc5                     // vpor    ymm0, ymm10, ymm0
	LONG $0x45effdc5; BYTE $0x20         // vpxor    ymm0, ymm0, yword 32[rbp]
	LONG $0xdbd4f5c5                     // vpaddq    ymm3, ymm1, ymm3
	LONG $0xd2d4fdc5                     // vpaddq    ymm2, ymm0, ymm2
	LONG $0xd373adc5; BYTE $0x05         // vpsrlq    ymm10, ymm3, 5
	LONG $0xf373e5c5; BYTE $0x3b         // vpsllq    ymm3, ymm3, 59
	LONG $0xdbebadc5                     // vpor    ymm3, ymm10, ymm3
	LONG $0xd273adc5; BYTE $0x05         // vpsrlq    ymm10, ymm2, 5
	LONG $0xf273edc5; BYTE $0x3b         // vpsllq    ymm2, ymm2, 59
	LONG $0xd2ebadc5                     // vpor    ymm2, ymm10, ymm2
	LONG $0xc9d4e5c5                     // vpaddq    ymm1, ymm3, ymm1
	LONG $0xc0d4edc5                     // vpaddq    ymm0, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xd2c9       // vpermq    ymm1, ymm1, 210
	LONG $0x00fde3c4; WORD $0xd2c0       // vpermq    ymm0, ymm0, 210
	LONG $0x00fde3c4; WORD $0x6cdb       // vpermq    ymm3, ymm3, 108
	LONG $0x0065e2c4; BYTE $0xdd         // vpshufb    ymm3, ymm3, ymm5
	QUAD $0x0000e0b55a7de2c4; BYTE $0x00 // vbroadcasti128    ymm6, oword 224[rbp]
	LONG $0x006de2c4; BYTE $0xd6         // vpshufb    ymm2, ymm2, ymm6
	LONG $0x361de2c4; BYTE $0xd2         // vpermd    ymm2, ymm12, ymm2
	LONG $0x5c7f7dc5; WORD $0x2024       // vmovdqa    yword [rsp + 32], ymm11
	LONG $0xc0efa5c5                     // vpxor    ymm0, ymm11, ymm0
	LONG $0x647ffdc5; WORD $0x4024       // vmovdqa    yword [rsp + 64], ymm4
	LONG $0xcceff5c5                     // vpxor    ymm1, ymm1, ymm4
	LONG $0x6f7dc1c4; BYTE $0xe4         // vmovdqa    ymm4, ymm12
	LONG $0x6f7d41c4; BYTE $0xe1         // vmovdqa    ymm12, ymm9
	LONG $0xd2efb5c5                     // vpxor    ymm2, ymm9, ymm2
	LONG $0x047f7dc5; BYTE $0x24         // vmovdqa    yword [rsp], ymm8
	LONG $0xdbefbdc5                     // vpxor    ymm3, ymm8, ymm3
	LONG $0xc1d4fdc5                     // vpaddq    ymm0, ymm0, ymm1
	LONG $0xd3d4edc5                     // vpaddq    ymm2, ymm2, ymm3
	LONG $0xd073adc5; BYTE $0x39         // vpsrlq    ymm10, ymm0, 57
	LONG $0xf073fdc5; BYTE $0x07         // vpsllq    ymm0, ymm0, 7
	LONG $0xc0ebadc5                     // vpor    ymm0, ymm10, ymm0
	QUAD $0x000000a085effdc5             // vpxor    ymm0, ymm0, yword 160[rbp]
	LONG $0xd273adc5; BYTE $0x39         // vpsrlq    ymm10, ymm2, 57
	LONG $0xf273edc5; BYTE $0x07         // vpsllq    ymm2, ymm2, 7
	LONG $0xd2ebadc5                     // vpor    ymm2, ymm10, ymm2
	QUAD $0x000000c095efedc5             // vpxor    ymm2, ymm2, yword 192[rbp]
	LONG $0xc9d4fdc5                     // vpaddq    ymm1, ymm0, ymm1
	LONG $0xdbd4edc5                     // vpaddq    ymm3, ymm2, ymm3
	LONG $0xd173adc5; BYTE $0x3d         // vpsrlq    ymm10, ymm1, 61
	LONG $0xf173f5c5; BYTE $0x03         // vpsllq    ymm1, ymm1, 3
	LONG $0xd1eb2dc5                     // vpor    ymm10, ymm10, ymm1
	LONG $0xd373f5c5; BYTE $0x3d         // vpsrlq    ymm1, ymm3, 61
	LONG $0xf373e5c5; BYTE $0x03         // vpsllq    ymm3, ymm3, 3
	LONG $0xd9ebe5c5                     // vpor    ymm3, ymm3, ymm1
	LONG $0xc0d4adc5                     // vpaddq    ymm0, ymm10, ymm0
	LONG $0xcad4e5c5                     // vpaddq    ymm1, ymm3, ymm2
	LONG $0x00fde3c4; WORD $0xd2c0       // vpermq    ymm0, ymm0, 210
	LONG $0x00fde3c4; WORD $0xd2c9       // vpermq    ymm1, ymm1, 210
	LONG $0x00fdc3c4; WORD $0x6cd2       // vpermq    ymm2, ymm10, 108
	LONG $0x006de2c4; WORD $0x4055       // vpshufb    ymm2, ymm2, yword 64[rbp]
	LONG $0x0065e2c4; BYTE $0xde         // vpshufb    ymm3, ymm3, ymm6
	LONG $0x365d62c4; BYTE $0xd3         // vpermd    ymm10, ymm4, ymm3
	LONG $0x0000e0b9; BYTE $0x00         // mov    ecx, 224

LBB1_47:
	LONG $0x00fdc3c4; WORD $0x4bde             // vpermq    ymm3, ymm14, 75
	LONG $0x4c6f7dc5; WORD $0x2024             // vmovdqa    ymm9, yword [rsp + 32]
	LONG $0xe3d4b5c5                           // vpaddq    ymm4, ymm9, ymm3
	LONG $0x00fdc3c4; WORD $0x93dd             // vpermq    ymm3, ymm13, 147
	LONG $0x6f7dc1c4; BYTE $0xec               // vmovdqa    ymm5, ymm12
	LONG $0xdbd41dc5                           // vpaddq    ymm11, ymm12, ymm3
	LONG $0x00fdc3c4; WORD $0x4bdf             // vpermq    ymm3, ymm15, 75
	LONG $0x646f7dc5; WORD $0x4024             // vmovdqa    ymm12, yword [rsp + 64]
	LONG $0xfbd41dc5                           // vpaddq    ymm15, ymm12, ymm3
	LONG $0x00fde3c4; WORD $0x93df             // vpermq    ymm3, ymm7, 147
	LONG $0x2c6f7dc5; BYTE $0x24               // vmovdqa    ymm13, yword [rsp]
	LONG $0xfbd495c5                           // vpaddq    ymm7, ymm13, ymm3
	LONG $0x7c7ffdc5; WORD $0x6024             // vmovdqa    yword [rsp + 96], ymm7
	LONG $0xc9efddc5                           // vpxor    ymm1, ymm4, ymm1
	QUAD $0x00008024a47ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 128], ymm4
	LONG $0xc0ef85c5                           // vpxor    ymm0, ymm15, ymm0
	LONG $0xef25c1c4; BYTE $0xda               // vpxor    ymm3, ymm11, ymm10
	LONG $0x6f7d41c4; BYTE $0xc3               // vmovdqa    ymm8, ymm11
	LONG $0xd2efc5c5                           // vpxor    ymm2, ymm7, ymm2
	LONG $0xc9d4fdc5                           // vpaddq    ymm1, ymm0, ymm1
	LONG $0xdbd4edc5                           // vpaddq    ymm3, ymm2, ymm3
	LONG $0xd173adc5; BYTE $0x29               // vpsrlq    ymm10, ymm1, 41
	LONG $0xf173f5c5; BYTE $0x17               // vpsllq    ymm1, ymm1, 23
	LONG $0xc9ebadc5                           // vpor    ymm1, ymm10, ymm1
	LONG $0xd373adc5; BYTE $0x29               // vpsrlq    ymm10, ymm3, 41
	LONG $0xf373e5c5; BYTE $0x17               // vpsllq    ymm3, ymm3, 23
	LONG $0xdbebadc5                           // vpor    ymm3, ymm10, ymm3
	LONG $0x4ceff5c5; WORD $0xa001             // vpxor    ymm1, ymm1, yword [rcx + rax - 96]
	LONG $0x5cefe5c5; WORD $0xc001             // vpxor    ymm3, ymm3, yword [rcx + rax - 64]
	LONG $0xc0d4f5c5                           // vpaddq    ymm0, ymm1, ymm0
	LONG $0xd2d4e5c5                           // vpaddq    ymm2, ymm3, ymm2
	LONG $0xd073adc5; BYTE $0x05               // vpsrlq    ymm10, ymm0, 5
	LONG $0xf073fdc5; BYTE $0x3b               // vpsllq    ymm0, ymm0, 59
	LONG $0xc0ebadc5                           // vpor    ymm0, ymm10, ymm0
	LONG $0xd273adc5; BYTE $0x05               // vpsrlq    ymm10, ymm2, 5
	LONG $0xf273edc5; BYTE $0x3b               // vpsllq    ymm2, ymm2, 59
	LONG $0xd2ebadc5                           // vpor    ymm2, ymm10, ymm2
	LONG $0xc9d4fdc5                           // vpaddq    ymm1, ymm0, ymm1
	LONG $0xdbd4edc5                           // vpaddq    ymm3, ymm2, ymm3
	LONG $0x00fde3c4; WORD $0xd2c9             // vpermq    ymm1, ymm1, 210
	LONG $0x00fde3c4; WORD $0xd2db             // vpermq    ymm3, ymm3, 210
	LONG $0x00fde3c4; WORD $0x6cc0             // vpermq    ymm0, ymm0, 108
	LONG $0x756f7dc5; BYTE $0x40               // vmovdqa    ymm14, yword 64[rbp]
	LONG $0x007dc2c4; BYTE $0xfe               // vpshufb    ymm7, ymm0, ymm14
	QUAD $0x0000e0b55a7de2c4; BYTE $0x00       // vbroadcasti128    ymm6, oword 224[rbp]
	LONG $0x006de2c4; BYTE $0xd6               // vpshufb    ymm2, ymm2, ymm6
	QUAD $0x000000809d6f7dc5                   // vmovdqa    ymm11, yword 128[rbp]
	LONG $0x3625e2c4; BYTE $0xd2               // vpermd    ymm2, ymm11, ymm2
	LONG $0x00fd43c4; WORD $0x4bc9             // vpermq    ymm9, ymm9, 75
	LONG $0xc4d4b5c5                           // vpaddq    ymm0, ymm9, ymm4
	LONG $0x00fde3c4; WORD $0x93ed             // vpermq    ymm5, ymm5, 147
	LONG $0xcdd43dc5                           // vpaddq    ymm9, ymm8, ymm5
	LONG $0x6f7dc1c4; BYTE $0xe8               // vmovdqa    ymm5, ymm8
	LONG $0x00fdc3c4; WORD $0x4be4             // vpermq    ymm4, ymm12, 75
	LONG $0xe4d485c5                           // vpaddq    ymm4, ymm15, ymm4
	LONG $0x00fd43c4; WORD $0x93d5             // vpermq    ymm10, ymm13, 147
	LONG $0x6c6f7dc5; WORD $0x6024             // vmovdqa    ymm13, yword [rsp + 96]
	LONG $0xd41541c4; BYTE $0xc2               // vpaddq    ymm8, ymm13, ymm10
	LONG $0x447ffdc5; WORD $0x2024             // vmovdqa    yword [rsp + 32], ymm0
	LONG $0xd8efe5c5                           // vpxor    ymm3, ymm3, ymm0
	LONG $0x647ffdc5; WORD $0x4024             // vmovdqa    yword [rsp + 64], ymm4
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x6f7d41c4; BYTE $0xe1               // vmovdqa    ymm12, ymm9
	LONG $0xd2efb5c5                           // vpxor    ymm2, ymm9, ymm2
	LONG $0x047f7dc5; BYTE $0x24               // vmovdqa    yword [rsp], ymm8
	LONG $0xc7efbdc5                           // vpxor    ymm0, ymm8, ymm7
	LONG $0xd9d4e5c5                           // vpaddq    ymm3, ymm3, ymm1
	LONG $0xd0d4edc5                           // vpaddq    ymm2, ymm2, ymm0
	LONG $0xd373adc5; BYTE $0x39               // vpsrlq    ymm10, ymm3, 57
	LONG $0xf373e5c5; BYTE $0x07               // vpsllq    ymm3, ymm3, 7
	LONG $0xdbebadc5                           // vpor    ymm3, ymm10, ymm3
	LONG $0xd273adc5; BYTE $0x39               // vpsrlq    ymm10, ymm2, 57
	LONG $0xf273edc5; BYTE $0x07               // vpsllq    ymm2, ymm2, 7
	LONG $0xd2ebadc5                           // vpor    ymm2, ymm10, ymm2
	LONG $0x5cefe5c5; WORD $0xe001             // vpxor    ymm3, ymm3, yword [rcx + rax - 32]
	LONG $0x14efedc5; BYTE $0x01               // vpxor    ymm2, ymm2, yword [rcx + rax]
	LONG $0xc9d4e5c5                           // vpaddq    ymm1, ymm3, ymm1
	LONG $0xc0d4edc5                           // vpaddq    ymm0, ymm2, ymm0
	LONG $0xd173adc5; BYTE $0x3d               // vpsrlq    ymm10, ymm1, 61
	LONG $0xf173f5c5; BYTE $0x03               // vpsllq    ymm1, ymm1, 3
	LONG $0xd1eb2dc5                           // vpor    ymm10, ymm10, ymm1
	LONG $0xd073f5c5; BYTE $0x3d               // vpsrlq    ymm1, ymm0, 61
	LONG $0xf073fdc5; BYTE $0x03               // vpsllq    ymm0, ymm0, 3
	LONG $0xe66ffdc5                           // vmovdqa    ymm4, ymm6
	LONG $0xf1ebfdc5                           // vpor    ymm6, ymm0, ymm1
	LONG $0xc3d4adc5                           // vpaddq    ymm0, ymm10, ymm3
	LONG $0xcad4cdc5                           // vpaddq    ymm1, ymm6, ymm2
	LONG $0x00fde3c4; WORD $0xd2c0             // vpermq    ymm0, ymm0, 210
	LONG $0x00fde3c4; WORD $0xd2c9             // vpermq    ymm1, ymm1, 210
	LONG $0x00fdc3c4; WORD $0x6cd2             // vpermq    ymm2, ymm10, 108
	LONG $0x006dc2c4; BYTE $0xd6               // vpshufb    ymm2, ymm2, ymm14
	LONG $0x6f7dc1c4; BYTE $0xfd               // vmovdqa    ymm7, ymm13
	LONG $0xed6f7dc5                           // vmovdqa    ymm13, ymm5
	QUAD $0x00008024b46f7dc5; BYTE $0x00       // vmovdqa    ymm14, yword [rsp + 128]
	LONG $0x004de2c4; BYTE $0xdc               // vpshufb    ymm3, ymm6, ymm4
	LONG $0x362562c4; BYTE $0xd3               // vpermd    ymm10, ymm11, ymm3
	LONG $0x80e98348                           // sub    rcx, -128
	LONG $0x60f98148; WORD $0x0007; BYTE $0x00 // cmp    rcx, 1888
	JNE  LBB1_47
	LONG $0x00fdc3c4; WORD $0x4bde             // vpermq    ymm3, ymm14, 75
	LONG $0x5cd4e5c5; WORD $0x2024             // vpaddq    ymm3, ymm3, yword [rsp + 32]
	LONG $0x00fdc3c4; WORD $0x93f5             // vpermq    ymm6, ymm13, 147
	LONG $0xe6d49dc5                           // vpaddq    ymm4, ymm12, ymm6
	LONG $0x00fdc3c4; WORD $0x4bf7             // vpermq    ymm6, ymm15, 75
	LONG $0x6cd4cdc5; WORD $0x4024             // vpaddq    ymm5, ymm6, yword [rsp + 64]
	LONG $0x00fde3c4; WORD $0x93f7             // vpermq    ymm6, ymm7, 147
	LONG $0x34d4cdc5; BYTE $0x24               // vpaddq    ymm6, ymm6, yword [rsp]
	LONG $0xcbeff5c5                           // vpxor    ymm1, ymm1, ymm3
	LONG $0xddeffdc5                           // vpxor    ymm3, ymm0, ymm5
	LONG $0xc4efadc5                           // vpxor    ymm0, ymm10, ymm4
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // add    rsi, 256
	LONG $0x00c28148; WORD $0xffff; BYTE $0xff // add    rdx, -256
	LONG $0xfffa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 255
	LONG $0x6d6ffdc5; BYTE $0x40               // vmovdqa    ymm5, yword 64[rbp]
	QUAD $0x00000080a56f7dc5                   // vmovdqa    ymm12, yword 128[rbp]
	JA   LBB1_46

LBB1_49:
	LONG $0x4f7ffec5; BYTE $0x20   // vmovdqu    yword [rdi + 32], ymm1
	LONG $0x477ffec5; BYTE $0x40   // vmovdqu    yword [rdi + 64], ymm0
	LONG $0x5f7ffec5; BYTE $0x60   // vmovdqu    yword [rdi + 96], ymm3
	QUAD $0x00000080977ffec5       // vmovdqu    yword [rdi + 128], ymm2
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB1_69
	LONG $0x10fa8348               // cmp    rdx, 16
	JB   LBB1_51
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	WORD $0x2948; BYTE $0xf0       // sub    rax, rsi
	LONG $0x00a00548; WORD $0x0000 // add    rax, 160
	LONG $0x00803d48; WORD $0x0000 // cmp    rax, 128
	JAE  LBB1_54

LBB1_51:
	WORD $0xc031 // xor    eax, eax

LBB1_63:
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xd1 // add    rcx, rdx
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x03e08349         // and    r8, 3
	JE   LBB1_65

LBB1_64:
	LONG $0x0cb60f44; BYTE $0x06 // movzx    r9d, byte [rsi + rax]
	QUAD $0x000000a0078c8844     // mov    byte [rdi + rax + 160], r9b
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0xff49; BYTE $0xc8     // dec    r8
	JNE  LBB1_64

LBB1_65:
	LONG $0x03f98348 // cmp    rcx, 3
	JB   LBB1_67

LBB1_66:
	LONG $0x060cb60f                           // movzx    ecx, byte [rsi + rax]
	LONG $0xa0078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 160], cl
	LONG $0x064cb60f; BYTE $0x01               // movzx    ecx, byte [rsi + rax + 1]
	LONG $0xa1078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 161], cl
	LONG $0x064cb60f; BYTE $0x02               // movzx    ecx, byte [rsi + rax + 2]
	LONG $0xa2078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 162], cl
	LONG $0x064cb60f; BYTE $0x03               // movzx    ecx, byte [rsi + rax + 3]
	LONG $0xa3078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 163], cl
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB1_66

LBB1_67:
	WORD $0xd189 // mov    ecx, edx

LBB1_68:
	WORD $0x4f89; BYTE $0x10 // mov    dword [rdi + 16], ecx

LBB1_69:
	MOVQ 192(SP), SP
	VZEROUPPER
	RET

LBB1_12:
	LONG $0x0000803d; BYTE $0x00 // cmp    eax, 128
	JAE  LBB1_16
	WORD $0x3145; BYTE $0xc9     // xor    r9d, r9d
	JMP  LBB1_20

LBB1_54:
	LONG $0x80fa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 128
	JAE  LBB1_56
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB1_60

LBB1_14:
	LONG $0x0000803d; BYTE $0x00 // cmp    eax, 128
	JAE  LBB1_29
	WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP  LBB1_33

LBB1_16:
	WORD $0x8941; BYTE $0xd2                   // mov    r10d, edx
	LONG $0x7fe28341                           // and    r10d, 127
	WORD $0x8949; BYTE $0xc1                   // mov    r9, rax
	WORD $0x294d; BYTE $0xd1                   // sub    r9, r10
	LONG $0x391c8d4c                           // lea    r11, [rcx + rdi]
	LONG $0x00c38149; WORD $0x0001; BYTE $0x00 // add    r11, 256
	WORD $0xdb31                               // xor    ebx, ebx

LBB1_17:
	LONG $0x046ffec5; BYTE $0x1e               // vmovdqu    ymm0, yword [rsi + rbx]
	LONG $0x4c6ffec5; WORD $0x201e             // vmovdqu    ymm1, yword [rsi + rbx + 32]
	LONG $0x546ffec5; WORD $0x401e             // vmovdqu    ymm2, yword [rsi + rbx + 64]
	LONG $0x5c6ffec5; WORD $0x601e             // vmovdqu    ymm3, yword [rsi + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x1b44; BYTE $0xa0 // vmovdqu    yword [r11 + rbx - 96], ymm0
	LONG $0x7f7ec1c4; WORD $0x1b4c; BYTE $0xc0 // vmovdqu    yword [r11 + rbx - 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x1b54; BYTE $0xe0 // vmovdqu    yword [r11 + rbx - 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x1b1c             // vmovdqu    yword [r11 + rbx], ymm3
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xd9                   // cmp    r9, rbx
	JNE  LBB1_17
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB1_28
	LONG $0x10fa8341                           // cmp    r10d, 16
	JB   LBB1_23

LBB1_20:
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	LONG $0x0fe38341         // and    r11d, 15
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0x294d; BYTE $0xd9 // sub    r9, r11

LBB1_21:
	LONG $0x6f7aa1c4; WORD $0x1604 // vmovdqu    xmm0, oword [rsi + r10]
	LONG $0x7f7a81c4; WORD $0x1004 // vmovdqu    oword [r8 + r10], xmm0
	LONG $0x10c28349               // add    r10, 16
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB1_21
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	JNE  LBB1_23
	JMP  LBB1_28

LBB1_56:
	WORD $0xd089                 // mov    eax, edx
	LONG $0x00008025; BYTE $0x00 // and    eax, 128
	WORD $0xc931                 // xor    ecx, ecx

LBB1_57:
	LONG $0x046ffec5; BYTE $0x0e         // vmovdqu    ymm0, yword [rsi + rcx]
	LONG $0x4c6ffec5; WORD $0x200e       // vmovdqu    ymm1, yword [rsi + rcx + 32]
	LONG $0x546ffec5; WORD $0x400e       // vmovdqu    ymm2, yword [rsi + rcx + 64]
	LONG $0x5c6ffec5; WORD $0x600e       // vmovdqu    ymm3, yword [rsi + rcx + 96]
	QUAD $0x0000a00f847ffec5; BYTE $0x00 // vmovdqu    yword [rdi + rcx + 160], ymm0
	QUAD $0x0000c00f8c7ffec5; BYTE $0x00 // vmovdqu    yword [rdi + rcx + 192], ymm1
	QUAD $0x0000e00f947ffec5; BYTE $0x00 // vmovdqu    yword [rdi + rcx + 224], ymm2
	QUAD $0x0001000f9c7ffec5; BYTE $0x00 // vmovdqu    yword [rdi + rcx + 256], ymm3
	LONG $0x80e98348                     // sub    rcx, -128
	WORD $0x3948; BYTE $0xc8             // cmp    rax, rcx
	JNE  LBB1_57
	WORD $0x3948; BYTE $0xc2             // cmp    rdx, rax
	JE   LBB1_67
	WORD $0xc2f6; BYTE $0x70             // test    dl, 112
	JE   LBB1_63

LBB1_60:
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0xd089                 // mov    eax, edx
	LONG $0x0000f025; BYTE $0x00 // and    eax, 240

LBB1_61:
	LONG $0x046ffac5; BYTE $0x0e         // vmovdqu    xmm0, oword [rsi + rcx]
	QUAD $0x0000a00f847ffac5; BYTE $0x00 // vmovdqu    oword [rdi + rcx + 160], xmm0
	LONG $0x10c18348                     // add    rcx, 16
	WORD $0x3948; BYTE $0xc8             // cmp    rax, rcx
	JNE  LBB1_61
	WORD $0x3948; BYTE $0xc2             // cmp    rdx, rax
	JE   LBB1_67
	JMP  LBB1_63

LBB1_29:
	WORD $0x8941; BYTE $0xc0                   // mov    r8d, eax
	LONG $0x80e08341                           // and    r8d, -128
	LONG $0x39148d4c                           // lea    r10, [rcx + rdi]
	LONG $0x00c28149; WORD $0x0001; BYTE $0x00 // add    r10, 256
	WORD $0x3145; BYTE $0xdb                   // xor    r11d, r11d

LBB1_30:
	LONG $0x107ca1c4; WORD $0x1e24             // vmovups    ymm4, yword [rsi + r11]
	LONG $0x107ca1c4; WORD $0x1e6c; BYTE $0x20 // vmovups    ymm5, yword [rsi + r11 + 32]
	LONG $0x107ca1c4; WORD $0x1e74; BYTE $0x40 // vmovups    ymm6, yword [rsi + r11 + 64]
	LONG $0x107ca1c4; WORD $0x1e7c; BYTE $0x60 // vmovups    ymm7, yword [rsi + r11 + 96]
	LONG $0x117c81c4; WORD $0x1a64; BYTE $0xa0 // vmovups    yword [r10 + r11 - 96], ymm4
	LONG $0x117c81c4; WORD $0x1a6c; BYTE $0xc0 // vmovups    yword [r10 + r11 - 64], ymm5
	LONG $0x117c81c4; WORD $0x1a74; BYTE $0xe0 // vmovups    yword [r10 + r11 - 32], ymm6
	LONG $0x117c81c4; WORD $0x1a3c             // vmovups    yword [r10 + r11], ymm7
	LONG $0x80eb8349                           // sub    r11, -128
	WORD $0x394d; BYTE $0xd8                   // cmp    r8, r11
	JNE  LBB1_30
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JE   LBB1_41
	WORD $0x70a8                               // test    al, 112
	JE   LBB1_36

LBB1_33:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0x8941; BYTE $0xc0 // mov    r8d, eax
	LONG $0xf0e08341         // and    r8d, -16

LBB1_34:
	LONG $0x1078a1c4; WORD $0x1624 // vmovups    xmm4, oword [rsi + r10]
	LONG $0x117881c4; WORD $0x1124 // vmovups    oword [r9 + r10], xmm4
	LONG $0x10c28349               // add    r10, 16
	WORD $0x394d; BYTE $0xd0       // cmp    r8, r10
	JNE  LBB1_34
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB1_41
	JMP  LBB1_36

TEXT ·__lsh512_avx2_final(SB), NOSPLIT, $32
	MOVQ ctx+0(FP), DI
	MOVQ hashval_base+8(FP), SI
	//hashval_len+16
	//hashval_cap+24

	LEAQ LCDATA2<>(SB), BP

	LONG $0x10478b44                     // mov    r8d, dword [rdi + 16]
	QUAD $0x000000a00784c642; BYTE $0x80 // mov    byte [rdi + r8 + 160], -128
	LONG $0x0000ffba; BYTE $0x00         // mov    edx, 255
	WORD $0x2944; BYTE $0xc2             // sub    edx, r8d
	WORD $0xd285                         // test    edx, edx
	JLE  LBB2_13
	LONG $0x07048d4a                     // lea    rax, [rdi + r8]
	LONG $0x00a10548; WORD $0x0000       // add    rax, 161
	WORD $0xd189                         // mov    ecx, edx
	WORD $0xfa83; BYTE $0x10             // cmp    edx, 16
	JAE  LBB2_3
	WORD $0xd231                         // xor    edx, edx
	JMP  LBB2_12

LBB2_3:
	LONG $0x0080fa81; WORD $0x0000 // cmp    edx, 128
	JAE  LBB2_5
	WORD $0xd231                   // xor    edx, edx
	JMP  LBB2_9

LBB2_5:
	WORD $0xca89                               // mov    edx, ecx
	WORD $0xe283; BYTE $0x80                   // and    edx, -128
	WORD $0x0149; BYTE $0xf8                   // add    r8, rdi
	LONG $0x01c08149; WORD $0x0001; BYTE $0x00 // add    r8, 257
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0xc057f8c5                           // vxorps    xmm0, xmm0, xmm0

LBB2_6:
	LONG $0x117c81c4; WORD $0x0844; BYTE $0xa0 // vmovups    yword [r8 + r9 - 96], ymm0
	LONG $0x117c81c4; WORD $0x0844; BYTE $0xc0 // vmovups    yword [r8 + r9 - 64], ymm0
	LONG $0x117c81c4; WORD $0x0844; BYTE $0xe0 // vmovups    yword [r8 + r9 - 32], ymm0
	LONG $0x117c81c4; WORD $0x0804             // vmovups    yword [r8 + r9], ymm0
	LONG $0x80e98349                           // sub    r9, -128
	WORD $0x394c; BYTE $0xca                   // cmp    rdx, r9
	JNE  LBB2_6
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JE   LBB2_13
	WORD $0xc1f6; BYTE $0x70                   // test    cl, 112
	JE   LBB2_12

LBB2_9:
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe283; BYTE $0xf0 // and    edx, -16
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0

LBB2_10:
	LONG $0x1178a1c4; WORD $0x0004 // vmovups    oword [rax + r8], xmm0
	LONG $0x10c08349               // add    r8, 16
	WORD $0x394c; BYTE $0xc2       // cmp    rdx, r8
	JNE  LBB2_10
	WORD $0x3948; BYTE $0xca       // cmp    rdx, rcx
	JE   LBB2_13

LBB2_12:
	LONG $0x001004c6         // mov    byte [rax + rdx], 0
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JNE  LBB2_12

LBB2_13:
	QUAD $0x000000a09f6ffec5             // vmovdqu    ymm3, yword [rdi + 160]
	QUAD $0x000000c0976ffec5             // vmovdqu    ymm2, yword [rdi + 192]
	QUAD $0x000000e08f6ffec5             // vmovdqu    ymm1, yword [rdi + 224]
	QUAD $0x00000100876ffec5             // vmovdqu    ymm0, yword [rdi + 256]
	QUAD $0x00000120bf6ffec5             // vmovdqu    ymm7, yword [rdi + 288]
	QUAD $0x00000140af6ffec5             // vmovdqu    ymm5, yword [rdi + 320]
	QUAD $0x00000160a76ffec5             // vmovdqu    ymm4, yword [rdi + 352]
	LONG $0x47ef65c5; BYTE $0x20         // vpxor    ymm8, ymm3, yword [rdi + 32]
	LONG $0x4fef75c5; BYTE $0x60         // vpxor    ymm9, ymm1, yword [rdi + 96]
	LONG $0x57ef6dc5; BYTE $0x40         // vpxor    ymm10, ymm2, yword [rdi + 64]
	QUAD $0x00000180b76ffec5             // vmovdqu    ymm6, yword [rdi + 384]
	QUAD $0x000000809fef7dc5             // vpxor    ymm11, ymm0, yword [rdi + 128]
	LONG $0xd43541c4; BYTE $0xc0         // vpaddq    ymm8, ymm9, ymm8
	LONG $0xd42541c4; BYTE $0xd2         // vpaddq    ymm10, ymm11, ymm10
	LONG $0x731dc1c4; WORD $0x29d0       // vpsrlq    ymm12, ymm8, 41
	LONG $0x733dc1c4; WORD $0x17f0       // vpsllq    ymm8, ymm8, 23
	LONG $0xeb3d41c4; BYTE $0xc4         // vpor    ymm8, ymm8, ymm12
	LONG $0x731dc1c4; WORD $0x29d2       // vpsrlq    ymm12, ymm10, 41
	LONG $0x732dc1c4; WORD $0x17f2       // vpsllq    ymm10, ymm10, 23
	LONG $0x45ef3dc5; BYTE $0x00         // vpxor    ymm8, ymm8, yword 0[rbp]
	LONG $0xeb2d41c4; BYTE $0xd4         // vpor    ymm10, ymm10, ymm12
	LONG $0x55ef2dc5; BYTE $0x20         // vpxor    ymm10, ymm10, yword 32[rbp]
	LONG $0xd43d41c4; BYTE $0xc9         // vpaddq    ymm9, ymm8, ymm9
	LONG $0xd42d41c4; BYTE $0xdb         // vpaddq    ymm11, ymm10, ymm11
	LONG $0x731dc1c4; WORD $0x05d1       // vpsrlq    ymm12, ymm9, 5
	LONG $0x7335c1c4; WORD $0x3bf1       // vpsllq    ymm9, ymm9, 59
	LONG $0xeb3541c4; BYTE $0xcc         // vpor    ymm9, ymm9, ymm12
	LONG $0x731dc1c4; WORD $0x05d3       // vpsrlq    ymm12, ymm11, 5
	LONG $0x7325c1c4; WORD $0x3bf3       // vpsllq    ymm11, ymm11, 59
	LONG $0xeb2541c4; BYTE $0xdc         // vpor    ymm11, ymm11, ymm12
	LONG $0xd43541c4; BYTE $0xc0         // vpaddq    ymm8, ymm9, ymm8
	LONG $0xd42541c4; BYTE $0xd2         // vpaddq    ymm10, ymm11, ymm10
	LONG $0x00fd43c4; WORD $0xd2e0       // vpermq    ymm12, ymm8, 210
	LONG $0x00fd43c4; WORD $0xd2ea       // vpermq    ymm13, ymm10, 210
	LONG $0x00fd43c4; WORD $0x6cc9       // vpermq    ymm9, ymm9, 108
	LONG $0x456f7dc5; BYTE $0x40         // vmovdqa    ymm8, yword 64[rbp]
	LONG $0x003542c4; BYTE $0xf0         // vpshufb    ymm14, ymm9, ymm8
	QUAD $0x0000e08d5a7d62c4; BYTE $0x00 // vbroadcasti128    ymm9, oword 224[rbp]
	LONG $0x002542c4; BYTE $0xd9         // vpshufb    ymm11, ymm11, ymm9
	QUAD $0x00000080956f7dc5             // vmovdqa    ymm10, yword 128[rbp]
	LONG $0x362d42c4; BYTE $0xdb         // vpermd    ymm11, ymm10, ymm11
	LONG $0xefef15c5                     // vpxor    ymm13, ymm13, ymm7
	LONG $0xe4ef1dc5                     // vpxor    ymm12, ymm12, ymm4
	LONG $0xddef25c5                     // vpxor    ymm11, ymm11, ymm5
	LONG $0xf6ef0dc5                     // vpxor    ymm14, ymm14, ymm6
	LONG $0xd41541c4; BYTE $0xec         // vpaddq    ymm13, ymm13, ymm12
	LONG $0xd42541c4; BYTE $0xde         // vpaddq    ymm11, ymm11, ymm14
	LONG $0x7305c1c4; WORD $0x39d5       // vpsrlq    ymm15, ymm13, 57
	LONG $0x7315c1c4; WORD $0x07f5       // vpsllq    ymm13, ymm13, 7
	LONG $0xeb1541c4; BYTE $0xef         // vpor    ymm13, ymm13, ymm15
	LONG $0x7305c1c4; WORD $0x39d3       // vpsrlq    ymm15, ymm11, 57
	LONG $0x7325c1c4; WORD $0x07f3       // vpsllq    ymm11, ymm11, 7
	LONG $0xeb2541c4; BYTE $0xdf         // vpor    ymm11, ymm11, ymm15
	QUAD $0x000000a0adef15c5             // vpxor    ymm13, ymm13, yword 160[rbp]
	QUAD $0x000000c09def25c5             // vpxor    ymm11, ymm11, yword 192[rbp]
	LONG $0xd41541c4; BYTE $0xe4         // vpaddq    ymm12, ymm13, ymm12
	LONG $0xd42541c4; BYTE $0xf6         // vpaddq    ymm14, ymm11, ymm14
	LONG $0x7305c1c4; WORD $0x3dd4       // vpsrlq    ymm15, ymm12, 61
	LONG $0x731dc1c4; WORD $0x03f4       // vpsllq    ymm12, ymm12, 3
	LONG $0xeb1d41c4; BYTE $0xff         // vpor    ymm15, ymm12, ymm15
	LONG $0x731dc1c4; WORD $0x3dd6       // vpsrlq    ymm12, ymm14, 61
	LONG $0x730dc1c4; WORD $0x03f6       // vpsllq    ymm14, ymm14, 3
	LONG $0xeb0d41c4; BYTE $0xf4         // vpor    ymm14, ymm14, ymm12
	LONG $0xd40541c4; BYTE $0xe5         // vpaddq    ymm12, ymm15, ymm13
	LONG $0xd40d41c4; BYTE $0xeb         // vpaddq    ymm13, ymm14, ymm11
	LONG $0x00fd43c4; WORD $0xd2dc       // vpermq    ymm11, ymm12, 210
	LONG $0x00fd43c4; WORD $0xd2e5       // vpermq    ymm12, ymm13, 210
	LONG $0x00fd43c4; WORD $0x6cef       // vpermq    ymm13, ymm15, 108
	LONG $0x001542c4; BYTE $0xe8         // vpshufb    ymm13, ymm13, ymm8
	LONG $0x000d42c4; BYTE $0xf1         // vpshufb    ymm14, ymm14, ymm9
	LONG $0x362d42c4; BYTE $0xf6         // vpermd    ymm14, ymm10, ymm14
	LONG $0x0000e0b8; BYTE $0x00         // mov    eax, 224
	MOVQ ·step(SB), CX                   // lea    rcx, [rip + _g_StepConstants]
	QUAD $0x0000e0955a7d62c4; BYTE $0x00 // vbroadcasti128    ymm10, oword 224[rbp]

LBB2_14:
	LONG $0x00fde3c4; WORD $0x4bdb // vpermq    ymm3, ymm3, 75
	LONG $0xdbd4c5c5               // vpaddq    ymm3, ymm7, ymm3
	LONG $0x00fde3c4; WORD $0x93d2 // vpermq    ymm2, ymm2, 147
	LONG $0xd2d4d5c5               // vpaddq    ymm2, ymm5, ymm2
	LONG $0x00fde3c4; WORD $0x4bc9 // vpermq    ymm1, ymm1, 75
	LONG $0xc9d4ddc5               // vpaddq    ymm1, ymm4, ymm1
	LONG $0x00fde3c4; WORD $0x93c0 // vpermq    ymm0, ymm0, 147
	LONG $0xc0d4cdc5               // vpaddq    ymm0, ymm6, ymm0
	LONG $0xe3ef1dc5               // vpxor    ymm12, ymm12, ymm3
	LONG $0xd9ef25c5               // vpxor    ymm11, ymm11, ymm1
	LONG $0xf2ef0dc5               // vpxor    ymm14, ymm14, ymm2
	LONG $0xe8ef15c5               // vpxor    ymm13, ymm13, ymm0
	LONG $0xd42541c4; BYTE $0xe4   // vpaddq    ymm12, ymm11, ymm12
	LONG $0xd41541c4; BYTE $0xf6   // vpaddq    ymm14, ymm13, ymm14
	LONG $0x7305c1c4; WORD $0x29d4 // vpsrlq    ymm15, ymm12, 41
	LONG $0x731dc1c4; WORD $0x17f4 // vpsllq    ymm12, ymm12, 23
	LONG $0xeb1d41c4; BYTE $0xe7   // vpor    ymm12, ymm12, ymm15
	LONG $0x7305c1c4; WORD $0x29d6 // vpsrlq    ymm15, ymm14, 41
	LONG $0x730dc1c4; WORD $0x17f6 // vpsllq    ymm14, ymm14, 23
	LONG $0xeb0d41c4; BYTE $0xf7   // vpor    ymm14, ymm14, ymm15
	LONG $0x64ef1dc5; WORD $0xa008 // vpxor    ymm12, ymm12, yword [rax + rcx - 96]
	LONG $0x74ef0dc5; WORD $0xc008 // vpxor    ymm14, ymm14, yword [rax + rcx - 64]
	LONG $0xd41d41c4; BYTE $0xdb   // vpaddq    ymm11, ymm12, ymm11
	LONG $0xd40d41c4; BYTE $0xed   // vpaddq    ymm13, ymm14, ymm13
	LONG $0x7305c1c4; WORD $0x05d3 // vpsrlq    ymm15, ymm11, 5
	LONG $0x7325c1c4; WORD $0x3bf3 // vpsllq    ymm11, ymm11, 59
	LONG $0xeb2541c4; BYTE $0xdf   // vpor    ymm11, ymm11, ymm15
	LONG $0x7305c1c4; WORD $0x05d5 // vpsrlq    ymm15, ymm13, 5
	LONG $0x7315c1c4; WORD $0x3bf5 // vpsllq    ymm13, ymm13, 59
	LONG $0xeb1541c4; BYTE $0xef   // vpor    ymm13, ymm13, ymm15
	LONG $0xd42541c4; BYTE $0xe4   // vpaddq    ymm12, ymm11, ymm12
	LONG $0xd41541c4; BYTE $0xf6   // vpaddq    ymm14, ymm13, ymm14
	LONG $0x00fd43c4; WORD $0xd2e4 // vpermq    ymm12, ymm12, 210
	LONG $0x00fd43c4; WORD $0xd2f6 // vpermq    ymm14, ymm14, 210
	LONG $0x00fd43c4; WORD $0x6cdb // vpermq    ymm11, ymm11, 108
	LONG $0x4d6f7dc5; BYTE $0x40   // vmovdqa    ymm9, yword 64[rbp]
	LONG $0x002542c4; BYTE $0xd9   // vpshufb    ymm11, ymm11, ymm9
	LONG $0x001542c4; BYTE $0xea   // vpshufb    ymm13, ymm13, ymm10
	QUAD $0x00000080856f7dc5       // vmovdqa    ymm8, yword 128[rbp]
	LONG $0x363d42c4; BYTE $0xed   // vpermd    ymm13, ymm8, ymm13
	LONG $0x00fde3c4; WORD $0x4bff // vpermq    ymm7, ymm7, 75
	LONG $0xffd4e5c5               // vpaddq    ymm7, ymm3, ymm7
	LONG $0x00fde3c4; WORD $0x93ed // vpermq    ymm5, ymm5, 147
	LONG $0xedd4edc5               // vpaddq    ymm5, ymm2, ymm5
	LONG $0x00fde3c4; WORD $0x4be4 // vpermq    ymm4, ymm4, 75
	LONG $0xe4d4f5c5               // vpaddq    ymm4, ymm1, ymm4
	LONG $0x00fde3c4; WORD $0x93f6 // vpermq    ymm6, ymm6, 147
	LONG $0xf6d4fdc5               // vpaddq    ymm6, ymm0, ymm6
	LONG $0xf7ef0dc5               // vpxor    ymm14, ymm14, ymm7
	LONG $0xe4ef1dc5               // vpxor    ymm12, ymm12, ymm4
	LONG $0xedef15c5               // vpxor    ymm13, ymm13, ymm5
	LONG $0xdeef25c5               // vpxor    ymm11, ymm11, ymm6
	LONG $0xd40d41c4; BYTE $0xf4   // vpaddq    ymm14, ymm14, ymm12
	LONG $0xd41541c4; BYTE $0xeb   // vpaddq    ymm13, ymm13, ymm11
	LONG $0x7305c1c4; WORD $0x39d6 // vpsrlq    ymm15, ymm14, 57
	LONG $0x730dc1c4; WORD $0x07f6 // vpsllq    ymm14, ymm14, 7
	LONG $0xeb0d41c4; BYTE $0xf7   // vpor    ymm14, ymm14, ymm15
	LONG $0x7305c1c4; WORD $0x39d5 // vpsrlq    ymm15, ymm13, 57
	LONG $0x7315c1c4; WORD $0x07f5 // vpsllq    ymm13, ymm13, 7
	LONG $0xeb1541c4; BYTE $0xef   // vpor    ymm13, ymm13, ymm15
	LONG $0x74ef0dc5; WORD $0xe008 // vpxor    ymm14, ymm14, yword [rax + rcx - 32]
	LONG $0x2cef15c5; BYTE $0x08   // vpxor    ymm13, ymm13, yword [rax + rcx]
	LONG $0xd40d41c4; BYTE $0xe4   // vpaddq    ymm12, ymm14, ymm12
	LONG $0xd41541c4; BYTE $0xdb   // vpaddq    ymm11, ymm13, ymm11
	LONG $0x7305c1c4; WORD $0x3dd4 // vpsrlq    ymm15, ymm12, 61
	LONG $0x731dc1c4; WORD $0x03f4 // vpsllq    ymm12, ymm12, 3
	LONG $0xeb1d41c4; BYTE $0xff   // vpor    ymm15, ymm12, ymm15
	LONG $0x731dc1c4; WORD $0x3dd3 // vpsrlq    ymm12, ymm11, 61
	LONG $0x7325c1c4; WORD $0x03f3 // vpsllq    ymm11, ymm11, 3
	LONG $0xeb2541c4; BYTE $0xc4   // vpor    ymm8, ymm11, ymm12
	LONG $0xd40541c4; BYTE $0xde   // vpaddq    ymm11, ymm15, ymm14
	LONG $0xd43d41c4; BYTE $0xe5   // vpaddq    ymm12, ymm8, ymm13
	LONG $0x00fd43c4; WORD $0xd2db // vpermq    ymm11, ymm11, 210
	LONG $0x00fd43c4; WORD $0xd2e4 // vpermq    ymm12, ymm12, 210
	LONG $0x00fd43c4; WORD $0x6cef // vpermq    ymm13, ymm15, 108
	LONG $0x001542c4; BYTE $0xe9   // vpshufb    ymm13, ymm13, ymm9
	LONG $0x003d42c4; BYTE $0xc2   // vpshufb    ymm8, ymm8, ymm10
	QUAD $0x000000808d6f7dc5       // vmovdqa    ymm9, yword 128[rbp]
	LONG $0x363542c4; BYTE $0xf0   // vpermd    ymm14, ymm9, ymm8
	LONG $0x80e88348               // sub    rax, -128
	LONG $0x07603d48; WORD $0x0000 // cmp    rax, 1888
	JNE  LBB2_14
	LONG $0x00fde3c4; WORD $0x4bdb // vpermq    ymm3, ymm3, 75
	LONG $0xdfd4e5c5               // vpaddq    ymm3, ymm3, ymm7
	LONG $0x00fde3c4; WORD $0x93d2 // vpermq    ymm2, ymm2, 147
	LONG $0xd5d4edc5               // vpaddq    ymm2, ymm2, ymm5
	LONG $0x00fde3c4; WORD $0x4bc9 // vpermq    ymm1, ymm1, 75
	LONG $0xccd4f5c5               // vpaddq    ymm1, ymm1, ymm4
	LONG $0xcbeff5c5               // vpxor    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0x93c0 // vpermq    ymm0, ymm0, 147
	LONG $0xc6d4fdc5               // vpaddq    ymm0, ymm0, ymm6
	LONG $0xc2effdc5               // vpxor    ymm0, ymm0, ymm2
	LONG $0xc9efa5c5               // vpxor    ymm1, ymm11, ymm1
	LONG $0xc9ef9dc5               // vpxor    ymm1, ymm12, ymm1
	LONG $0xc0ef95c5               // vpxor    ymm0, ymm13, ymm0
	LONG $0xc0ef8dc5               // vpxor    ymm0, ymm14, ymm0
	LONG $0x0e7ffec5               // vmovdqu    yword [rsi], ymm1
	LONG $0x467ffec5; BYTE $0x20   // vmovdqu    yword [rsi + 32], ymm0

	VZEROUPPER
	RET
