//go:build amd64 && !purego

// GENERATED BY goat
// EDITED BY RYUANERIN
// -- DO NOT EDIT

#include "textflag.h"

TEXT ·__lsh512_sse2_init(SB), NOSPLIT, $16
	MOVQ	ctx+0(FP), DI
	MOVQ	algtype+8(FP), SI

	MOVQ	SI, 0(DI)
	MOVQ	$0, 16(DI)

	CMPQ	SI, $64
	JEQ		LSH512_INIT_512
	CMPQ	SI, $48
	JEQ		LSH512_INIT_384
	CMPQ	SI, $32
	JEQ		LSH512_INIT_256

LSH512_INIT_224:
	MOVD	·iv224(SB), R8
	JMP		LSH512_INIT_RET

LSH512_INIT_256:
	MOVD	·iv256(SB), R8
	JMP		LSH512_INIT_RET
	
LSH512_INIT_384:
	MOVD	·iv384(SB), R8
	JMP		LSH512_INIT_RET
	
LSH512_INIT_512:
	MOVD	·iv512(SB), R8

LSH512_INIT_RET:
	MOVAPS	0x00(R8), X0
	MOVAPS	0x10(R8), X1
	MOVAPS	0x20(R8), X2
	MOVAPS	0x30(R8), X3
	MOVAPS	0x40(R8), X4
	MOVAPS	0x50(R8), X5
	MOVAPS	0x60(R8), X6
	MOVAPS	0x70(R8), X7

	MOVUPS	X0, 0x20(DI)
	MOVUPS	X1, 0x30(DI)
	MOVUPS	X2, 0x40(DI)
	MOVUPS	X3, 0x50(DI)
	MOVUPS	X4, 0x60(DI)
	MOVUPS	X5, 0x70(DI)
	MOVUPS	X6, 0x80(DI)
	MOVUPS	X7, 0x90(DI)

	RET

DATA LCDATA2<>+0x000(SB)/8, $0x97884283c938982a
DATA LCDATA2<>+0x008(SB)/8, $0xba1fca93533e2355
DATA LCDATA2<>+0x010(SB)/8, $0xc519a2e87aeb1c03
DATA LCDATA2<>+0x018(SB)/8, $0x9a0fc95462af17b1
DATA LCDATA2<>+0x020(SB)/8, $0xfc3dda8ab019a82b
DATA LCDATA2<>+0x028(SB)/8, $0x02825d079a895407
DATA LCDATA2<>+0x030(SB)/8, $0x79f2d0a7ee06a6f7
DATA LCDATA2<>+0x038(SB)/8, $0xd76d15eed9fdf5fe
DATA LCDATA2<>+0x040(SB)/8, $0x1fcac64d01d0c2c1
DATA LCDATA2<>+0x048(SB)/8, $0xd9ea5de69161790f
DATA LCDATA2<>+0x050(SB)/8, $0xdebc8b6366071fc8
DATA LCDATA2<>+0x058(SB)/8, $0xa9d91db711c6c94b
DATA LCDATA2<>+0x060(SB)/8, $0x3a18653ac9c1d427
DATA LCDATA2<>+0x068(SB)/8, $0x84df64a223dd5b09
DATA LCDATA2<>+0x070(SB)/8, $0x6cc37895f4ad9e70
DATA LCDATA2<>+0x078(SB)/8, $0x448304c8d7f3f4d5
GLOBL LCDATA2<>(SB), RODATA|NOPTR, $128

TEXT ·__lsh512_sse2_update(SB), NOSPLIT, $320-32
	MOVQ ctx+0(FP), DI
	MOVQ data_base+8(FP), SI
	MOVQ data_len+16(FP), DX
	//   data_cap+24

	// stack size: 288
	MOVQ SP, BP
	ADDQ $16, SP
	ANDQ $-16, SP
	MOVQ BP, 288(SP)
	LEAQ LCDATA2<>(SB), BP

	WORD $0x4f8b; BYTE $0x10                   // mov    ecx, dword [rdi + 16]
	LONG $0x11048d48                           // lea    rax, [rcx + rdx]
	LONG $0x00ff3d48; WORD $0x0000             // cmp    rax, 255
	JA   LBB1_4
	WORD $0xd285                               // test    edx, edx
	JLE  LBB1_28
	LONG $0x0f048d4c                           // lea    r8, [rdi + rcx]
	LONG $0xa0c08149; WORD $0x0000; BYTE $0x00 // add    r8, 160
	WORD $0xd089                               // mov    eax, edx
	LONG $0x08f88348                           // cmp    rax, 8
	JB   LBB1_3
	LONG $0x0f0c8d4c                           // lea    r9, [rdi + rcx]
	WORD $0x2949; BYTE $0xf1                   // sub    r9, rsi
	LONG $0xa0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 160
	LONG $0x20f98349                           // cmp    r9, 32
	JAE  LBB1_12

LBB1_3:
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_23:
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	WORD $0x2945; BYTE $0xcb // sub    r11d, r9d
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	LONG $0x03e38341         // and    r11d, 3
	JE   LBB1_25

LBB1_24:
	LONG $0x1cb60f42; BYTE $0x0e // movzx    ebx, byte [rsi + r9]
	LONG $0x081c8843             // mov    byte [r8 + r9], bl
	WORD $0xff49; BYTE $0xc1     // inc    r9
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_24

LBB1_25:
	LONG $0x03fa8349                           // cmp    r10, 3
	JB   LBB1_28
	LONG $0x39048d4c                           // lea    r8, [rcx + rdi]
	LONG $0xa3c08149; WORD $0x0000; BYTE $0x00 // add    r8, 163

LBB1_27:
	LONG $0x14b60f46; BYTE $0x0e   // movzx    r10d, byte [rsi + r9]
	LONG $0x08548847; BYTE $0xfd   // mov    byte [r8 + r9 - 3], r10b
	LONG $0x54b60f46; WORD $0x010e // movzx    r10d, byte [rsi + r9 + 1]
	LONG $0x08548847; BYTE $0xfe   // mov    byte [r8 + r9 - 2], r10b
	LONG $0x54b60f46; WORD $0x020e // movzx    r10d, byte [rsi + r9 + 2]
	LONG $0x08548847; BYTE $0xff   // mov    byte [r8 + r9 - 1], r10b
	LONG $0x54b60f46; WORD $0x030e // movzx    r10d, byte [rsi + r9 + 3]
	LONG $0x08148847               // mov    byte [r8 + r9], r10b
	LONG $0x04c18349               // add    r9, 4
	WORD $0x394c; BYTE $0xc8       // cmp    rax, r9
	JNE  LBB1_27

LBB1_28:
	WORD $0xd101 // add    ecx, edx
	JMP  LBB1_69

LBB1_4:
	LONG $0x6f0f44f3; WORD $0x2057             // movdqu    xmm10, oword [rdi + 32]
	LONG $0x676f0ff3; BYTE $0x30               // movdqu    xmm4, oword [rdi + 48]
	LONG $0x6f0f44f3; WORD $0x407f             // movdqu    xmm15, oword [rdi + 64]
	LONG $0x776f0ff3; BYTE $0x50               // movdqu    xmm6, oword [rdi + 80]
	LONG $0x6f0f44f3; WORD $0x606f             // movdqu    xmm13, oword [rdi + 96]
	LONG $0x6f0f44f3; WORD $0x7067             // movdqu    xmm12, oword [rdi + 112]
	QUAD $0x000080876f0f44f3; BYTE $0x00       // movdqu    xmm8, oword [rdi + 128]
	QUAD $0x00000090bf6f0ff3                   // movdqu    xmm7, oword [rdi + 144]
	WORD $0x8548; BYTE $0xc9                   // test    rcx, rcx
	JE   LBB1_44
	LONG $0x000100b8; BYTE $0x00               // mov    eax, 256
	WORD $0xc829                               // sub    eax, ecx
	WORD $0xc085                               // test    eax, eax
	JLE  LBB1_41
	LONG $0x0f0c8d4c                           // lea    r9, [rdi + rcx]
	LONG $0xa0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 160
	WORD $0xf883; BYTE $0x08                   // cmp    eax, 8
	JB   LBB1_7
	LONG $0x0f048d4c                           // lea    r8, [rdi + rcx]
	WORD $0x2949; BYTE $0xf0                   // sub    r8, rsi
	LONG $0xa0c08149; WORD $0x0000; BYTE $0x00 // add    r8, 160
	LONG $0x20f88349                           // cmp    r8, 32
	JAE  LBB1_14

LBB1_7:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB1_36:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x0149; BYTE $0xc2 // add    r10, rax
	WORD $0x8949; BYTE $0xc3 // mov    r11, rax
	LONG $0x03e38349         // and    r11, 3
	JE   LBB1_38

LBB1_37:
	LONG $0x1cb60f42; BYTE $0x06 // movzx    ebx, byte [rsi + r8]
	LONG $0x011c8843             // mov    byte [r9 + r8], bl
	WORD $0xff49; BYTE $0xc0     // inc    r8
	WORD $0xff49; BYTE $0xcb     // dec    r11
	JNE  LBB1_37

LBB1_38:
	LONG $0x03fa8349                           // cmp    r10, 3
	JB   LBB1_41
	WORD $0x0148; BYTE $0xf9                   // add    rcx, rdi
	LONG $0xa3c18148; WORD $0x0000; BYTE $0x00 // add    rcx, 163

LBB1_40:
	LONG $0x0cb60f46; BYTE $0x06   // movzx    r9d, byte [rsi + r8]
	LONG $0x014c8846; BYTE $0xfd   // mov    byte [rcx + r8 - 3], r9b
	LONG $0x4cb60f46; WORD $0x0106 // movzx    r9d, byte [rsi + r8 + 1]
	LONG $0x014c8846; BYTE $0xfe   // mov    byte [rcx + r8 - 2], r9b
	LONG $0x4cb60f46; WORD $0x0206 // movzx    r9d, byte [rsi + r8 + 2]
	LONG $0x014c8846; BYTE $0xff   // mov    byte [rcx + r8 - 1], r9b
	LONG $0x4cb60f46; WORD $0x0306 // movzx    r9d, byte [rsi + r8 + 3]
	LONG $0x010c8846               // mov    byte [rcx + r8], r9b
	LONG $0x04c08349               // add    r8, 4
	WORD $0x394c; BYTE $0xc0       // cmp    rax, r8
	JNE  LBB1_40

LBB1_41:
	QUAD $0x000000a0876f0ff3               // movdqu    xmm0, oword [rdi + 160]
	QUAD $0x000000b08f6f0ff3               // movdqu    xmm1, oword [rdi + 176]
	QUAD $0x0000c08f6f0f44f3; BYTE $0x00   // movdqu    xmm9, oword [rdi + 192]
	QUAD $0x0000d0b76f0f44f3; BYTE $0x00   // movdqu    xmm14, oword [rdi + 208]
	QUAD $0x000000e0976f0ff3               // movdqu    xmm2, oword [rdi + 224]
	QUAD $0x0000f09f6f0f44f3; BYTE $0x00   // movdqu    xmm11, oword [rdi + 240]
	QUAD $0x00000100af6f0ff3               // movdqu    xmm5, oword [rdi + 256]
	QUAD $0x000001109f6f0ff3               // movdqu    xmm3, oword [rdi + 272]
	QUAD $0x0000c024847f0f66; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xef0f4466; BYTE $0xd0           // pxor    xmm10, xmm0
	LONG $0x547f0f66; WORD $0x2024         // movdqa    oword [rsp + 32], xmm2
	LONG $0xef0f4466; BYTE $0xea           // pxor    xmm13, xmm2
	QUAD $0x000090248c7f0f66; BYTE $0x00   // movdqa    oword [rsp + 144], xmm1
	LONG $0xe1ef0f66                       // pxor    xmm4, xmm1
	QUAD $0x00a0249c7f0f4466; WORD $0x0000 // movdqa    oword [rsp + 160], xmm11
	LONG $0xef0f4566; BYTE $0xe3           // pxor    xmm12, xmm11
	QUAD $0x00b0248c7f0f4466; WORD $0x0000 // movdqa    oword [rsp + 176], xmm9
	LONG $0xef0f4566; BYTE $0xf9           // pxor    xmm15, xmm9
	LONG $0x2c7f0f66; BYTE $0x24           // movdqa    oword [rsp], xmm5
	LONG $0xef0f4466; BYTE $0xc5           // pxor    xmm8, xmm5
	LONG $0xef0f4166; BYTE $0xf6           // pxor    xmm6, xmm14
	LONG $0x5c7f0f66; WORD $0x1024         // movdqa    oword [rsp + 16], xmm3
	LONG $0xfbef0f66                       // pxor    xmm7, xmm3
	LONG $0xd40f4566; BYTE $0xd5           // paddq    xmm10, xmm13
	LONG $0xd40f4166; BYTE $0xe4           // paddq    xmm4, xmm12
	LONG $0xd40f4566; BYTE $0xf8           // paddq    xmm15, xmm8
	LONG $0xf7d40f66                       // paddq    xmm6, xmm7
	LONG $0x6f0f4166; BYTE $0xc2           // movdqa    xmm0, xmm10
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0x730f4166; WORD $0x17f2         // psllq    xmm10, 23
	LONG $0xeb0f4466; BYTE $0xd0           // por    xmm10, xmm0
	LONG $0xc46f0f66                       // movdqa    xmm0, xmm4
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0xf4730f66; BYTE $0x17           // psllq    xmm4, 23
	LONG $0xe0eb0f66                       // por    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc7           // movdqa    xmm0, xmm15
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0x730f4166; WORD $0x17f7         // psllq    xmm15, 23
	LONG $0xeb0f4466; BYTE $0xf8           // por    xmm15, xmm0
	LONG $0xc66f0f66                       // movdqa    xmm0, xmm6
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0xf6730f66; BYTE $0x17           // psllq    xmm6, 23
	LONG $0xf0eb0f66                       // por    xmm6, xmm0
	LONG $0x65ef0f66; BYTE $0x10           // pxor    xmm4, oword 16[rbp]
	LONG $0xef0f4466; WORD $0x207d         // pxor    xmm15, oword 32[rbp]
	LONG $0xd40f4466; BYTE $0xe4           // paddq    xmm12, xmm4
	LONG $0xd40f4566; BYTE $0xc7           // paddq    xmm8, xmm15
	LONG $0x6f0f4166; BYTE $0xd4           // movdqa    xmm2, xmm12
	LONG $0xd2730f66; BYTE $0x05           // psrlq    xmm2, 5
	LONG $0x6f0f4166; BYTE $0xc4           // movdqa    xmm0, xmm12
	LONG $0xf0730f66; BYTE $0x3b           // psllq    xmm0, 59
	LONG $0xc2eb0f66                       // por    xmm0, xmm2
	LONG $0x6f0f4166; BYTE $0xd8           // movdqa    xmm3, xmm8
	LONG $0xd3730f66; BYTE $0x05           // psrlq    xmm3, 5
	LONG $0x6f0f4166; BYTE $0xd0           // movdqa    xmm2, xmm8
	LONG $0xf2730f66; BYTE $0x3b           // psllq    xmm2, 59
	LONG $0xd3eb0f66                       // por    xmm2, xmm3
	LONG $0x75ef0f66; BYTE $0x30           // pxor    xmm6, oword 48[rbp]
	LONG $0xfed40f66                       // paddq    xmm7, xmm6
	LONG $0xef6f0f66                       // movdqa    xmm5, xmm7
	LONG $0xd5730f66; BYTE $0x05           // psrlq    xmm5, 5
	LONG $0xdf6f0f66                       // movdqa    xmm3, xmm7
	LONG $0xf3730f66; BYTE $0x3b           // psllq    xmm3, 59
	LONG $0xddeb0f66                       // por    xmm3, xmm5
	LONG $0xc4d40f66                       // paddq    xmm0, xmm4
	LONG $0xef0f4466; WORD $0x0055         // pxor    xmm10, oword 0[rbp]
	LONG $0xd40f4566; BYTE $0xea           // paddq    xmm13, xmm10
	LONG $0xd40f4166; BYTE $0xd7           // paddq    xmm2, xmm15
	LONG $0x6f0f4166; BYTE $0xe5           // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x05           // psrlq    xmm4, 5
	LONG $0x730f4166; WORD $0x3bf5         // psllq    xmm13, 59
	LONG $0xeb0f4466; BYTE $0xec           // por    xmm13, xmm4
	LONG $0xd40f4566; BYTE $0xd5           // paddq    xmm10, xmm13
	LONG $0xded40f66                       // paddq    xmm3, xmm6
	LONG $0xedef0f66                       // pxor    xmm5, xmm5
	LONG $0xec6d0f66                       // punpckhqdq    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xe5           // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x30           // psrlq    xmm4, 48
	LONG $0xf5730f66; BYTE $0x10           // psllq    xmm5, 16
	LONG $0xe5eb0f66                       // por    xmm4, xmm5
	LONG $0xef0f4166; BYTE $0xed           // pxor    xmm5, xmm13
	LONG $0x6f0f4166; BYTE $0xcc           // movdqa    xmm1, xmm12
	LONG $0xd1730f66; BYTE $0x25           // psrlq    xmm1, 37
	LONG $0x730f4166; WORD $0x1bf4         // psllq    xmm12, 27
	LONG $0xeb0f4466; BYTE $0xe1           // por    xmm12, xmm1
	LONG $0x6f0f4466; BYTE $0xef           // movdqa    xmm13, xmm7
	LONG $0xffef0f66                       // pxor    xmm7, xmm7
	LONG $0x6d0f4166; BYTE $0xfc           // punpckhqdq    xmm7, xmm12
	LONG $0xcf6f0f66                       // movdqa    xmm1, xmm7
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0xf7730f66; BYTE $0x10           // psllq    xmm7, 16
	LONG $0xf9eb0f66                       // por    xmm7, xmm1
	LONG $0x6f0f4166; BYTE $0xc8           // movdqa    xmm1, xmm8
	LONG $0xd1730f66; BYTE $0x3d           // psrlq    xmm1, 61
	LONG $0x730f4166; WORD $0x03f0         // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc1           // por    xmm8, xmm1
	LONG $0xc9ef0f66                       // pxor    xmm1, xmm1
	LONG $0x6d0f4166; BYTE $0xc8           // punpckhqdq    xmm1, xmm8
	LONG $0x6f0f4166; BYTE $0xf0           // movdqa    xmm6, xmm8
	LONG $0xd6730f66; BYTE $0x30           // psrlq    xmm6, 48
	LONG $0xf1730f66; BYTE $0x10           // psllq    xmm1, 16
	LONG $0xf1eb0f66                       // por    xmm6, xmm1
	LONG $0xef0f4166; BYTE $0xc8           // pxor    xmm1, xmm8
	LONG $0x6f0f4566; BYTE $0xc5           // movdqa    xmm8, xmm13
	LONG $0x730f4166; WORD $0x1dd0         // psrlq    xmm8, 29
	LONG $0x730f4166; WORD $0x23f5         // psllq    xmm13, 35
	LONG $0xeb0f4566; BYTE $0xe8           // por    xmm13, xmm8
	LONG $0xef0f4566; BYTE $0xc9           // pxor    xmm9, xmm9
	LONG $0x6d0f4566; BYTE $0xcd           // punpckhqdq    xmm9, xmm13
	LONG $0x6f0f4566; BYTE $0xc1           // movdqa    xmm8, xmm9
	LONG $0x730f4166; WORD $0x30d0         // psrlq    xmm8, 48
	LONG $0x730f4166; WORD $0x10f1         // psllq    xmm9, 16
	LONG $0xeb0f4566; BYTE $0xc8           // por    xmm9, xmm8
	LONG $0x6f0f4466; BYTE $0xc0           // movdqa    xmm8, xmm0
	LONG $0x6c0f4566; BYTE $0xc2           // punpcklqdq    xmm8, xmm10
	LONG $0x6d0f4466; BYTE $0xd0           // punpckhqdq    xmm10, xmm0
	LONG $0xc36f0f66                       // movdqa    xmm0, xmm3
	LONG $0xc26c0f66                       // punpcklqdq    xmm0, xmm2
	LONG $0xd36d0f66                       // punpckhqdq    xmm2, xmm3
	LONG $0xdf700f66; BYTE $0x4e           // pshufd    xmm3, xmm7, 78
	LONG $0x730f4166; WORD $0x08fc         // pslldq    xmm12, 8
	LONG $0xef0f4466; BYTE $0xe3           // pxor    xmm12, xmm3
	LONG $0x6c0f4166; BYTE $0xec           // punpcklqdq    xmm5, xmm12
	LONG $0x6d0f4466; BYTE $0xe4           // punpckhqdq    xmm12, xmm4
	LONG $0x700f4166; WORD $0x4ed9         // pshufd    xmm3, xmm9, 78
	LONG $0x730f4166; WORD $0x08fd         // pslldq    xmm13, 8
	LONG $0xef0f4466; BYTE $0xeb           // pxor    xmm13, xmm3
	QUAD $0x00000120bf6f0ff3               // movdqu    xmm7, oword [rdi + 288]
	LONG $0x6c0f4166; BYTE $0xcd           // punpcklqdq    xmm1, xmm13
	LONG $0x6d0f4466; BYTE $0xee           // punpckhqdq    xmm13, xmm6
	QUAD $0x000001609f6f0ff3               // movdqu    xmm3, oword [rdi + 352]
	LONG $0xc7ef0f66                       // pxor    xmm0, xmm7
	QUAD $0x0000d0249c7f0f66; BYTE $0x00   // movdqa    oword [rsp + 208], xmm3
	LONG $0xef0f4466; BYTE $0xc3           // pxor    xmm8, xmm3
	LONG $0xd40f4166; BYTE $0xc0           // paddq    xmm0, xmm8
	LONG $0xd86f0f66                       // movdqa    xmm3, xmm0
	LONG $0xd3730f66; BYTE $0x39           // psrlq    xmm3, 57
	LONG $0xf0730f66; BYTE $0x07           // psllq    xmm0, 7
	LONG $0xc3eb0f66                       // por    xmm0, xmm3
	QUAD $0x000001309f6f0ff3               // movdqu    xmm3, oword [rdi + 304]
	LONG $0x5c7f0f66; WORD $0x5024         // movdqa    oword [rsp + 80], xmm3
	LONG $0xd3ef0f66                       // pxor    xmm2, xmm3
	QUAD $0x000001709f6f0ff3               // movdqu    xmm3, oword [rdi + 368]
	LONG $0x5c7f0f66; WORD $0x6024         // movdqa    oword [rsp + 96], xmm3
	LONG $0xef0f4466; BYTE $0xd3           // pxor    xmm10, xmm3
	LONG $0xd40f4166; BYTE $0xd2           // paddq    xmm2, xmm10
	LONG $0xda6f0f66                       // movdqa    xmm3, xmm2
	LONG $0xd3730f66; BYTE $0x39           // psrlq    xmm3, 57
	LONG $0xf2730f66; BYTE $0x07           // psllq    xmm2, 7
	LONG $0xd3eb0f66                       // por    xmm2, xmm3
	QUAD $0x000001409f6f0ff3               // movdqu    xmm3, oword [rdi + 320]
	LONG $0x5c7f0f66; WORD $0x3024         // movdqa    oword [rsp + 48], xmm3
	LONG $0xcbef0f66                       // pxor    xmm1, xmm3
	QUAD $0x000001809f6f0ff3               // movdqu    xmm3, oword [rdi + 384]
	LONG $0x5c7f0f66; WORD $0x4024         // movdqa    oword [rsp + 64], xmm3
	LONG $0xebef0f66                       // pxor    xmm5, xmm3
	LONG $0xcdd40f66                       // paddq    xmm1, xmm5
	LONG $0xd96f0f66                       // movdqa    xmm3, xmm1
	LONG $0xd3730f66; BYTE $0x39           // psrlq    xmm3, 57
	LONG $0xf1730f66; BYTE $0x07           // psllq    xmm1, 7
	LONG $0xcbeb0f66                       // por    xmm1, xmm3
	QUAD $0x000001509f6f0ff3               // movdqu    xmm3, oword [rdi + 336]
	LONG $0x5c7f0f66; WORD $0x7024         // movdqa    oword [rsp + 112], xmm3
	LONG $0xef0f4466; BYTE $0xeb           // pxor    xmm13, xmm3
	QUAD $0x000001909f6f0ff3               // movdqu    xmm3, oword [rdi + 400]
	QUAD $0x000080249c7f0f66; BYTE $0x00   // movdqa    oword [rsp + 128], xmm3
	LONG $0xef0f4466; BYTE $0xe3           // pxor    xmm12, xmm3
	LONG $0xd40f4566; BYTE $0xec           // paddq    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xdd           // movdqa    xmm3, xmm13
	LONG $0xd3730f66; BYTE $0x39           // psrlq    xmm3, 57
	LONG $0x730f4166; WORD $0x07f5         // psllq    xmm13, 7
	LONG $0xeb0f4466; BYTE $0xeb           // por    xmm13, xmm3
	LONG $0x45ef0f66; BYTE $0x40           // pxor    xmm0, oword 64[rbp]
	LONG $0xd40f4466; BYTE $0xc0           // paddq    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xd8           // movdqa    xmm3, xmm8
	LONG $0xd3730f66; BYTE $0x3d           // psrlq    xmm3, 61
	LONG $0x730f4166; WORD $0x03f0         // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc3           // por    xmm8, xmm3
	LONG $0x55ef0f66; BYTE $0x50           // pxor    xmm2, oword 80[rbp]
	LONG $0xd40f4466; BYTE $0xd2           // paddq    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xda           // movdqa    xmm3, xmm10
	LONG $0xd3730f66; BYTE $0x3d           // psrlq    xmm3, 61
	LONG $0x6f0f4566; BYTE $0xda           // movdqa    xmm11, xmm10
	LONG $0x730f4166; WORD $0x03f3         // psllq    xmm11, 3
	LONG $0xeb0f4466; BYTE $0xdb           // por    xmm11, xmm3
	LONG $0x4def0f66; BYTE $0x60           // pxor    xmm1, oword 96[rbp]
	LONG $0xe9d40f66                       // paddq    xmm5, xmm1
	LONG $0xdd6f0f66                       // movdqa    xmm3, xmm5
	LONG $0xd3730f66; BYTE $0x3d           // psrlq    xmm3, 61
	LONG $0xe56f0f66                       // movdqa    xmm4, xmm5
	LONG $0xf4730f66; BYTE $0x03           // psllq    xmm4, 3
	LONG $0xe3eb0f66                       // por    xmm4, xmm3
	LONG $0xef0f4466; WORD $0x706d         // pxor    xmm13, oword 112[rbp]
	LONG $0xd40f4566; BYTE $0xe5           // paddq    xmm12, xmm13
	LONG $0x6f0f4166; BYTE $0xdc           // movdqa    xmm3, xmm12
	LONG $0xd3730f66; BYTE $0x3d           // psrlq    xmm3, 61
	LONG $0x6f0f4566; BYTE $0xcc           // movdqa    xmm9, xmm12
	LONG $0x730f4166; WORD $0x03f1         // psllq    xmm9, 3
	LONG $0xeb0f4466; BYTE $0xcb           // por    xmm9, xmm3
	LONG $0xd40f4466; BYTE $0xda           // paddq    xmm11, xmm2
	LONG $0xe1d40f66                       // paddq    xmm4, xmm1
	LONG $0xd40f4566; BYTE $0xcd           // paddq    xmm9, xmm13
	LONG $0xd2ef0f66                       // pxor    xmm2, xmm2
	LONG $0x6d0f4166; BYTE $0xd0           // punpckhqdq    xmm2, xmm8
	LONG $0xca6f0f66                       // movdqa    xmm1, xmm2
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0xf2730f66; BYTE $0x10           // psllq    xmm2, 16
	LONG $0xd1eb0f66                       // por    xmm2, xmm1
	LONG $0xd40f4166; BYTE $0xc0           // paddq    xmm0, xmm8
	LONG $0x7e0f41f3; BYTE $0xc8           // movq    xmm1, xmm8
	LONG $0xd1ef0f66                       // pxor    xmm2, xmm1
	LONG $0x6f0f4166; BYTE $0xca           // movdqa    xmm1, xmm10
	LONG $0xd1730f66; BYTE $0x1d           // psrlq    xmm1, 29
	LONG $0x730f4166; WORD $0x23f2         // psllq    xmm10, 35
	LONG $0xeb0f4466; BYTE $0xd1           // por    xmm10, xmm1
	LONG $0xef0f4566; BYTE $0xc0           // pxor    xmm8, xmm8
	LONG $0x6d0f4566; BYTE $0xc2           // punpckhqdq    xmm8, xmm10
	LONG $0x6f0f4166; BYTE $0xc8           // movdqa    xmm1, xmm8
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0x730f4166; WORD $0x10f0         // psllq    xmm8, 16
	LONG $0xeb0f4466; BYTE $0xc1           // por    xmm8, xmm1
	LONG $0xcd6f0f66                       // movdqa    xmm1, xmm5
	LONG $0xd1730f66; BYTE $0x35           // psrlq    xmm1, 53
	LONG $0xf5730f66; BYTE $0x0b           // psllq    xmm5, 11
	LONG $0xe9eb0f66                       // por    xmm5, xmm1
	LONG $0xdbef0f66                       // pxor    xmm3, xmm3
	LONG $0xdd6d0f66                       // punpckhqdq    xmm3, xmm5
	LONG $0xcb6f0f66                       // movdqa    xmm1, xmm3
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0xf3730f66; BYTE $0x10           // psllq    xmm3, 16
	LONG $0xd9eb0f66                       // por    xmm3, xmm1
	LONG $0xcd7e0ff3                       // movq    xmm1, xmm5
	LONG $0xd9ef0f66                       // pxor    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xcc           // movdqa    xmm1, xmm12
	LONG $0xd1730f66; BYTE $0x15           // psrlq    xmm1, 21
	LONG $0x730f4166; WORD $0x2bf4         // psllq    xmm12, 43
	LONG $0xeb0f4466; BYTE $0xe1           // por    xmm12, xmm1
	LONG $0xedef0f66                       // pxor    xmm5, xmm5
	LONG $0x6d0f4166; BYTE $0xec           // punpckhqdq    xmm5, xmm12
	LONG $0xcd6f0f66                       // movdqa    xmm1, xmm5
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0xf5730f66; BYTE $0x10           // psllq    xmm5, 16
	LONG $0xe9eb0f66                       // por    xmm5, xmm1
	LONG $0x6f0f4566; BYTE $0xeb           // movdqa    xmm13, xmm11
	LONG $0x6c0f4466; BYTE $0xe8           // punpcklqdq    xmm13, xmm0
	LONG $0x6d0f4166; BYTE $0xc3           // punpckhqdq    xmm0, xmm11
	LONG $0x6f0f4166; BYTE $0xc9           // movdqa    xmm1, xmm9
	LONG $0xcc6c0f66                       // punpcklqdq    xmm1, xmm4
	LONG $0x6d0f4166; BYTE $0xe1           // punpckhqdq    xmm4, xmm9
	LONG $0x700f4566; WORD $0x4ec0         // pshufd    xmm8, xmm8, 78
	LONG $0x730f4166; WORD $0x08fa         // pslldq    xmm10, 8
	LONG $0xef0f4566; BYTE $0xd0           // pxor    xmm10, xmm8
	LONG $0x6f0f4466; BYTE $0xc2           // movdqa    xmm8, xmm2
	LONG $0x6c0f4566; BYTE $0xc2           // punpcklqdq    xmm8, xmm10
	LONG $0x6d0f4466; BYTE $0xd2           // punpckhqdq    xmm10, xmm2
	LONG $0xd5700f66; BYTE $0x4e           // pshufd    xmm2, xmm5, 78
	LONG $0x730f4166; WORD $0x08fc         // pslldq    xmm12, 8
	LONG $0xef0f4466; BYTE $0xe2           // pxor    xmm12, xmm2
	LONG $0x6f0f4466; BYTE $0xfb           // movdqa    xmm15, xmm3
	LONG $0x6c0f4566; BYTE $0xfc           // punpcklqdq    xmm15, xmm12
	LONG $0x6d0f4466; BYTE $0xe3           // punpckhqdq    xmm12, xmm3
	LONG $0x0000f0b9; BYTE $0x00           // mov    ecx, 240
	MOVQ ·step(SB), R8                     // lea    r8, [rip + _g_StepConstants]
LBB1_42:
	LONG $0x700f4166; WORD $0x4ed6                     // pshufd    xmm2, xmm14, 78
	QUAD $0x0000b0249c6f0f66; BYTE $0x00               // movdqa    xmm3, oword [rsp + 176]
	LONG $0xf36f0f66                                   // movdqa    xmm6, xmm3
	LONG $0xf26d0f66                                   // punpckhqdq    xmm6, xmm2
	LONG $0xd36c0f66                                   // punpcklqdq    xmm2, xmm3
	LONG $0x5c700f66; WORD $0x1024; BYTE $0x4e         // pshufd    xmm3, oword [rsp + 16], 78
	LONG $0x2c6f0f66; BYTE $0x24                       // movdqa    xmm5, oword [rsp]
	LONG $0x6f0f4466; BYTE $0xf5                       // movdqa    xmm14, xmm5
	LONG $0x6d0f4466; BYTE $0xf3                       // punpckhqdq    xmm14, xmm3
	LONG $0xdd6c0f66                                   // punpcklqdq    xmm3, xmm5
	QUAD $0x00d0248c6f0f4466; WORD $0x0000             // movdqa    xmm9, oword [rsp + 208]
	QUAD $0x00e0248c7f0f4466; WORD $0x0000             // movdqa    oword [rsp + 224], xmm9
	LONG $0x6f0f4466; BYTE $0xdf                       // movdqa    xmm11, xmm7
	QUAD $0x0000f024bc7f0f66; BYTE $0x00               // movdqa    oword [rsp + 240], xmm7
	LONG $0x246c280f; BYTE $0x20                       // movaps    xmm5, oword [rsp + 32]
	LONG $0x246c290f; BYTE $0x10                       // movaps    oword [rsp + 16], xmm5
	QUAD $0x0000c024bc6f0f66; BYTE $0x00               // movdqa    xmm7, oword [rsp + 192]
	QUAD $0x00009024ac700f66; WORD $0x4e00             // pshufd    xmm5, oword [rsp + 144], 78
	LONG $0xd40f4166; BYTE $0xeb                       // paddq    xmm5, xmm11
	QUAD $0x0000c024ac7f0f66; BYTE $0x00               // movdqa    oword [rsp + 192], xmm5
	QUAD $0x00a0249c700f4466; WORD $0x0000; BYTE $0x4e // pshufd    xmm11, oword [rsp + 160], 78
	LONG $0xd40f4566; BYTE $0xd9                       // paddq    xmm11, xmm9
	LONG $0xcdef0f66                                   // pxor    xmm1, xmm5
	LONG $0xef0f4566; BYTE $0xeb                       // pxor    xmm13, xmm11
	LONG $0xd40f4166; BYTE $0xcd                       // paddq    xmm1, xmm13
	LONG $0x6f0f4466; BYTE $0xc9                       // movdqa    xmm9, xmm1
	LONG $0x730f4166; WORD $0x29d1                     // psrlq    xmm9, 41
	LONG $0xf1730f66; BYTE $0x17                       // psllq    xmm1, 23
	LONG $0xeb0f4166; BYTE $0xc9                       // por    xmm1, xmm9
	LONG $0x7cd40f66; WORD $0x5024                     // paddq    xmm7, oword [rsp + 80]
	QUAD $0x00009024bc7f0f66; BYTE $0x00               // movdqa    oword [rsp + 144], xmm7
	LONG $0x6c6f0f66; WORD $0x1024                     // movdqa    xmm5, oword [rsp + 16]
	LONG $0x6cd40f66; WORD $0x6024                     // paddq    xmm5, oword [rsp + 96]
	QUAD $0x0000a024ac7f0f66; BYTE $0x00               // movdqa    oword [rsp + 160], xmm5
	LONG $0xe7ef0f66                                   // pxor    xmm4, xmm7
	LONG $0xc5ef0f66                                   // pxor    xmm0, xmm5
	LONG $0xe0d40f66                                   // paddq    xmm4, xmm0
	LONG $0xec6f0f66                                   // movdqa    xmm5, xmm4
	LONG $0xf4730f66; BYTE $0x17                       // psllq    xmm4, 23
	LONG $0xd5730f66; BYTE $0x29                       // psrlq    xmm5, 41
	LONG $0xe5eb0f66                                   // por    xmm4, xmm5
	LONG $0x54d40f66; WORD $0x3024                     // paddq    xmm2, oword [rsp + 48]
	QUAD $0x0000b024947f0f66; BYTE $0x00               // movdqa    oword [rsp + 176], xmm2
	LONG $0x5cd40f66; WORD $0x4024                     // paddq    xmm3, oword [rsp + 64]
	LONG $0x1c7f0f66; BYTE $0x24                       // movdqa    oword [rsp], xmm3
	LONG $0xef0f4466; BYTE $0xfa                       // pxor    xmm15, xmm2
	LONG $0xef0f4466; BYTE $0xc3                       // pxor    xmm8, xmm3
	LONG $0xd40f4566; BYTE $0xf8                       // paddq    xmm15, xmm8
	LONG $0x6f0f4166; BYTE $0xd7                       // movdqa    xmm2, xmm15
	LONG $0xd2730f66; BYTE $0x29                       // psrlq    xmm2, 41
	LONG $0x730f4166; WORD $0x17f7                     // psllq    xmm15, 23
	LONG $0xeb0f4466; BYTE $0xfa                       // por    xmm15, xmm2
	LONG $0x74d40f66; WORD $0x7024                     // paddq    xmm6, oword [rsp + 112]
	QUAD $0x00010024b47f0f66; BYTE $0x00               // movdqa    oword [rsp + 256], xmm6
	QUAD $0x008024b4d40f4466; WORD $0x0000             // paddq    xmm14, oword [rsp + 128]
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x10         // movdqa    oword [rsp + 16], xmm14
	LONG $0xef0f4466; BYTE $0xe6                       // pxor    xmm12, xmm6
	LONG $0xef0f4566; BYTE $0xd6                       // pxor    xmm10, xmm14
	LONG $0xd40f4566; BYTE $0xe2                       // paddq    xmm12, xmm10
	LONG $0x6f0f4166; BYTE $0xd4                       // movdqa    xmm2, xmm12
	LONG $0x730f4166; WORD $0x17f4                     // psllq    xmm12, 23
	LONG $0xd2730f66; BYTE $0x29                       // psrlq    xmm2, 41
	LONG $0xeb0f4466; BYTE $0xe2                       // por    xmm12, xmm2
	LONG $0xef0f4266; WORD $0x0164; BYTE $0xa0         // pxor    xmm4, oword [rcx + r8 - 96]
	LONG $0xc4d40f66                                   // paddq    xmm0, xmm4
	LONG $0xd06f0f66                                   // movdqa    xmm2, xmm0
	LONG $0xd2730f66; BYTE $0x05                       // psrlq    xmm2, 5
	LONG $0xf86f0f66                                   // movdqa    xmm7, xmm0
	LONG $0xf7730f66; BYTE $0x3b                       // psllq    xmm7, 59
	LONG $0xfaeb0f66                                   // por    xmm7, xmm2
	LONG $0xef0f4666; WORD $0x017c; BYTE $0xb0         // pxor    xmm15, oword [rcx + r8 - 80]
	LONG $0xd40f4566; BYTE $0xc7                       // paddq    xmm8, xmm15
	LONG $0x6f0f4166; BYTE $0xd8                       // movdqa    xmm3, xmm8
	LONG $0xd3730f66; BYTE $0x05                       // psrlq    xmm3, 5
	LONG $0x6f0f4166; BYTE $0xd0                       // movdqa    xmm2, xmm8
	LONG $0xf2730f66; BYTE $0x3b                       // psllq    xmm2, 59
	LONG $0xd3eb0f66                                   // por    xmm2, xmm3
	LONG $0xef0f4666; WORD $0x0164; BYTE $0xc0         // pxor    xmm12, oword [rcx + r8 - 64]
	LONG $0xd40f4566; BYTE $0xd4                       // paddq    xmm10, xmm12
	LONG $0x6f0f4166; BYTE $0xea                       // movdqa    xmm5, xmm10
	LONG $0xd5730f66; BYTE $0x05                       // psrlq    xmm5, 5
	LONG $0x6f0f4166; BYTE $0xda                       // movdqa    xmm3, xmm10
	LONG $0xf3730f66; BYTE $0x3b                       // psllq    xmm3, 59
	LONG $0xddeb0f66                                   // por    xmm3, xmm5
	LONG $0xfcd40f66                                   // paddq    xmm7, xmm4
	LONG $0xd40f4166; BYTE $0xdc                       // paddq    xmm3, xmm12
	LONG $0xd40f4166; BYTE $0xd7                       // paddq    xmm2, xmm15
	LONG $0xef0f4266; WORD $0x014c; BYTE $0x90         // pxor    xmm1, oword [rcx + r8 - 112]
	LONG $0xd40f4466; BYTE $0xe9                       // paddq    xmm13, xmm1
	LONG $0x6f0f4166; BYTE $0xe5                       // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x05                       // psrlq    xmm4, 5
	LONG $0x730f4166; WORD $0x3bf5                     // psllq    xmm13, 59
	LONG $0xeb0f4466; BYTE $0xec                       // por    xmm13, xmm4
	LONG $0x6f0f4166; BYTE $0xed                       // movdqa    xmm5, xmm13
	LONG $0xd5730f66; BYTE $0x30                       // psrlq    xmm5, 48
	LONG $0xf4730f66; BYTE $0x10                       // psllq    xmm4, 16
	LONG $0xe5eb0f66                                   // por    xmm4, xmm5
	LONG $0x6f0f4166; BYTE $0xe8                       // movdqa    xmm5, xmm8
	LONG $0xd5730f66; BYTE $0x3d                       // psrlq    xmm5, 61
	LONG $0x730f4166; WORD $0x03f0                     // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc5                       // por    xmm8, xmm5
	LONG $0xd40f4166; BYTE $0xcd                       // paddq    xmm1, xmm13
	LONG $0x6f0f4466; BYTE $0xcf                       // movdqa    xmm9, xmm7
	LONG $0x6c0f4466; BYTE $0xc9                       // punpcklqdq    xmm9, xmm1
	LONG $0xcf6d0f66                                   // punpckhqdq    xmm1, xmm7
	LONG $0x6f0f4466; BYTE $0xe3                       // movdqa    xmm12, xmm3
	LONG $0x6c0f4466; BYTE $0xe2                       // punpcklqdq    xmm12, xmm2
	LONG $0xd36d0f66                                   // punpckhqdq    xmm2, xmm3
	LONG $0xd86f0f66                                   // movdqa    xmm3, xmm0
	LONG $0xd3730f66; BYTE $0x25                       // psrlq    xmm3, 37
	LONG $0xf0730f66; BYTE $0x1b                       // psllq    xmm0, 27
	LONG $0xd8eb0f66                                   // por    xmm3, xmm0
	LONG $0xf3700f66; BYTE $0x44                       // pshufd    xmm6, xmm3, 68
	LONG $0xdb730f66; BYTE $0x08                       // psrldq    xmm3, 8
	LONG $0xf3730f66; BYTE $0x10                       // psllq    xmm3, 16
	LONG $0xf3ef0f66                                   // pxor    xmm6, xmm3
	LONG $0xf46d0f66                                   // punpckhqdq    xmm6, xmm4
	LONG $0x6f0f4166; BYTE $0xe0                       // movdqa    xmm4, xmm8
	LONG $0xd4730f66; BYTE $0x30                       // psrlq    xmm4, 48
	LONG $0x6f0f4166; BYTE $0xf8                       // movdqa    xmm7, xmm8
	LONG $0xf7730f66; BYTE $0x10                       // psllq    xmm7, 16
	LONG $0xfceb0f66                                   // por    xmm7, xmm4
	LONG $0xd8730f66; BYTE $0x0e                       // psrldq    xmm0, 14
	LONG $0xc3eb0f66                                   // por    xmm0, xmm3
	LONG $0x6c0f4466; BYTE $0xe8                       // punpcklqdq    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xda                       // movdqa    xmm3, xmm10
	LONG $0xd3730f66; BYTE $0x1d                       // psrlq    xmm3, 29
	LONG $0x730f4166; WORD $0x23f2                     // psllq    xmm10, 35
	LONG $0xeb0f4166; BYTE $0xda                       // por    xmm3, xmm10
	LONG $0xeb700f66; BYTE $0x44                       // pshufd    xmm5, xmm3, 68
	LONG $0xdb730f66; BYTE $0x08                       // psrldq    xmm3, 8
	LONG $0xf3730f66; BYTE $0x10                       // psllq    xmm3, 16
	LONG $0x730f4166; WORD $0x0eda                     // psrldq    xmm10, 14
	LONG $0xebef0f66                                   // pxor    xmm5, xmm3
	LONG $0xeb0f4466; BYTE $0xd3                       // por    xmm10, xmm3
	LONG $0x6c0f4566; BYTE $0xc2                       // punpcklqdq    xmm8, xmm10
	LONG $0x64700f66; WORD $0x7024; BYTE $0x4e         // pshufd    xmm4, oword [rsp + 112], 78
	LONG $0x446f0f66; WORD $0x3024                     // movdqa    xmm0, oword [rsp + 48]
	LONG $0x6f0f4466; BYTE $0xf8                       // movdqa    xmm15, xmm0
	LONG $0x6d0f4466; BYTE $0xfc                       // punpckhqdq    xmm15, xmm4
	LONG $0xe06c0f66                                   // punpcklqdq    xmm4, xmm0
	LONG $0xef6d0f66                                   // punpckhqdq    xmm5, xmm7
	QUAD $0x008024b4700f4466; WORD $0x0000; BYTE $0x4e // pshufd    xmm14, oword [rsp + 128], 78
	LONG $0x446f0f66; WORD $0x4024                     // movdqa    xmm0, oword [rsp + 64]
	LONG $0x6f0f4466; BYTE $0xd0                       // movdqa    xmm10, xmm0
	LONG $0x6d0f4566; BYTE $0xd6                       // punpckhqdq    xmm10, xmm14
	LONG $0x6c0f4466; BYTE $0xf0                       // punpcklqdq    xmm14, xmm0
	LONG $0x5c700f66; WORD $0x5024; BYTE $0x4e         // pshufd    xmm3, oword [rsp + 80], 78
	LONG $0x7c700f66; WORD $0x6024; BYTE $0x4e         // pshufd    xmm7, oword [rsp + 96], 78
	QUAD $0x0000c0249cd40f66; BYTE $0x00               // paddq    xmm3, oword [rsp + 192]
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x20         // movdqa    oword [rsp + 32], xmm11
	LONG $0xd40f4166; BYTE $0xfb                       // paddq    xmm7, xmm11
	LONG $0xef0f4466; BYTE $0xe3                       // pxor    xmm12, xmm3
	QUAD $0x0000d024bc7f0f66; BYTE $0x00               // movdqa    oword [rsp + 208], xmm7
	LONG $0xef0f4466; BYTE $0xcf                       // pxor    xmm9, xmm7
	LONG $0xd40f4566; BYTE $0xe1                       // paddq    xmm12, xmm9
	LONG $0x6f0f4566; BYTE $0xdc                       // movdqa    xmm11, xmm12
	LONG $0x730f4166; WORD $0x39d3                     // psrlq    xmm11, 57
	LONG $0x730f4166; WORD $0x07f4                     // psllq    xmm12, 7
	LONG $0xeb0f4566; BYTE $0xe3                       // por    xmm12, xmm11
	QUAD $0x0000f024bc6f0f66; BYTE $0x00               // movdqa    xmm7, oword [rsp + 240]
	QUAD $0x00009024bcd40f66; BYTE $0x00               // paddq    xmm7, oword [rsp + 144]
	QUAD $0x00e0249c6f0f4466; WORD $0x0000             // movdqa    xmm11, oword [rsp + 224]
	QUAD $0x00a0249cd40f4466; WORD $0x0000             // paddq    xmm11, oword [rsp + 160]
	LONG $0x7c7f0f66; WORD $0x5024                     // movdqa    oword [rsp + 80], xmm7
	LONG $0xd7ef0f66                                   // pxor    xmm2, xmm7
	LONG $0xfb6f0f66                                   // movdqa    xmm7, xmm3
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x60         // movdqa    oword [rsp + 96], xmm11
	LONG $0xef0f4166; BYTE $0xcb                       // pxor    xmm1, xmm11
	LONG $0xd1d40f66                                   // paddq    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xda                       // movdqa    xmm11, xmm2
	LONG $0x730f4166; WORD $0x39d3                     // psrlq    xmm11, 57
	LONG $0xf2730f66; BYTE $0x07                       // psllq    xmm2, 7
	LONG $0xeb0f4166; BYTE $0xd3                       // por    xmm2, xmm11
	QUAD $0x0000b024a4d40f66; BYTE $0x00               // paddq    xmm4, oword [rsp + 176]
	LONG $0xd40f4466; WORD $0x2434                     // paddq    xmm14, oword [rsp]
	LONG $0x647f0f66; WORD $0x3024                     // movdqa    oword [rsp + 48], xmm4
	LONG $0xef0f4466; BYTE $0xc4                       // pxor    xmm8, xmm4
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x40         // movdqa    oword [rsp + 64], xmm14
	LONG $0xef0f4566; BYTE $0xee                       // pxor    xmm13, xmm14
	LONG $0xd40f4566; BYTE $0xc5                       // paddq    xmm8, xmm13
	LONG $0x6f0f4166; BYTE $0xd8                       // movdqa    xmm3, xmm8
	LONG $0xd3730f66; BYTE $0x39                       // psrlq    xmm3, 57
	LONG $0x730f4166; WORD $0x07f0                     // psllq    xmm8, 7
	LONG $0xeb0f4466; BYTE $0xc3                       // por    xmm8, xmm3
	QUAD $0x010024b46f0f4466; WORD $0x0000             // movdqa    xmm14, oword [rsp + 256]
	LONG $0xd40f4566; BYTE $0xfe                       // paddq    xmm15, xmm14
	LONG $0xd40f4466; WORD $0x2454; BYTE $0x10         // paddq    xmm10, oword [rsp + 16]
	LONG $0x7f0f4466; WORD $0x247c; BYTE $0x70         // movdqa    oword [rsp + 112], xmm15
	LONG $0xef0f4166; BYTE $0xef                       // pxor    xmm5, xmm15
	QUAD $0x008024947f0f4466; WORD $0x0000             // movdqa    oword [rsp + 128], xmm10
	LONG $0xef0f4166; BYTE $0xf2                       // pxor    xmm6, xmm10
	LONG $0xeed40f66                                   // paddq    xmm5, xmm6
	LONG $0xdd6f0f66                                   // movdqa    xmm3, xmm5
	LONG $0xf5730f66; BYTE $0x07                       // psllq    xmm5, 7
	LONG $0xef0f4666; WORD $0x0164; BYTE $0xd0         // pxor    xmm12, oword [rcx + r8 - 48]
	LONG $0xd3730f66; BYTE $0x39                       // psrlq    xmm3, 57
	LONG $0xebeb0f66                                   // por    xmm5, xmm3
	LONG $0xd40f4566; BYTE $0xcc                       // paddq    xmm9, xmm12
	LONG $0x6f0f4166; BYTE $0xd9                       // movdqa    xmm3, xmm9
	LONG $0xd3730f66; BYTE $0x3d                       // psrlq    xmm3, 61
	LONG $0x730f4166; WORD $0x03f1                     // psllq    xmm9, 3
	LONG $0xeb0f4466; BYTE $0xcb                       // por    xmm9, xmm3
	LONG $0xef0f4266; WORD $0x0154; BYTE $0xe0         // pxor    xmm2, oword [rcx + r8 - 32]
	LONG $0xcad40f66                                   // paddq    xmm1, xmm2
	LONG $0xd96f0f66                                   // movdqa    xmm3, xmm1
	LONG $0xd3730f66; BYTE $0x3d                       // psrlq    xmm3, 61
	LONG $0x6f0f4466; BYTE $0xd9                       // movdqa    xmm11, xmm1
	LONG $0x730f4166; WORD $0x03f3                     // psllq    xmm11, 3
	LONG $0xeb0f4466; BYTE $0xdb                       // por    xmm11, xmm3
	LONG $0xef0f4666; WORD $0x0144; BYTE $0xf0         // pxor    xmm8, oword [rcx + r8 - 16]
	LONG $0xd40f4566; BYTE $0xe8                       // paddq    xmm13, xmm8
	LONG $0x6f0f4166; BYTE $0xdd                       // movdqa    xmm3, xmm13
	LONG $0xd3730f66; BYTE $0x3d                       // psrlq    xmm3, 61
	LONG $0x6f0f4166; BYTE $0xe5                       // movdqa    xmm4, xmm13
	LONG $0xf4730f66; BYTE $0x03                       // psllq    xmm4, 3
	LONG $0xe3eb0f66                                   // por    xmm4, xmm3
	LONG $0xd40f4466; BYTE $0xda                       // paddq    xmm11, xmm2
	LONG $0xd40f4166; BYTE $0xe0                       // paddq    xmm4, xmm8
	LONG $0xef0f4266; WORD $0x012c                     // pxor    xmm5, oword [rcx + r8]
	LONG $0xf5d40f66                                   // paddq    xmm6, xmm5
	LONG $0xd66f0f66                                   // movdqa    xmm2, xmm6
	LONG $0xd2730f66; BYTE $0x3d                       // psrlq    xmm2, 61
	LONG $0x6f0f4466; BYTE $0xc6                       // movdqa    xmm8, xmm6
	LONG $0x730f4166; WORD $0x03f0                     // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc2                       // por    xmm8, xmm2
	LONG $0xd40f4466; BYTE $0xc5                       // paddq    xmm8, xmm5
	LONG $0xd2ef0f66                                   // pxor    xmm2, xmm2
	LONG $0x6d0f4166; BYTE $0xd1                       // punpckhqdq    xmm2, xmm9
	LONG $0xc26f0f66                                   // movdqa    xmm0, xmm2
	LONG $0xd0730f66; BYTE $0x30                       // psrlq    xmm0, 48
	LONG $0xf2730f66; BYTE $0x10                       // psllq    xmm2, 16
	LONG $0xd0eb0f66                                   // por    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                       // movdqa    xmm0, xmm13
	LONG $0xd0730f66; BYTE $0x35                       // psrlq    xmm0, 53
	LONG $0x730f4166; WORD $0x0bf5                     // psllq    xmm13, 11
	LONG $0xeb0f4466; BYTE $0xe8                       // por    xmm13, xmm0
	LONG $0xdbef0f66                                   // pxor    xmm3, xmm3
	LONG $0x6d0f4166; BYTE $0xdd                       // punpckhqdq    xmm3, xmm13
	LONG $0xc36f0f66                                   // movdqa    xmm0, xmm3
	LONG $0xf3730f66; BYTE $0x10                       // psllq    xmm3, 16
	LONG $0xd0730f66; BYTE $0x30                       // psrlq    xmm0, 48
	LONG $0xd8eb0f66                                   // por    xmm3, xmm0
	LONG $0xd40f4566; BYTE $0xe1                       // paddq    xmm12, xmm9
	LONG $0x7e0f41f3; BYTE $0xc1                       // movq    xmm0, xmm9
	LONG $0xd0ef0f66                                   // pxor    xmm2, xmm0
	LONG $0x7e0f41f3; BYTE $0xc5                       // movq    xmm0, xmm13
	LONG $0xd8ef0f66                                   // pxor    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xeb                       // movdqa    xmm13, xmm11
	LONG $0x6c0f4566; BYTE $0xec                       // punpcklqdq    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xc4                       // movdqa    xmm0, xmm12
	LONG $0x6d0f4166; BYTE $0xc3                       // punpckhqdq    xmm0, xmm11
	LONG $0x6f0f4466; BYTE $0xd1                       // movdqa    xmm10, xmm1
	LONG $0x6f0f4466; BYTE $0xc9                       // movdqa    xmm9, xmm1
	LONG $0x6f0f4166; BYTE $0xc8                       // movdqa    xmm1, xmm8
	LONG $0xcc6c0f66                                   // punpcklqdq    xmm1, xmm4
	LONG $0x6d0f4166; BYTE $0xe0                       // punpckhqdq    xmm4, xmm8
	LONG $0x730f4166; WORD $0x1dd2                     // psrlq    xmm10, 29
	LONG $0x730f4166; WORD $0x23f1                     // psllq    xmm9, 35
	LONG $0xeb0f4566; BYTE $0xd1                       // por    xmm10, xmm9
	LONG $0x6f0f4566; BYTE $0xc2                       // movdqa    xmm8, xmm10
	LONG $0x730f4166; WORD $0x08d8                     // psrldq    xmm8, 8
	LONG $0x730f4166; WORD $0x10f0                     // psllq    xmm8, 16
	LONG $0x730f4166; WORD $0x0ed9                     // psrldq    xmm9, 14
	LONG $0xeb0f4566; BYTE $0xc8                       // por    xmm9, xmm8
	LONG $0x730f4166; WORD $0x08fa                     // pslldq    xmm10, 8
	LONG $0xef0f4566; BYTE $0xd1                       // pxor    xmm10, xmm9
	LONG $0x6f0f4466; BYTE $0xc2                       // movdqa    xmm8, xmm2
	LONG $0x6c0f4566; BYTE $0xc2                       // punpcklqdq    xmm8, xmm10
	LONG $0x6d0f4466; BYTE $0xd2                       // punpckhqdq    xmm10, xmm2
	LONG $0x6f0f4466; BYTE $0xe6                       // movdqa    xmm12, xmm6
	LONG $0x730f4166; WORD $0x15d4                     // psrlq    xmm12, 21
	LONG $0xf6730f66; BYTE $0x2b                       // psllq    xmm6, 43
	LONG $0xeb0f4466; BYTE $0xe6                       // por    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd4                       // movdqa    xmm2, xmm12
	LONG $0xda730f66; BYTE $0x08                       // psrldq    xmm2, 8
	LONG $0xde730f66; BYTE $0x0e                       // psrldq    xmm6, 14
	LONG $0xf2730f66; BYTE $0x10                       // psllq    xmm2, 16
	LONG $0xf2eb0f66                                   // por    xmm6, xmm2
	LONG $0x730f4166; WORD $0x08fc                     // pslldq    xmm12, 8
	LONG $0xef0f4466; BYTE $0xe6                       // pxor    xmm12, xmm6
	LONG $0x6f0f4466; BYTE $0xfb                       // movdqa    xmm15, xmm3
	LONG $0x6c0f4566; BYTE $0xfc                       // punpcklqdq    xmm15, xmm12
	LONG $0x6d0f4466; BYTE $0xe3                       // punpckhqdq    xmm12, xmm3
	LONG $0x80e98348                                   // sub    rcx, -128
	LONG $0x70f98148; WORD $0x0007; BYTE $0x00         // cmp    rcx, 1904
	JNE  LBB1_42
	LONG $0x700f4166; WORD $0x4ede                     // pshufd    xmm3, xmm14, 78
	LONG $0xd36f0f66                                   // movdqa    xmm2, xmm3
	QUAD $0x00b0248c6f0f4466; WORD $0x0000             // movdqa    xmm9, oword [rsp + 176]
	LONG $0x6c0f4166; BYTE $0xd1                       // punpcklqdq    xmm2, xmm9
	LONG $0x6d0f4466; BYTE $0xcb                       // punpckhqdq    xmm9, xmm3
	LONG $0x6c700f66; WORD $0x1024; BYTE $0x4e         // pshufd    xmm5, oword [rsp + 16], 78
	LONG $0xdd6f0f66                                   // movdqa    xmm3, xmm5
	LONG $0x346f0f66; BYTE $0x24                       // movdqa    xmm6, oword [rsp]
	LONG $0xde6c0f66                                   // punpcklqdq    xmm3, xmm6
	LONG $0xf56d0f66                                   // punpckhqdq    xmm6, xmm5
	QUAD $0x00009024ac700f66; WORD $0x4e00             // pshufd    xmm5, oword [rsp + 144], 78
	LONG $0xfdd40f66                                   // paddq    xmm7, xmm5
	LONG $0x6f0f4466; BYTE $0xdf                       // movdqa    xmm11, xmm7
	LONG $0x7c6f0f66; WORD $0x5024                     // movdqa    xmm7, oword [rsp + 80]
	QUAD $0x0000c024bcd40f66; BYTE $0x00               // paddq    xmm7, oword [rsp + 192]
	LONG $0x54d40f66; WORD $0x3024                     // paddq    xmm2, oword [rsp + 48]
	LONG $0xd40f4466; WORD $0x244c; BYTE $0x70         // paddq    xmm9, oword [rsp + 112]
	QUAD $0x0000a024ac700f66; WORD $0x4e00             // pshufd    xmm5, oword [rsp + 160], 78
	QUAD $0x00d024b46f0f4466; WORD $0x0000             // movdqa    xmm14, oword [rsp + 208]
	LONG $0xd40f4466; BYTE $0xf5                       // paddq    xmm14, xmm5
	LONG $0x6c6f0f66; WORD $0x6024                     // movdqa    xmm5, oword [rsp + 96]
	LONG $0x6cd40f66; WORD $0x2024                     // paddq    xmm5, oword [rsp + 32]
	LONG $0x5cd40f66; WORD $0x4024                     // paddq    xmm3, oword [rsp + 64]
	QUAD $0x00008024b4d40f66; BYTE $0x00               // paddq    xmm6, oword [rsp + 128]
	LONG $0xef0f4166; BYTE $0xcb                       // pxor    xmm1, xmm11
	LONG $0xef0f4566; BYTE $0xee                       // pxor    xmm13, xmm14
	LONG $0xe7ef0f66                                   // pxor    xmm4, xmm7
	LONG $0xc5ef0f66                                   // pxor    xmm0, xmm5
	LONG $0xef0f4466; BYTE $0xfa                       // pxor    xmm15, xmm2
	LONG $0xef0f4466; BYTE $0xc3                       // pxor    xmm8, xmm3
	LONG $0xef0f4566; BYTE $0xe1                       // pxor    xmm12, xmm9
	LONG $0x6f0f4166; BYTE $0xfa                       // movdqa    xmm7, xmm10
	LONG $0xfeef0f66                                   // pxor    xmm7, xmm6
	WORD $0x0148; BYTE $0xc6                           // add    rsi, rax
	WORD $0x2948; BYTE $0xc2                           // sub    rdx, rax
	LONG $0x001047c7; WORD $0x0000; BYTE $0x00         // mov    dword [rdi + 16], 0
	LONG $0x6f0f4166; BYTE $0xf4                       // movdqa    xmm6, xmm12
	LONG $0x6f0f4466; BYTE $0xd1                       // movdqa    xmm10, xmm1
	LONG $0x6f0f4466; BYTE $0xe0                       // movdqa    xmm12, xmm0

LBB1_44:
	LONG $0x00fa8148; WORD $0x0001; BYTE $0x00 // cmp    rdx, 256
	JB   LBB1_49
	MOVQ ·step(SB), AX                         // lea    rax, [rip + _g_StepConstants]
LBB1_46:
	LONG $0x066f0ff3                       // movdqu    xmm0, oword [rsi]
	LONG $0x6f0f44f3; WORD $0x1076         // movdqu    xmm14, oword [rsi + 16]
	LONG $0x6f0f44f3; WORD $0x205e         // movdqu    xmm11, oword [rsi + 32]
	LONG $0x6e6f0ff3; BYTE $0x30           // movdqu    xmm5, oword [rsi + 48]
	LONG $0x566f0ff3; BYTE $0x40           // movdqu    xmm2, oword [rsi + 64]
	LONG $0x547f0f66; WORD $0x1024         // movdqa    oword [rsp + 16], xmm2
	LONG $0x4e6f0ff3; BYTE $0x50           // movdqu    xmm1, oword [rsi + 80]
	LONG $0x6f0f44f3; WORD $0x604e         // movdqu    xmm9, oword [rsi + 96]
	LONG $0x5e6f0ff3; BYTE $0x70           // movdqu    xmm3, oword [rsi + 112]
	QUAD $0x0000c024847f0f66; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xef0f4466; BYTE $0xd0           // pxor    xmm10, xmm0
	LONG $0xef0f4466; BYTE $0xea           // pxor    xmm13, xmm2
	QUAD $0x008024b47f0f4466; WORD $0x0000 // movdqa    oword [rsp + 128], xmm14
	LONG $0xef0f4166; BYTE $0xe6           // pxor    xmm4, xmm14
	QUAD $0x000090248c7f0f66; BYTE $0x00   // movdqa    oword [rsp + 144], xmm1
	LONG $0xef0f4466; BYTE $0xe1           // pxor    xmm12, xmm1
	QUAD $0x00a0249c7f0f4466; WORD $0x0000 // movdqa    oword [rsp + 160], xmm11
	LONG $0xef0f4566; BYTE $0xfb           // pxor    xmm15, xmm11
	QUAD $0x00b0248c7f0f4466; WORD $0x0000 // movdqa    oword [rsp + 176], xmm9
	LONG $0xef0f4566; BYTE $0xc1           // pxor    xmm8, xmm9
	LONG $0x2c7f0f66; BYTE $0x24           // movdqa    oword [rsp], xmm5
	LONG $0xf5ef0f66                       // pxor    xmm6, xmm5
	LONG $0x5c7f0f66; WORD $0x2024         // movdqa    oword [rsp + 32], xmm3
	LONG $0xfbef0f66                       // pxor    xmm7, xmm3
	LONG $0xd40f4566; BYTE $0xd5           // paddq    xmm10, xmm13
	LONG $0xd40f4166; BYTE $0xe4           // paddq    xmm4, xmm12
	LONG $0xd40f4566; BYTE $0xf8           // paddq    xmm15, xmm8
	LONG $0xf7d40f66                       // paddq    xmm6, xmm7
	LONG $0x6f0f4166; BYTE $0xc2           // movdqa    xmm0, xmm10
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0x730f4166; WORD $0x17f2         // psllq    xmm10, 23
	LONG $0xeb0f4466; BYTE $0xd0           // por    xmm10, xmm0
	LONG $0xc46f0f66                       // movdqa    xmm0, xmm4
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0xf4730f66; BYTE $0x17           // psllq    xmm4, 23
	LONG $0xe0eb0f66                       // por    xmm4, xmm0
	LONG $0x65ef0f66; BYTE $0x10           // pxor    xmm4, oword 16[rbp]
	LONG $0x6f0f4166; BYTE $0xc7           // movdqa    xmm0, xmm15
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0x730f4166; WORD $0x17f7         // psllq    xmm15, 23
	LONG $0xeb0f4466; BYTE $0xf8           // por    xmm15, xmm0
	LONG $0xef0f4466; WORD $0x207d         // pxor    xmm15, oword 32[rbp]
	LONG $0xc66f0f66                       // movdqa    xmm0, xmm6
	LONG $0xd0730f66; BYTE $0x29           // psrlq    xmm0, 41
	LONG $0xf6730f66; BYTE $0x17           // psllq    xmm6, 23
	LONG $0xf0eb0f66                       // por    xmm6, xmm0
	LONG $0xd40f4466; BYTE $0xe4           // paddq    xmm12, xmm4
	LONG $0xd40f4566; BYTE $0xc7           // paddq    xmm8, xmm15
	LONG $0x6f0f4166; BYTE $0xc4           // movdqa    xmm0, xmm12
	LONG $0xd0730f66; BYTE $0x05           // psrlq    xmm0, 5
	LONG $0x6f0f4166; BYTE $0xdc           // movdqa    xmm3, xmm12
	LONG $0xf3730f66; BYTE $0x3b           // psllq    xmm3, 59
	LONG $0xd8eb0f66                       // por    xmm3, xmm0
	LONG $0x6f0f4166; BYTE $0xc0           // movdqa    xmm0, xmm8
	LONG $0xd0730f66; BYTE $0x05           // psrlq    xmm0, 5
	LONG $0x6f0f4166; BYTE $0xd0           // movdqa    xmm2, xmm8
	LONG $0xf2730f66; BYTE $0x3b           // psllq    xmm2, 59
	LONG $0xd0eb0f66                       // por    xmm2, xmm0
	LONG $0x75ef0f66; BYTE $0x30           // pxor    xmm6, oword 48[rbp]
	LONG $0xfed40f66                       // paddq    xmm7, xmm6
	LONG $0xc76f0f66                       // movdqa    xmm0, xmm7
	LONG $0xd0730f66; BYTE $0x05           // psrlq    xmm0, 5
	LONG $0x6f0f4466; BYTE $0xdf           // movdqa    xmm11, xmm7
	LONG $0xf7730f66; BYTE $0x3b           // psllq    xmm7, 59
	LONG $0xf8eb0f66                       // por    xmm7, xmm0
	LONG $0xdcd40f66                       // paddq    xmm3, xmm4
	LONG $0xef0f4466; WORD $0x0055         // pxor    xmm10, oword 0[rbp]
	LONG $0xd40f4566; BYTE $0xea           // paddq    xmm13, xmm10
	LONG $0xd40f4166; BYTE $0xd7           // paddq    xmm2, xmm15
	LONG $0x6f0f4166; BYTE $0xe5           // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x05           // psrlq    xmm4, 5
	LONG $0x730f4166; WORD $0x3bf5         // psllq    xmm13, 59
	LONG $0xeb0f4466; BYTE $0xec           // por    xmm13, xmm4
	LONG $0xd40f4566; BYTE $0xd5           // paddq    xmm10, xmm13
	LONG $0xfed40f66                       // paddq    xmm7, xmm6
	LONG $0xc0ef0f66                       // pxor    xmm0, xmm0
	LONG $0xc46d0f66                       // punpckhqdq    xmm0, xmm4
	LONG $0x6f0f4166; BYTE $0xe5           // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x30           // psrlq    xmm4, 48
	LONG $0xf0730f66; BYTE $0x10           // psllq    xmm0, 16
	LONG $0xe0eb0f66                       // por    xmm4, xmm0
	LONG $0xef0f4166; BYTE $0xc5           // pxor    xmm0, xmm13
	LONG $0x6f0f4166; BYTE $0xcc           // movdqa    xmm1, xmm12
	LONG $0xd1730f66; BYTE $0x25           // psrlq    xmm1, 37
	LONG $0x730f4166; WORD $0x1bf4         // psllq    xmm12, 27
	LONG $0xeb0f4466; BYTE $0xe1           // por    xmm12, xmm1
	LONG $0xef0f4566; BYTE $0xc9           // pxor    xmm9, xmm9
	LONG $0x6d0f4566; BYTE $0xcc           // punpckhqdq    xmm9, xmm12
	LONG $0x6f0f4166; BYTE $0xc9           // movdqa    xmm1, xmm9
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0x730f4166; WORD $0x10f1         // psllq    xmm9, 16
	LONG $0xeb0f4466; BYTE $0xc9           // por    xmm9, xmm1
	LONG $0x6f0f4166; BYTE $0xc8           // movdqa    xmm1, xmm8
	LONG $0xd1730f66; BYTE $0x3d           // psrlq    xmm1, 61
	LONG $0x730f4166; WORD $0x03f0         // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc1           // por    xmm8, xmm1
	LONG $0xc9ef0f66                       // pxor    xmm1, xmm1
	LONG $0x6d0f4166; BYTE $0xc8           // punpckhqdq    xmm1, xmm8
	LONG $0x6f0f4166; BYTE $0xf0           // movdqa    xmm6, xmm8
	LONG $0xd6730f66; BYTE $0x30           // psrlq    xmm6, 48
	LONG $0xf1730f66; BYTE $0x10           // psllq    xmm1, 16
	LONG $0xf1eb0f66                       // por    xmm6, xmm1
	LONG $0xef0f4166; BYTE $0xc8           // pxor    xmm1, xmm8
	LONG $0x6f0f4166; BYTE $0xeb           // movdqa    xmm5, xmm11
	LONG $0xd5730f66; BYTE $0x1d           // psrlq    xmm5, 29
	LONG $0x730f4166; WORD $0x23f3         // psllq    xmm11, 35
	LONG $0xeb0f4466; BYTE $0xdd           // por    xmm11, xmm5
	LONG $0xef0f4566; BYTE $0xc0           // pxor    xmm8, xmm8
	LONG $0x6d0f4566; BYTE $0xc3           // punpckhqdq    xmm8, xmm11
	LONG $0x6f0f4166; BYTE $0xe8           // movdqa    xmm5, xmm8
	LONG $0xd5730f66; BYTE $0x30           // psrlq    xmm5, 48
	LONG $0x730f4166; WORD $0x10f0         // psllq    xmm8, 16
	LONG $0xeb0f4466; BYTE $0xc5           // por    xmm8, xmm5
	LONG $0xeb6f0f66                       // movdqa    xmm5, xmm3
	LONG $0x6c0f4166; BYTE $0xea           // punpcklqdq    xmm5, xmm10
	LONG $0x6d0f4466; BYTE $0xd3           // punpckhqdq    xmm10, xmm3
	LONG $0xdf6f0f66                       // movdqa    xmm3, xmm7
	LONG $0xda6c0f66                       // punpcklqdq    xmm3, xmm2
	LONG $0xd76d0f66                       // punpckhqdq    xmm2, xmm7
	LONG $0x700f4166; WORD $0x4ef9         // pshufd    xmm7, xmm9, 78
	LONG $0x730f4166; WORD $0x08fc         // pslldq    xmm12, 8
	LONG $0xef0f4466; BYTE $0xe7           // pxor    xmm12, xmm7
	LONG $0x6c0f4166; BYTE $0xc4           // punpcklqdq    xmm0, xmm12
	LONG $0x6d0f4466; BYTE $0xe4           // punpckhqdq    xmm12, xmm4
	LONG $0x700f4166; WORD $0x4ee0         // pshufd    xmm4, xmm8, 78
	LONG $0x730f4166; WORD $0x08fb         // pslldq    xmm11, 8
	LONG $0xef0f4466; BYTE $0xdc           // pxor    xmm11, xmm4
	QUAD $0x00000080a66f0ff3               // movdqu    xmm4, oword [rsi + 128]
	LONG $0x6c0f4166; BYTE $0xcb           // punpcklqdq    xmm1, xmm11
	LONG $0x6d0f4466; BYTE $0xde           // punpckhqdq    xmm11, xmm6
	QUAD $0x000000c0b66f0ff3               // movdqu    xmm6, oword [rsi + 192]
	QUAD $0x0000d024a47f0f66; BYTE $0x00   // movdqa    oword [rsp + 208], xmm4
	LONG $0xdcef0f66                       // pxor    xmm3, xmm4
	QUAD $0x0000f024b47f0f66; BYTE $0x00   // movdqa    oword [rsp + 240], xmm6
	LONG $0xeeef0f66                       // pxor    xmm5, xmm6
	LONG $0xddd40f66                       // paddq    xmm3, xmm5
	LONG $0xe36f0f66                       // movdqa    xmm4, xmm3
	LONG $0xd4730f66; BYTE $0x39           // psrlq    xmm4, 57
	LONG $0xf3730f66; BYTE $0x07           // psllq    xmm3, 7
	LONG $0xdceb0f66                       // por    xmm3, xmm4
	QUAD $0x00000090a66f0ff3               // movdqu    xmm4, oword [rsi + 144]
	LONG $0x647f0f66; WORD $0x5024         // movdqa    oword [rsp + 80], xmm4
	LONG $0xd4ef0f66                       // pxor    xmm2, xmm4
	QUAD $0x000000d0a66f0ff3               // movdqu    xmm4, oword [rsi + 208]
	LONG $0x647f0f66; WORD $0x6024         // movdqa    oword [rsp + 96], xmm4
	LONG $0xef0f4466; BYTE $0xd4           // pxor    xmm10, xmm4
	LONG $0xd40f4166; BYTE $0xd2           // paddq    xmm2, xmm10
	LONG $0xe26f0f66                       // movdqa    xmm4, xmm2
	LONG $0xd4730f66; BYTE $0x39           // psrlq    xmm4, 57
	LONG $0xf2730f66; BYTE $0x07           // psllq    xmm2, 7
	LONG $0xd4eb0f66                       // por    xmm2, xmm4
	QUAD $0x000000a0a66f0ff3               // movdqu    xmm4, oword [rsi + 160]
	LONG $0x647f0f66; WORD $0x3024         // movdqa    oword [rsp + 48], xmm4
	LONG $0xccef0f66                       // pxor    xmm1, xmm4
	QUAD $0x000000e0a66f0ff3               // movdqu    xmm4, oword [rsi + 224]
	LONG $0x647f0f66; WORD $0x4024         // movdqa    oword [rsp + 64], xmm4
	LONG $0xc4ef0f66                       // pxor    xmm0, xmm4
	LONG $0xc8d40f66                       // paddq    xmm1, xmm0
	LONG $0xe16f0f66                       // movdqa    xmm4, xmm1
	LONG $0xd4730f66; BYTE $0x39           // psrlq    xmm4, 57
	LONG $0xf1730f66; BYTE $0x07           // psllq    xmm1, 7
	LONG $0xcceb0f66                       // por    xmm1, xmm4
	QUAD $0x000000b0a66f0ff3               // movdqu    xmm4, oword [rsi + 176]
	QUAD $0x0000e024a47f0f66; BYTE $0x00   // movdqa    oword [rsp + 224], xmm4
	LONG $0xef0f4466; BYTE $0xdc           // pxor    xmm11, xmm4
	QUAD $0x000000f0a66f0ff3               // movdqu    xmm4, oword [rsi + 240]
	LONG $0x647f0f66; WORD $0x7024         // movdqa    oword [rsp + 112], xmm4
	LONG $0xef0f4466; BYTE $0xe4           // pxor    xmm12, xmm4
	LONG $0xd40f4566; BYTE $0xdc           // paddq    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xe3           // movdqa    xmm4, xmm11
	LONG $0xd4730f66; BYTE $0x39           // psrlq    xmm4, 57
	LONG $0x730f4166; WORD $0x07f3         // psllq    xmm11, 7
	LONG $0xeb0f4466; BYTE $0xdc           // por    xmm11, xmm4
	LONG $0x5def0f66; BYTE $0x40           // pxor    xmm3, oword 64[rbp]
	LONG $0xebd40f66                       // paddq    xmm5, xmm3
	LONG $0xe56f0f66                       // movdqa    xmm4, xmm5
	LONG $0xd4730f66; BYTE $0x3d           // psrlq    xmm4, 61
	LONG $0xf5730f66; BYTE $0x03           // psllq    xmm5, 3
	LONG $0xeceb0f66                       // por    xmm5, xmm4
	LONG $0x55ef0f66; BYTE $0x50           // pxor    xmm2, oword 80[rbp]
	LONG $0xd40f4466; BYTE $0xd2           // paddq    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xe2           // movdqa    xmm4, xmm10
	LONG $0xd4730f66; BYTE $0x3d           // psrlq    xmm4, 61
	LONG $0x6f0f4166; BYTE $0xf2           // movdqa    xmm6, xmm10
	LONG $0xf6730f66; BYTE $0x03           // psllq    xmm6, 3
	LONG $0xf4eb0f66                       // por    xmm6, xmm4
	LONG $0x4def0f66; BYTE $0x60           // pxor    xmm1, oword 96[rbp]
	LONG $0xc1d40f66                       // paddq    xmm0, xmm1
	LONG $0x6f0f4466; BYTE $0xc0           // movdqa    xmm8, xmm0
	LONG $0x730f4166; WORD $0x3dd0         // psrlq    xmm8, 61
	LONG $0xe06f0f66                       // movdqa    xmm4, xmm0
	LONG $0xf4730f66; BYTE $0x03           // psllq    xmm4, 3
	LONG $0xeb0f4166; BYTE $0xe0           // por    xmm4, xmm8
	LONG $0xef0f4466; WORD $0x705d         // pxor    xmm11, oword 112[rbp]
	LONG $0xd40f4566; BYTE $0xe3           // paddq    xmm12, xmm11
	LONG $0x6f0f4566; BYTE $0xfc           // movdqa    xmm15, xmm12
	LONG $0x730f4166; WORD $0x3dd7         // psrlq    xmm15, 61
	LONG $0x6f0f4566; BYTE $0xc4           // movdqa    xmm8, xmm12
	LONG $0x730f4166; WORD $0x03f0         // psllq    xmm8, 3
	LONG $0xeb0f4566; BYTE $0xc7           // por    xmm8, xmm15
	LONG $0xf2d40f66                       // paddq    xmm6, xmm2
	LONG $0xe1d40f66                       // paddq    xmm4, xmm1
	LONG $0xd40f4566; BYTE $0xc3           // paddq    xmm8, xmm11
	LONG $0xffef0f66                       // pxor    xmm7, xmm7
	LONG $0xfd6d0f66                       // punpckhqdq    xmm7, xmm5
	LONG $0xcf6f0f66                       // movdqa    xmm1, xmm7
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0xf7730f66; BYTE $0x10           // psllq    xmm7, 16
	LONG $0xf9eb0f66                       // por    xmm7, xmm1
	LONG $0xddd40f66                       // paddq    xmm3, xmm5
	LONG $0xcd7e0ff3                       // movq    xmm1, xmm5
	LONG $0xf9ef0f66                       // pxor    xmm7, xmm1
	LONG $0x6f0f4166; BYTE $0xca           // movdqa    xmm1, xmm10
	LONG $0xd1730f66; BYTE $0x1d           // psrlq    xmm1, 29
	LONG $0x730f4166; WORD $0x23f2         // psllq    xmm10, 35
	LONG $0xeb0f4466; BYTE $0xd1           // por    xmm10, xmm1
	LONG $0xef0f4566; BYTE $0xff           // pxor    xmm15, xmm15
	LONG $0x6d0f4566; BYTE $0xfa           // punpckhqdq    xmm15, xmm10
	LONG $0x6f0f4166; BYTE $0xcf           // movdqa    xmm1, xmm15
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0x730f4166; WORD $0x10f7         // psllq    xmm15, 16
	LONG $0xeb0f4466; BYTE $0xf9           // por    xmm15, xmm1
	LONG $0xc86f0f66                       // movdqa    xmm1, xmm0
	LONG $0xd1730f66; BYTE $0x35           // psrlq    xmm1, 53
	LONG $0xf0730f66; BYTE $0x0b           // psllq    xmm0, 11
	LONG $0xc1eb0f66                       // por    xmm0, xmm1
	LONG $0xedef0f66                       // pxor    xmm5, xmm5
	LONG $0xe86d0f66                       // punpckhqdq    xmm5, xmm0
	LONG $0xcd6f0f66                       // movdqa    xmm1, xmm5
	LONG $0xd1730f66; BYTE $0x30           // psrlq    xmm1, 48
	LONG $0xf5730f66; BYTE $0x10           // psllq    xmm5, 16
	LONG $0xe9eb0f66                       // por    xmm5, xmm1
	LONG $0xc07e0ff3                       // movq    xmm0, xmm0
	LONG $0xe8ef0f66                       // pxor    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc4           // movdqa    xmm0, xmm12
	LONG $0xd0730f66; BYTE $0x15           // psrlq    xmm0, 21
	LONG $0x730f4166; WORD $0x2bf4         // psllq    xmm12, 43
	LONG $0xeb0f4466; BYTE $0xe0           // por    xmm12, xmm0
	LONG $0xd2ef0f66                       // pxor    xmm2, xmm2
	LONG $0x6d0f4166; BYTE $0xd4           // punpckhqdq    xmm2, xmm12
	LONG $0xc26f0f66                       // movdqa    xmm0, xmm2
	LONG $0xd0730f66; BYTE $0x30           // psrlq    xmm0, 48
	LONG $0xf2730f66; BYTE $0x10           // psllq    xmm2, 16
	LONG $0xd0eb0f66                       // por    xmm2, xmm0
	LONG $0x6f0f4466; BYTE $0xee           // movdqa    xmm13, xmm6
	LONG $0x6c0f4466; BYTE $0xeb           // punpcklqdq    xmm13, xmm3
	LONG $0xde6d0f66                       // punpckhqdq    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xd8           // movdqa    xmm11, xmm8
	LONG $0x6c0f4466; BYTE $0xdc           // punpcklqdq    xmm11, xmm4
	LONG $0x6d0f4166; BYTE $0xe0           // punpckhqdq    xmm4, xmm8
	LONG $0x700f4566; WORD $0x4ec7         // pshufd    xmm8, xmm15, 78
	LONG $0x730f4166; WORD $0x08fa         // pslldq    xmm10, 8
	LONG $0xef0f4566; BYTE $0xd0           // pxor    xmm10, xmm8
	LONG $0x6f0f4466; BYTE $0xc7           // movdqa    xmm8, xmm7
	LONG $0x6c0f4566; BYTE $0xc2           // punpcklqdq    xmm8, xmm10
	LONG $0x6d0f4466; BYTE $0xd7           // punpckhqdq    xmm10, xmm7
	LONG $0xd2700f66; BYTE $0x4e           // pshufd    xmm2, xmm2, 78
	LONG $0x730f4166; WORD $0x08fc         // pslldq    xmm12, 8
	LONG $0xef0f4466; BYTE $0xe2           // pxor    xmm12, xmm2
	LONG $0x6f0f4466; BYTE $0xfd           // movdqa    xmm15, xmm5
	LONG $0x6c0f4566; BYTE $0xfc           // punpcklqdq    xmm15, xmm12
	LONG $0x6d0f4466; BYTE $0xe5           // punpckhqdq    xmm12, xmm5
	LONG $0x0000f0b9; BYTE $0x00           // mov    ecx, 240

LBB1_47:
	LONG $0x14700f66; WORD $0x4e24                     // pshufd    xmm2, oword [rsp], 78
	QUAD $0x0000a024846f0f66; BYTE $0x00               // movdqa    xmm0, oword [rsp + 160]
	LONG $0xc86f0f66                                   // movdqa    xmm1, xmm0
	LONG $0xca6d0f66                                   // punpckhqdq    xmm1, xmm2
	LONG $0xd06c0f66                                   // punpcklqdq    xmm2, xmm0
	LONG $0x6c700f66; WORD $0x2024; BYTE $0x4e         // pshufd    xmm5, oword [rsp + 32], 78
	QUAD $0x0000b024846f0f66; BYTE $0x00               // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                       // movdqa    xmm9, xmm0
	LONG $0x6d0f4466; BYTE $0xcd                       // punpckhqdq    xmm9, xmm5
	LONG $0xe86c0f66                                   // punpcklqdq    xmm5, xmm0
	QUAD $0x0000f024846f0f66; BYTE $0x00               // movdqa    xmm0, oword [rsp + 240]
	QUAD $0x00010024847f0f66; BYTE $0x00               // movdqa    oword [rsp + 256], xmm0
	QUAD $0x00d024b46f0f4466; WORD $0x0000             // movdqa    xmm14, oword [rsp + 208]
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x20         // movdqa    oword [rsp + 32], xmm14
	LONG $0x2474280f; BYTE $0x10                       // movaps    xmm6, oword [rsp + 16]
	LONG $0x2434290f                                   // movaps    oword [rsp], xmm6
	QUAD $0x0000c024bc6f0f66; BYTE $0x00               // movdqa    xmm7, oword [rsp + 192]
	QUAD $0x00008024b4700f66; WORD $0x4e00             // pshufd    xmm6, oword [rsp + 128], 78
	LONG $0xd40f4166; BYTE $0xf6                       // paddq    xmm6, xmm14
	QUAD $0x0000c024b47f0f66; BYTE $0x00               // movdqa    oword [rsp + 192], xmm6
	QUAD $0x009024b4700f4466; WORD $0x0000; BYTE $0x4e // pshufd    xmm14, oword [rsp + 144], 78
	LONG $0xd40f4466; BYTE $0xf0                       // paddq    xmm14, xmm0
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x10         // movdqa    oword [rsp + 16], xmm14
	LONG $0xef0f4466; BYTE $0xde                       // pxor    xmm11, xmm6
	LONG $0xef0f4566; BYTE $0xee                       // pxor    xmm13, xmm14
	LONG $0xd40f4566; BYTE $0xdd                       // paddq    xmm11, xmm13
	LONG $0x6f0f4166; BYTE $0xc3                       // movdqa    xmm0, xmm11
	LONG $0xd0730f66; BYTE $0x29                       // psrlq    xmm0, 41
	LONG $0x730f4166; WORD $0x17f3                     // psllq    xmm11, 23
	LONG $0xeb0f4466; BYTE $0xd8                       // por    xmm11, xmm0
	LONG $0x7cd40f66; WORD $0x5024                     // paddq    xmm7, oword [rsp + 80]
	QUAD $0x00008024bc7f0f66; BYTE $0x00               // movdqa    oword [rsp + 128], xmm7
	LONG $0x046f0f66; BYTE $0x24                       // movdqa    xmm0, oword [rsp]
	LONG $0x44d40f66; WORD $0x6024                     // paddq    xmm0, oword [rsp + 96]
	QUAD $0x00009024847f0f66; BYTE $0x00               // movdqa    oword [rsp + 144], xmm0
	LONG $0xe7ef0f66                                   // pxor    xmm4, xmm7
	LONG $0xd8ef0f66                                   // pxor    xmm3, xmm0
	LONG $0xe3d40f66                                   // paddq    xmm4, xmm3
	LONG $0xc46f0f66                                   // movdqa    xmm0, xmm4
	LONG $0xf4730f66; BYTE $0x17                       // psllq    xmm4, 23
	LONG $0xd0730f66; BYTE $0x29                       // psrlq    xmm0, 41
	LONG $0xe0eb0f66                                   // por    xmm4, xmm0
	LONG $0x54d40f66; WORD $0x3024                     // paddq    xmm2, oword [rsp + 48]
	QUAD $0x0000a024947f0f66; BYTE $0x00               // movdqa    oword [rsp + 160], xmm2
	LONG $0x6cd40f66; WORD $0x4024                     // paddq    xmm5, oword [rsp + 64]
	QUAD $0x0000b024ac7f0f66; BYTE $0x00               // movdqa    oword [rsp + 176], xmm5
	LONG $0xef0f4466; BYTE $0xfa                       // pxor    xmm15, xmm2
	LONG $0xef0f4466; BYTE $0xc5                       // pxor    xmm8, xmm5
	LONG $0xd40f4566; BYTE $0xf8                       // paddq    xmm15, xmm8
	LONG $0x6f0f4166; BYTE $0xc7                       // movdqa    xmm0, xmm15
	LONG $0xd0730f66; BYTE $0x29                       // psrlq    xmm0, 41
	LONG $0x730f4166; WORD $0x17f7                     // psllq    xmm15, 23
	LONG $0xeb0f4466; BYTE $0xf8                       // por    xmm15, xmm0
	QUAD $0x00e024b46f0f4466; WORD $0x0000             // movdqa    xmm14, oword [rsp + 224]
	LONG $0xd40f4166; BYTE $0xce                       // paddq    xmm1, xmm14
	LONG $0x0c7f0f66; BYTE $0x24                       // movdqa    oword [rsp], xmm1
	LONG $0xd40f4466; WORD $0x244c; BYTE $0x70         // paddq    xmm9, oword [rsp + 112]
	LONG $0xef0f4466; BYTE $0xe1                       // pxor    xmm12, xmm1
	LONG $0xef0f4566; BYTE $0xd1                       // pxor    xmm10, xmm9
	LONG $0xd40f4566; BYTE $0xe2                       // paddq    xmm12, xmm10
	LONG $0x6f0f4166; BYTE $0xc4                       // movdqa    xmm0, xmm12
	LONG $0x730f4166; WORD $0x17f4                     // psllq    xmm12, 23
	LONG $0xd0730f66; BYTE $0x29                       // psrlq    xmm0, 41
	LONG $0xeb0f4466; BYTE $0xe0                       // por    xmm12, xmm0
	LONG $0x64ef0f66; WORD $0xa001                     // pxor    xmm4, oword [rcx + rax - 96]
	LONG $0xdcd40f66                                   // paddq    xmm3, xmm4
	LONG $0xc36f0f66                                   // movdqa    xmm0, xmm3
	LONG $0xd0730f66; BYTE $0x05                       // psrlq    xmm0, 5
	LONG $0xf36f0f66                                   // movdqa    xmm6, xmm3
	LONG $0xf6730f66; BYTE $0x3b                       // psllq    xmm6, 59
	LONG $0xf0eb0f66                                   // por    xmm6, xmm0
	LONG $0xef0f4466; WORD $0x017c; BYTE $0xb0         // pxor    xmm15, oword [rcx + rax - 80]
	LONG $0xd40f4566; BYTE $0xc7                       // paddq    xmm8, xmm15
	LONG $0x6f0f4166; BYTE $0xc0                       // movdqa    xmm0, xmm8
	LONG $0xd0730f66; BYTE $0x05                       // psrlq    xmm0, 5
	LONG $0x6f0f4166; BYTE $0xd0                       // movdqa    xmm2, xmm8
	LONG $0xf2730f66; BYTE $0x3b                       // psllq    xmm2, 59
	LONG $0xd0eb0f66                                   // por    xmm2, xmm0
	LONG $0xef0f4466; WORD $0x0164; BYTE $0xc0         // pxor    xmm12, oword [rcx + rax - 64]
	LONG $0xd40f4566; BYTE $0xd4                       // paddq    xmm10, xmm12
	LONG $0x6f0f4166; BYTE $0xc2                       // movdqa    xmm0, xmm10
	LONG $0xd0730f66; BYTE $0x05                       // psrlq    xmm0, 5
	LONG $0x6f0f4166; BYTE $0xea                       // movdqa    xmm5, xmm10
	LONG $0xf5730f66; BYTE $0x3b                       // psllq    xmm5, 59
	LONG $0xe8eb0f66                                   // por    xmm5, xmm0
	LONG $0xf4d40f66                                   // paddq    xmm6, xmm4
	LONG $0xd40f4166; BYTE $0xec                       // paddq    xmm5, xmm12
	LONG $0xd40f4166; BYTE $0xd7                       // paddq    xmm2, xmm15
	LONG $0xef0f4466; WORD $0x015c; BYTE $0x90         // pxor    xmm11, oword [rcx + rax - 112]
	LONG $0xd40f4566; BYTE $0xeb                       // paddq    xmm13, xmm11
	LONG $0x6f0f4166; BYTE $0xe5                       // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x05                       // psrlq    xmm4, 5
	LONG $0x730f4166; WORD $0x3bf5                     // psllq    xmm13, 59
	LONG $0xeb0f4466; BYTE $0xec                       // por    xmm13, xmm4
	LONG $0x6f0f4166; BYTE $0xc5                       // movdqa    xmm0, xmm13
	LONG $0xd0730f66; BYTE $0x30                       // psrlq    xmm0, 48
	LONG $0xf4730f66; BYTE $0x10                       // psllq    xmm4, 16
	LONG $0xe0eb0f66                                   // por    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc0                       // movdqa    xmm0, xmm8
	LONG $0xd0730f66; BYTE $0x3d                       // psrlq    xmm0, 61
	LONG $0x730f4166; WORD $0x03f0                     // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc0                       // por    xmm8, xmm0
	LONG $0xd40f4566; BYTE $0xdd                       // paddq    xmm11, xmm13
	LONG $0xfe6f0f66                                   // movdqa    xmm7, xmm6
	LONG $0x6c0f4166; BYTE $0xfb                       // punpcklqdq    xmm7, xmm11
	LONG $0x6d0f4466; BYTE $0xde                       // punpckhqdq    xmm11, xmm6
	LONG $0x6f0f4466; BYTE $0xe5                       // movdqa    xmm12, xmm5
	LONG $0x6c0f4466; BYTE $0xe2                       // punpcklqdq    xmm12, xmm2
	LONG $0xd56d0f66                                   // punpckhqdq    xmm2, xmm5
	LONG $0xc36f0f66                                   // movdqa    xmm0, xmm3
	LONG $0xd0730f66; BYTE $0x25                       // psrlq    xmm0, 37
	LONG $0xf3730f66; BYTE $0x1b                       // psllq    xmm3, 27
	LONG $0xc3eb0f66                                   // por    xmm0, xmm3
	LONG $0x700f4466; WORD $0x44f8                     // pshufd    xmm15, xmm0, 68
	LONG $0xd8730f66; BYTE $0x08                       // psrldq    xmm0, 8
	LONG $0xf0730f66; BYTE $0x10                       // psllq    xmm0, 16
	LONG $0xef0f4466; BYTE $0xf8                       // pxor    xmm15, xmm0
	LONG $0x6d0f4466; BYTE $0xfc                       // punpckhqdq    xmm15, xmm4
	LONG $0x6f0f4166; BYTE $0xe0                       // movdqa    xmm4, xmm8
	LONG $0xd4730f66; BYTE $0x30                       // psrlq    xmm4, 48
	LONG $0x6f0f4166; BYTE $0xe8                       // movdqa    xmm5, xmm8
	LONG $0xf5730f66; BYTE $0x10                       // psllq    xmm5, 16
	LONG $0xeceb0f66                                   // por    xmm5, xmm4
	LONG $0xdb730f66; BYTE $0x0e                       // psrldq    xmm3, 14
	LONG $0xd8eb0f66                                   // por    xmm3, xmm0
	LONG $0x6c0f4466; BYTE $0xeb                       // punpcklqdq    xmm13, xmm3
	LONG $0x6f0f4166; BYTE $0xc2                       // movdqa    xmm0, xmm10
	LONG $0xd0730f66; BYTE $0x1d                       // psrlq    xmm0, 29
	LONG $0x730f4166; WORD $0x23f2                     // psllq    xmm10, 35
	LONG $0xeb0f4166; BYTE $0xc2                       // por    xmm0, xmm10
	LONG $0xd8700f66; BYTE $0x44                       // pshufd    xmm3, xmm0, 68
	LONG $0xd8730f66; BYTE $0x08                       // psrldq    xmm0, 8
	LONG $0xf0730f66; BYTE $0x10                       // psllq    xmm0, 16
	LONG $0x730f4166; WORD $0x0eda                     // psrldq    xmm10, 14
	LONG $0xd8ef0f66                                   // pxor    xmm3, xmm0
	LONG $0xeb0f4466; BYTE $0xd0                       // por    xmm10, xmm0
	LONG $0x6c0f4566; BYTE $0xc2                       // punpcklqdq    xmm8, xmm10
	LONG $0x700f4166; WORD $0x4ee6                     // pshufd    xmm4, xmm14, 78
	LONG $0x446f0f66; WORD $0x3024                     // movdqa    xmm0, oword [rsp + 48]
	LONG $0xc86f0f66                                   // movdqa    xmm1, xmm0
	LONG $0xcc6d0f66                                   // punpckhqdq    xmm1, xmm4
	LONG $0xe06c0f66                                   // punpcklqdq    xmm4, xmm0
	LONG $0xdd6d0f66                                   // punpckhqdq    xmm3, xmm5
	LONG $0x6c700f66; WORD $0x7024; BYTE $0x4e         // pshufd    xmm5, oword [rsp + 112], 78
	LONG $0x446f0f66; WORD $0x4024                     // movdqa    xmm0, oword [rsp + 64]
	LONG $0x6f0f4466; BYTE $0xd0                       // movdqa    xmm10, xmm0
	LONG $0x6d0f4466; BYTE $0xd5                       // punpckhqdq    xmm10, xmm5
	LONG $0xe86c0f66                                   // punpcklqdq    xmm5, xmm0
	LONG $0x74700f66; WORD $0x5024; BYTE $0x4e         // pshufd    xmm6, oword [rsp + 80], 78
	QUAD $0x4e602474700f4466                           // pshufd    xmm14, oword [rsp + 96], 78
	QUAD $0x0000c024b4d40f66; BYTE $0x00               // paddq    xmm6, oword [rsp + 192]
	LONG $0xd40f4466; WORD $0x2474; BYTE $0x10         // paddq    xmm14, oword [rsp + 16]
	QUAD $0x0000d024b47f0f66; BYTE $0x00               // movdqa    oword [rsp + 208], xmm6
	LONG $0xef0f4466; BYTE $0xe6                       // pxor    xmm12, xmm6
	QUAD $0x00f024b47f0f4466; WORD $0x0000             // movdqa    oword [rsp + 240], xmm14
	LONG $0xef0f4166; BYTE $0xfe                       // pxor    xmm7, xmm14
	LONG $0xd40f4466; BYTE $0xe7                       // paddq    xmm12, xmm7
	LONG $0x6f0f4166; BYTE $0xc4                       // movdqa    xmm0, xmm12
	LONG $0xd0730f66; BYTE $0x39                       // psrlq    xmm0, 57
	LONG $0x730f4166; WORD $0x07f4                     // psllq    xmm12, 7
	LONG $0xeb0f4466; BYTE $0xe0                       // por    xmm12, xmm0
	LONG $0x746f0f66; WORD $0x2024                     // movdqa    xmm6, oword [rsp + 32]
	QUAD $0x00008024b4d40f66; BYTE $0x00               // paddq    xmm6, oword [rsp + 128]
	QUAD $0x00010024846f0f66; BYTE $0x00               // movdqa    xmm0, oword [rsp + 256]
	QUAD $0x0000902484d40f66; BYTE $0x00               // paddq    xmm0, oword [rsp + 144]
	LONG $0x747f0f66; WORD $0x5024                     // movdqa    oword [rsp + 80], xmm6
	LONG $0xd6ef0f66                                   // pxor    xmm2, xmm6
	LONG $0x447f0f66; WORD $0x6024                     // movdqa    oword [rsp + 96], xmm0
	LONG $0xef0f4466; BYTE $0xd8                       // pxor    xmm11, xmm0
	LONG $0xd40f4166; BYTE $0xd3                       // paddq    xmm2, xmm11
	LONG $0xc26f0f66                                   // movdqa    xmm0, xmm2
	LONG $0xd0730f66; BYTE $0x39                       // psrlq    xmm0, 57
	LONG $0xf2730f66; BYTE $0x07                       // psllq    xmm2, 7
	LONG $0xd0eb0f66                                   // por    xmm2, xmm0
	QUAD $0x0000a024a4d40f66; BYTE $0x00               // paddq    xmm4, oword [rsp + 160]
	QUAD $0x0000b024acd40f66; BYTE $0x00               // paddq    xmm5, oword [rsp + 176]
	LONG $0x647f0f66; WORD $0x3024                     // movdqa    oword [rsp + 48], xmm4
	LONG $0xef0f4466; BYTE $0xc4                       // pxor    xmm8, xmm4
	LONG $0x6c7f0f66; WORD $0x4024                     // movdqa    oword [rsp + 64], xmm5
	LONG $0xef0f4466; BYTE $0xed                       // pxor    xmm13, xmm5
	LONG $0xd40f4566; BYTE $0xc5                       // paddq    xmm8, xmm13
	LONG $0x6f0f4166; BYTE $0xc0                       // movdqa    xmm0, xmm8
	LONG $0xd0730f66; BYTE $0x39                       // psrlq    xmm0, 57
	LONG $0x730f4166; WORD $0x07f0                     // psllq    xmm8, 7
	LONG $0xeb0f4466; BYTE $0xc0                       // por    xmm8, xmm0
	LONG $0x0cd40f66; BYTE $0x24                       // paddq    xmm1, oword [rsp]
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x20         // movdqa    oword [rsp + 32], xmm9
	LONG $0xd40f4566; BYTE $0xd1                       // paddq    xmm10, xmm9
	QUAD $0x0000e0248c7f0f66; BYTE $0x00               // movdqa    oword [rsp + 224], xmm1
	LONG $0xd9ef0f66                                   // pxor    xmm3, xmm1
	LONG $0x7f0f4466; WORD $0x2454; BYTE $0x70         // movdqa    oword [rsp + 112], xmm10
	LONG $0xef0f4566; BYTE $0xfa                       // pxor    xmm15, xmm10
	LONG $0xd40f4166; BYTE $0xdf                       // paddq    xmm3, xmm15
	LONG $0xc36f0f66                                   // movdqa    xmm0, xmm3
	LONG $0xf3730f66; BYTE $0x07                       // psllq    xmm3, 7
	LONG $0xef0f4466; WORD $0x0164; BYTE $0xd0         // pxor    xmm12, oword [rcx + rax - 48]
	LONG $0xd0730f66; BYTE $0x39                       // psrlq    xmm0, 57
	LONG $0xd8eb0f66                                   // por    xmm3, xmm0
	LONG $0xd40f4166; BYTE $0xfc                       // paddq    xmm7, xmm12
	LONG $0xc76f0f66                                   // movdqa    xmm0, xmm7
	LONG $0xd0730f66; BYTE $0x3d                       // psrlq    xmm0, 61
	LONG $0xf7730f66; BYTE $0x03                       // psllq    xmm7, 3
	LONG $0xf8eb0f66                                   // por    xmm7, xmm0
	LONG $0x54ef0f66; WORD $0xe001                     // pxor    xmm2, oword [rcx + rax - 32]
	LONG $0xd40f4466; BYTE $0xda                       // paddq    xmm11, xmm2
	LONG $0x6f0f4166; BYTE $0xe3                       // movdqa    xmm4, xmm11
	LONG $0xd4730f66; BYTE $0x3d                       // psrlq    xmm4, 61
	LONG $0x6f0f4166; BYTE $0xc3                       // movdqa    xmm0, xmm11
	LONG $0xf0730f66; BYTE $0x03                       // psllq    xmm0, 3
	LONG $0xc4eb0f66                                   // por    xmm0, xmm4
	LONG $0xef0f4466; WORD $0x0144; BYTE $0xf0         // pxor    xmm8, oword [rcx + rax - 16]
	LONG $0xd40f4566; BYTE $0xe8                       // paddq    xmm13, xmm8
	LONG $0x6f0f4166; BYTE $0xed                       // movdqa    xmm5, xmm13
	LONG $0xd5730f66; BYTE $0x3d                       // psrlq    xmm5, 61
	LONG $0x6f0f4166; BYTE $0xe5                       // movdqa    xmm4, xmm13
	LONG $0xf4730f66; BYTE $0x03                       // psllq    xmm4, 3
	LONG $0xe5eb0f66                                   // por    xmm4, xmm5
	LONG $0xc2d40f66                                   // paddq    xmm0, xmm2
	LONG $0xd40f4166; BYTE $0xe0                       // paddq    xmm4, xmm8
	LONG $0x1cef0f66; BYTE $0x01                       // pxor    xmm3, oword [rcx + rax]
	LONG $0xd40f4466; BYTE $0xfb                       // paddq    xmm15, xmm3
	LONG $0x6f0f4166; BYTE $0xd7                       // movdqa    xmm2, xmm15
	LONG $0xd2730f66; BYTE $0x3d                       // psrlq    xmm2, 61
	LONG $0x6f0f4566; BYTE $0xc7                       // movdqa    xmm8, xmm15
	LONG $0x730f4166; WORD $0x03f0                     // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc2                       // por    xmm8, xmm2
	LONG $0xd40f4466; BYTE $0xc3                       // paddq    xmm8, xmm3
	LONG $0xd2ef0f66                                   // pxor    xmm2, xmm2
	LONG $0xd76d0f66                                   // punpckhqdq    xmm2, xmm7
	LONG $0xda6f0f66                                   // movdqa    xmm3, xmm2
	LONG $0xd3730f66; BYTE $0x30                       // psrlq    xmm3, 48
	LONG $0xf2730f66; BYTE $0x10                       // psllq    xmm2, 16
	LONG $0xd3eb0f66                                   // por    xmm2, xmm3
	LONG $0x6f0f4166; BYTE $0xdd                       // movdqa    xmm3, xmm13
	LONG $0xd3730f66; BYTE $0x35                       // psrlq    xmm3, 53
	LONG $0x730f4166; WORD $0x0bf5                     // psllq    xmm13, 11
	LONG $0xeb0f4466; BYTE $0xeb                       // por    xmm13, xmm3
	LONG $0xedef0f66                                   // pxor    xmm5, xmm5
	LONG $0x6d0f4166; BYTE $0xed                       // punpckhqdq    xmm5, xmm13
	LONG $0xdd6f0f66                                   // movdqa    xmm3, xmm5
	LONG $0xf5730f66; BYTE $0x10                       // psllq    xmm5, 16
	LONG $0xd3730f66; BYTE $0x30                       // psrlq    xmm3, 48
	LONG $0xebeb0f66                                   // por    xmm5, xmm3
	LONG $0xd40f4466; BYTE $0xe7                       // paddq    xmm12, xmm7
	LONG $0xdf7e0ff3                                   // movq    xmm3, xmm7
	LONG $0xd3ef0f66                                   // pxor    xmm2, xmm3
	LONG $0x7e0f41f3; BYTE $0xcd                       // movq    xmm1, xmm13
	LONG $0xe9ef0f66                                   // pxor    xmm5, xmm1
	LONG $0x6f0f4466; BYTE $0xe8                       // movdqa    xmm13, xmm0
	LONG $0x6c0f4566; BYTE $0xec                       // punpcklqdq    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xdc                       // movdqa    xmm3, xmm12
	LONG $0xd86d0f66                                   // punpckhqdq    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xd3                       // movdqa    xmm10, xmm11
	LONG $0x6f0f4166; BYTE $0xc3                       // movdqa    xmm0, xmm11
	LONG $0x6f0f4566; BYTE $0xd8                       // movdqa    xmm11, xmm8
	LONG $0x6c0f4466; BYTE $0xdc                       // punpcklqdq    xmm11, xmm4
	LONG $0x6d0f4166; BYTE $0xe0                       // punpckhqdq    xmm4, xmm8
	LONG $0x730f4166; WORD $0x1dd2                     // psrlq    xmm10, 29
	LONG $0xf0730f66; BYTE $0x23                       // psllq    xmm0, 35
	LONG $0xeb0f4466; BYTE $0xd0                       // por    xmm10, xmm0
	LONG $0x6f0f4166; BYTE $0xfa                       // movdqa    xmm7, xmm10
	LONG $0xdf730f66; BYTE $0x08                       // psrldq    xmm7, 8
	LONG $0xf7730f66; BYTE $0x10                       // psllq    xmm7, 16
	LONG $0xd8730f66; BYTE $0x0e                       // psrldq    xmm0, 14
	LONG $0xc7eb0f66                                   // por    xmm0, xmm7
	LONG $0x730f4166; WORD $0x08fa                     // pslldq    xmm10, 8
	LONG $0xef0f4466; BYTE $0xd0                       // pxor    xmm10, xmm0
	LONG $0x6f0f4466; BYTE $0xc2                       // movdqa    xmm8, xmm2
	LONG $0x6c0f4566; BYTE $0xc2                       // punpcklqdq    xmm8, xmm10
	LONG $0x6d0f4466; BYTE $0xd2                       // punpckhqdq    xmm10, xmm2
	LONG $0x6f0f4566; BYTE $0xe7                       // movdqa    xmm12, xmm15
	LONG $0x730f4166; WORD $0x15d4                     // psrlq    xmm12, 21
	LONG $0x730f4166; WORD $0x2bf7                     // psllq    xmm15, 43
	LONG $0xeb0f4566; BYTE $0xe7                       // por    xmm12, xmm15
	LONG $0x6f0f4166; BYTE $0xc4                       // movdqa    xmm0, xmm12
	LONG $0xd8730f66; BYTE $0x08                       // psrldq    xmm0, 8
	LONG $0x730f4166; WORD $0x0edf                     // psrldq    xmm15, 14
	LONG $0xf0730f66; BYTE $0x10                       // psllq    xmm0, 16
	LONG $0xeb0f4466; BYTE $0xf8                       // por    xmm15, xmm0
	LONG $0x730f4166; WORD $0x08fc                     // pslldq    xmm12, 8
	LONG $0xef0f4566; BYTE $0xe7                       // pxor    xmm12, xmm15
	LONG $0x6f0f4466; BYTE $0xfd                       // movdqa    xmm15, xmm5
	LONG $0x6c0f4566; BYTE $0xfc                       // punpcklqdq    xmm15, xmm12
	LONG $0x6d0f4466; BYTE $0xe5                       // punpckhqdq    xmm12, xmm5
	LONG $0x80e98348                                   // sub    rcx, -128
	LONG $0x70f98148; WORD $0x0007; BYTE $0x00         // cmp    rcx, 1904
	JNE  LBB1_47
	LONG $0x04700f66; WORD $0x4e24                     // pshufd    xmm0, oword [rsp], 78
	LONG $0xd06f0f66                                   // movdqa    xmm2, xmm0
	QUAD $0x0000a024bc6f0f66; BYTE $0x00               // movdqa    xmm7, oword [rsp + 160]
	LONG $0xd76c0f66                                   // punpcklqdq    xmm2, xmm7
	LONG $0xf86d0f66                                   // punpckhqdq    xmm7, xmm0
	LONG $0x44700f66; WORD $0x2024; BYTE $0x4e         // pshufd    xmm0, oword [rsp + 32], 78
	LONG $0xe86f0f66                                   // movdqa    xmm5, xmm0
	QUAD $0x00b0248c6f0f4466; WORD $0x0000             // movdqa    xmm9, oword [rsp + 176]
	LONG $0x6c0f4166; BYTE $0xe9                       // punpcklqdq    xmm5, xmm9
	LONG $0x6d0f4466; BYTE $0xc8                       // punpckhqdq    xmm9, xmm0
	QUAD $0x0000802484700f66; WORD $0x4e00             // pshufd    xmm0, oword [rsp + 128], 78
	QUAD $0x0000d0248c6f0f66; BYTE $0x00               // movdqa    xmm1, oword [rsp + 208]
	LONG $0xc8d40f66                                   // paddq    xmm1, xmm0
	LONG $0x746f0f66; WORD $0x5024                     // movdqa    xmm6, oword [rsp + 80]
	QUAD $0x0000c024b4d40f66; BYTE $0x00               // paddq    xmm6, oword [rsp + 192]
	LONG $0x54d40f66; WORD $0x3024                     // paddq    xmm2, oword [rsp + 48]
	QUAD $0x0000e024bcd40f66; BYTE $0x00               // paddq    xmm7, oword [rsp + 224]
	QUAD $0x0000902484700f66; WORD $0x4e00             // pshufd    xmm0, oword [rsp + 144], 78
	QUAD $0x00f024b46f0f4466; WORD $0x0000             // movdqa    xmm14, oword [rsp + 240]
	LONG $0xd40f4466; BYTE $0xf0                       // paddq    xmm14, xmm0
	LONG $0x446f0f66; WORD $0x6024                     // movdqa    xmm0, oword [rsp + 96]
	LONG $0x44d40f66; WORD $0x1024                     // paddq    xmm0, oword [rsp + 16]
	LONG $0x6cd40f66; WORD $0x4024                     // paddq    xmm5, oword [rsp + 64]
	LONG $0xd40f4466; WORD $0x244c; BYTE $0x70         // paddq    xmm9, oword [rsp + 112]
	LONG $0xef0f4466; BYTE $0xd9                       // pxor    xmm11, xmm1
	LONG $0xef0f4566; BYTE $0xee                       // pxor    xmm13, xmm14
	LONG $0xe6ef0f66                                   // pxor    xmm4, xmm6
	LONG $0xd8ef0f66                                   // pxor    xmm3, xmm0
	LONG $0xef0f4466; BYTE $0xfa                       // pxor    xmm15, xmm2
	LONG $0xef0f4466; BYTE $0xc5                       // pxor    xmm8, xmm5
	LONG $0x6f0f4166; BYTE $0xf4                       // movdqa    xmm6, xmm12
	LONG $0xf7ef0f66                                   // pxor    xmm6, xmm7
	LONG $0x6f0f4166; BYTE $0xfa                       // movdqa    xmm7, xmm10
	LONG $0xef0f4166; BYTE $0xf9                       // pxor    xmm7, xmm9
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00         // add    rsi, 256
	LONG $0x00c28148; WORD $0xffff; BYTE $0xff         // add    rdx, -256
	LONG $0x6f0f4466; BYTE $0xe3                       // movdqa    xmm12, xmm3
	LONG $0x6f0f4566; BYTE $0xd3                       // movdqa    xmm10, xmm11
	LONG $0xfffa8148; WORD $0x0000; BYTE $0x00         // cmp    rdx, 255
	JA   LBB1_46
	JMP  LBB1_50

LBB1_49:
	LONG $0x6f0f4566; BYTE $0xda // movdqa    xmm11, xmm10
	LONG $0x6f0f4166; BYTE $0xdc // movdqa    xmm3, xmm12

LBB1_50:
	LONG $0x7f0f44f3; WORD $0x205f       // movdqu    oword [rdi + 32], xmm11
	LONG $0x677f0ff3; BYTE $0x30         // movdqu    oword [rdi + 48], xmm4
	LONG $0x7f0f44f3; WORD $0x407f       // movdqu    oword [rdi + 64], xmm15
	LONG $0x777f0ff3; BYTE $0x50         // movdqu    oword [rdi + 80], xmm6
	LONG $0x7f0f44f3; WORD $0x606f       // movdqu    oword [rdi + 96], xmm13
	LONG $0x5f7f0ff3; BYTE $0x70         // movdqu    oword [rdi + 112], xmm3
	QUAD $0x000080877f0f44f3; BYTE $0x00 // movdqu    oword [rdi + 128], xmm8
	QUAD $0x00000090bf7f0ff3             // movdqu    oword [rdi + 144], xmm7
	WORD $0x8548; BYTE $0xd2             // test    rdx, rdx
	JE   LBB1_70
	LONG $0x08fa8348                     // cmp    rdx, 8
	JB   LBB1_52
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	WORD $0x2948; BYTE $0xf0             // sub    rax, rsi
	LONG $0x00a00548; WORD $0x0000       // add    rax, 160
	LONG $0x20f88348                     // cmp    rax, 32
	JAE  LBB1_55

LBB1_52:
	WORD $0xc031 // xor    eax, eax

LBB1_64:
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	WORD $0xf748; BYTE $0xd1 // not    rcx
	WORD $0x0148; BYTE $0xd1 // add    rcx, rdx
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x03e08349         // and    r8, 3
	JE   LBB1_66

LBB1_65:
	LONG $0x0cb60f44; BYTE $0x06 // movzx    r9d, byte [rsi + rax]
	QUAD $0x000000a0078c8844     // mov    byte [rdi + rax + 160], r9b
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0xff49; BYTE $0xc8     // dec    r8
	JNE  LBB1_65

LBB1_66:
	LONG $0x03f98348 // cmp    rcx, 3
	JB   LBB1_68

LBB1_67:
	LONG $0x060cb60f                           // movzx    ecx, byte [rsi + rax]
	LONG $0xa0078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 160], cl
	LONG $0x064cb60f; BYTE $0x01               // movzx    ecx, byte [rsi + rax + 1]
	LONG $0xa1078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 161], cl
	LONG $0x064cb60f; BYTE $0x02               // movzx    ecx, byte [rsi + rax + 2]
	LONG $0xa2078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 162], cl
	LONG $0x064cb60f; BYTE $0x03               // movzx    ecx, byte [rsi + rax + 3]
	LONG $0xa3078c88; WORD $0x0000; BYTE $0x00 // mov    byte [rdi + rax + 163], cl
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB1_67

LBB1_68:
	WORD $0xd189 // mov    ecx, edx

LBB1_69:
	WORD $0x4f89; BYTE $0x10 // mov    dword [rdi + 16], ecx

LBB1_70:
	MOVQ 288(SP), SP
	RET

LBB1_12:
	WORD $0xf883; BYTE $0x20 // cmp    eax, 32
	JAE  LBB1_16
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB1_20

LBB1_55:
	LONG $0x20fa8348 // cmp    rdx, 32
	JAE  LBB1_57
	WORD $0xc031     // xor    eax, eax
	JMP  LBB1_61

LBB1_14:
	WORD $0xf883; BYTE $0x20 // cmp    eax, 32
	JAE  LBB1_29
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB1_33

LBB1_16:
	WORD $0x8941; BYTE $0xd2                   // mov    r10d, edx
	LONG $0x1fe28341                           // and    r10d, 31
	WORD $0x8949; BYTE $0xc1                   // mov    r9, rax
	WORD $0x294d; BYTE $0xd1                   // sub    r9, r10
	LONG $0x391c8d4c                           // lea    r11, [rcx + rdi]
	LONG $0xb0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 176
	WORD $0xdb31                               // xor    ebx, ebx

LBB1_17:
	LONG $0x046f0ff3; BYTE $0x1e               // movdqu    xmm0, oword [rsi + rbx]
	LONG $0x4c6f0ff3; WORD $0x101e             // movdqu    xmm1, oword [rsi + rbx + 16]
	LONG $0x7f0f41f3; WORD $0x1b44; BYTE $0xf0 // movdqu    oword [r11 + rbx - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x1b0c             // movdqu    oword [r11 + rbx], xmm1
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xd9                   // cmp    r9, rbx
	JNE  LBB1_17
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB1_28
	LONG $0x08fa8341                           // cmp    r10d, 8
	JB   LBB1_23

LBB1_20:
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	LONG $0x07e38341         // and    r11d, 7
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0x294d; BYTE $0xd9 // sub    r9, r11

LBB1_21:
	LONG $0x161c8b4a         // mov    rbx, qword [rsi + r10]
	LONG $0x101c894b         // mov    qword [r8 + r10], rbx
	LONG $0x08c28349         // add    r10, 8
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JNE  LBB1_21
	WORD $0x854d; BYTE $0xdb // test    r11, r11
	JNE  LBB1_23
	JMP  LBB1_28

LBB1_57:
	WORD $0xd089                 // mov    eax, edx
	LONG $0x0000e025; BYTE $0x00 // and    eax, 224
	WORD $0xc931                 // xor    ecx, ecx

LBB1_58:
	LONG $0x046f0ff3; BYTE $0x0e         // movdqu    xmm0, oword [rsi + rcx]
	LONG $0x4c6f0ff3; WORD $0x100e       // movdqu    xmm1, oword [rsi + rcx + 16]
	QUAD $0x0000a00f847f0ff3; BYTE $0x00 // movdqu    oword [rdi + rcx + 160], xmm0
	QUAD $0x0000b00f8c7f0ff3; BYTE $0x00 // movdqu    oword [rdi + rcx + 176], xmm1
	LONG $0x20c18348                     // add    rcx, 32
	WORD $0x3948; BYTE $0xc8             // cmp    rax, rcx
	JNE  LBB1_58
	WORD $0x3948; BYTE $0xc2             // cmp    rdx, rax
	JE   LBB1_68
	WORD $0xc2f6; BYTE $0x18             // test    dl, 24
	JE   LBB1_64

LBB1_61:
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0xd089                 // mov    eax, edx
	LONG $0x0000f825; BYTE $0x00 // and    eax, 248

LBB1_62:
	LONG $0x0e048b4c         // mov    r8, qword [rsi + rcx]
	QUAD $0x000000a00f84894c // mov    qword [rdi + rcx + 160], r8
	LONG $0x08c18348         // add    rcx, 8
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB1_62
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB1_68
	JMP  LBB1_64

LBB1_29:
	WORD $0x8941; BYTE $0xc0                   // mov    r8d, eax
	LONG $0xe0e08341                           // and    r8d, -32
	LONG $0x39148d4c                           // lea    r10, [rcx + rdi]
	LONG $0xb0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 176
	WORD $0x3145; BYTE $0xdb                   // xor    r11d, r11d

LBB1_30:
	LONG $0x04100f42; BYTE $0x1e   // movups    xmm0, oword [rsi + r11]
	LONG $0x54100f42; WORD $0x101e // movups    xmm2, oword [rsi + r11 + 16]
	LONG $0x44110f43; WORD $0xf01a // movups    oword [r10 + r11 - 16], xmm0
	LONG $0x14110f43; BYTE $0x1a   // movups    oword [r10 + r11], xmm2
	LONG $0x20c38349               // add    r11, 32
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB1_30
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB1_41
	WORD $0x18a8                   // test    al, 24
	JE   LBB1_36

LBB1_33:
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0x8941; BYTE $0xc0 // mov    r8d, eax
	LONG $0xf8e08341         // and    r8d, -8

LBB1_34:
	LONG $0x161c8b4e         // mov    r11, qword [rsi + r10]
	LONG $0x111c894f         // mov    qword [r9 + r10], r11
	LONG $0x08c28349         // add    r10, 8
	WORD $0x394d; BYTE $0xd0 // cmp    r8, r10
	JNE  LBB1_34
	WORD $0x3949; BYTE $0xc0 // cmp    r8, rax
	JE   LBB1_41
	JMP  LBB1_36

TEXT ·__lsh512_sse2_final(SB), NOSPLIT, $304-32
	MOVQ ctx+0(FP), DI
	MOVQ hashval_base+8(FP), SI
	//hashval_len+16
	//hashval_cap+24

	// Stack size: 272
	MOVQ SP, BP
	ADDQ $16, SP
	ANDQ $-16, SP
	MOVQ BP, 272(SP)
	LEAQ LCDATA2<>(SB), BP

	LONG $0x10478b44                     // mov    r8d, dword [rdi + 16]
	QUAD $0x000000a00784c642; BYTE $0x80 // mov    byte [rdi + r8 + 160], -128
	LONG $0x0000ffba; BYTE $0x00         // mov    edx, 255
	WORD $0x2944; BYTE $0xc2             // sub    edx, r8d
	WORD $0xd285                         // test    edx, edx
	JLE  LBB2_13
	LONG $0x07048d4a                     // lea    rax, [rdi + r8]
	LONG $0x00a10548; WORD $0x0000       // add    rax, 161
	WORD $0xd189                         // mov    ecx, edx
	WORD $0xfa83; BYTE $0x08             // cmp    edx, 8
	JAE  LBB2_3
	WORD $0xd231                         // xor    edx, edx
	JMP  LBB2_12

LBB2_3:
	WORD $0xfa83; BYTE $0x20 // cmp    edx, 32
	JAE  LBB2_5
	WORD $0xd231             // xor    edx, edx
	JMP  LBB2_9

LBB2_5:
	WORD $0xca89                               // mov    edx, ecx
	WORD $0xe283; BYTE $0xe0                   // and    edx, -32
	WORD $0x0149; BYTE $0xf8                   // add    r8, rdi
	LONG $0xb1c08149; WORD $0x0000; BYTE $0x00 // add    r8, 177
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0

LBB2_6:
	LONG $0x44110f43; WORD $0xf008 // movups    oword [r8 + r9 - 16], xmm0
	LONG $0x04110f43; BYTE $0x08   // movups    oword [r8 + r9], xmm0
	LONG $0x20c18349               // add    r9, 32
	WORD $0x394c; BYTE $0xca       // cmp    rdx, r9
	JNE  LBB2_6
	WORD $0x3948; BYTE $0xca       // cmp    rdx, rcx
	JE   LBB2_13
	WORD $0xc1f6; BYTE $0x18       // test    cl, 24
	JE   LBB2_12

LBB2_9:
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe283; BYTE $0xf8 // and    edx, -8

LBB2_10:
	QUAD $0x000000000004c74a // mov    qword [rax + r8], 0
	LONG $0x08c08349         // add    r8, 8
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JNE  LBB2_10
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JE   LBB2_13

LBB2_12:
	LONG $0x001004c6         // mov    byte [rax + rdx], 0
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JNE  LBB2_12

LBB2_13:
	LONG $0x476f0ff3; BYTE $0x20               // movdqu    xmm0, oword [rdi + 32]
	LONG $0x6f0f44f3; WORD $0x3047             // movdqu    xmm8, oword [rdi + 48]
	LONG $0x776f0ff3; BYTE $0x40               // movdqu    xmm6, oword [rdi + 64]
	LONG $0x676f0ff3; BYTE $0x50               // movdqu    xmm4, oword [rdi + 80]
	LONG $0x5f6f0ff3; BYTE $0x60               // movdqu    xmm3, oword [rdi + 96]
	LONG $0x6f0f44f3; WORD $0x704f             // movdqu    xmm9, oword [rdi + 112]
	QUAD $0x000000808f6f0ff3                   // movdqu    xmm1, oword [rdi + 128]
	QUAD $0x00000090af6f0ff3                   // movdqu    xmm5, oword [rdi + 144]
	QUAD $0x0000a0af6f0f44f3; BYTE $0x00       // movdqu    xmm13, oword [rdi + 160]
	QUAD $0x0000b0a76f0f44f3; BYTE $0x00       // movdqu    xmm12, oword [rdi + 176]
	QUAD $0x0000c0b76f0f44f3; BYTE $0x00       // movdqu    xmm14, oword [rdi + 192]
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x20 // movdqa    oword [rsp + 32], xmm14
	QUAD $0x000000d0bf6f0ff3                   // movdqu    xmm7, oword [rdi + 208]
	QUAD $0x000000e0976f0ff3                   // movdqu    xmm2, oword [rdi + 224]
	QUAD $0x0000f09f6f0f44f3; BYTE $0x00       // movdqu    xmm11, oword [rdi + 240]
	QUAD $0x000100976f0f44f3; BYTE $0x00       // movdqu    xmm10, oword [rdi + 256]
	QUAD $0x00c024ac7f0f4466; WORD $0x0000     // movdqa    oword [rsp + 192], xmm13
	LONG $0xef0f4166; BYTE $0xc5               // pxor    xmm0, xmm13
	QUAD $0x0000b024947f0f66; BYTE $0x00       // movdqa    oword [rsp + 176], xmm2
	LONG $0xdaef0f66                           // pxor    xmm3, xmm2
	QUAD $0x009024a47f0f4466; WORD $0x0000     // movdqa    oword [rsp + 144], xmm12
	LONG $0xef0f4566; BYTE $0xc4               // pxor    xmm8, xmm12
	QUAD $0x00a0249c7f0f4466; WORD $0x0000     // movdqa    oword [rsp + 160], xmm11
	LONG $0xef0f4566; BYTE $0xcb               // pxor    xmm9, xmm11
	LONG $0xef0f4166; BYTE $0xf6               // pxor    xmm6, xmm14
	LONG $0x7f0f4466; WORD $0x2414             // movdqa    oword [rsp], xmm10
	LONG $0xef0f4166; BYTE $0xca               // pxor    xmm1, xmm10
	LONG $0xc3d40f66                           // paddq    xmm0, xmm3
	LONG $0xd40f4566; BYTE $0xc1               // paddq    xmm8, xmm9
	LONG $0xf1d40f66                           // paddq    xmm6, xmm1
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd2730f66; BYTE $0x29               // psrlq    xmm2, 41
	LONG $0xf0730f66; BYTE $0x17               // psllq    xmm0, 23
	LONG $0xc2eb0f66                           // por    xmm0, xmm2
	LONG $0x6f0f4166; BYTE $0xd0               // movdqa    xmm2, xmm8
	LONG $0xd2730f66; BYTE $0x29               // psrlq    xmm2, 41
	LONG $0x730f4166; WORD $0x17f0             // psllq    xmm8, 23
	LONG $0xeb0f4466; BYTE $0xc2               // por    xmm8, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd2730f66; BYTE $0x29               // psrlq    xmm2, 41
	LONG $0xf6730f66; BYTE $0x17               // psllq    xmm6, 23
	LONG $0xf2eb0f66                           // por    xmm6, xmm2
	QUAD $0x00000110976f0ff3                   // movdqu    xmm2, oword [rdi + 272]
	LONG $0x547f0f66; WORD $0x5024             // movdqa    oword [rsp + 80], xmm2
	LONG $0x7c7f0f66; WORD $0x1024             // movdqa    oword [rsp + 16], xmm7
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xeaef0f66                           // pxor    xmm5, xmm2
	LONG $0xe5d40f66                           // paddq    xmm4, xmm5
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd2730f66; BYTE $0x29               // psrlq    xmm2, 41
	LONG $0xf4730f66; BYTE $0x17               // psllq    xmm4, 23
	LONG $0xe2eb0f66                           // por    xmm4, xmm2
	LONG $0xef0f4466; WORD $0x1045             // pxor    xmm8, oword 16[rbp]
	LONG $0xd40f4566; BYTE $0xc8               // paddq    xmm9, xmm8
	LONG $0x6f0f4166; BYTE $0xd1               // movdqa    xmm2, xmm9
	LONG $0xd2730f66; BYTE $0x05               // psrlq    xmm2, 5
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0x730f4166; WORD $0x3bf2             // psllq    xmm10, 59
	LONG $0xeb0f4466; BYTE $0xd2               // por    xmm10, xmm2
	LONG $0x75ef0f66; BYTE $0x20               // pxor    xmm6, oword 32[rbp]
	LONG $0xced40f66                           // paddq    xmm1, xmm6
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0x730f4166; WORD $0x05d3             // psrlq    xmm11, 5
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xf2730f66; BYTE $0x3b               // psllq    xmm2, 59
	LONG $0xeb0f4166; BYTE $0xd3               // por    xmm2, xmm11
	LONG $0x65ef0f66; BYTE $0x30               // pxor    xmm4, oword 48[rbp]
	LONG $0xecd40f66                           // paddq    xmm5, xmm4
	LONG $0x6f0f4466; BYTE $0xdd               // movdqa    xmm11, xmm5
	LONG $0x730f4166; WORD $0x05d3             // psrlq    xmm11, 5
	LONG $0x6f0f4466; BYTE $0xe5               // movdqa    xmm12, xmm5
	LONG $0x730f4166; WORD $0x3bf4             // psllq    xmm12, 59
	LONG $0xeb0f4566; BYTE $0xe3               // por    xmm12, xmm11
	LONG $0xd40f4566; BYTE $0xd0               // paddq    xmm10, xmm8
	LONG $0xd6d40f66                           // paddq    xmm2, xmm6
	LONG $0x45ef0f66; BYTE $0x00               // pxor    xmm0, oword 0[rbp]
	LONG $0xd40f4466; BYTE $0xe4               // paddq    xmm12, xmm4
	LONG $0xd8d40f66                           // paddq    xmm3, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xd4730f66; BYTE $0x05               // psrlq    xmm4, 5
	LONG $0xf3730f66; BYTE $0x3b               // psllq    xmm3, 59
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x6d0f4466; BYTE $0xc4               // punpckhqdq    xmm8, xmm4
	LONG $0xc3d40f66                           // paddq    xmm0, xmm3
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xd4730f66; BYTE $0x30               // psrlq    xmm4, 48
	LONG $0x730f4166; WORD $0x10f0             // psllq    xmm8, 16
	LONG $0xeb0f4166; BYTE $0xe0               // por    xmm4, xmm8
	LONG $0xef0f4466; BYTE $0xc3               // pxor    xmm8, xmm3
	LONG $0x6f0f4166; BYTE $0xd9               // movdqa    xmm3, xmm9
	LONG $0xd3730f66; BYTE $0x25               // psrlq    xmm3, 37
	LONG $0x730f4166; WORD $0x1bf1             // psllq    xmm9, 27
	LONG $0xeb0f4466; BYTE $0xcb               // por    xmm9, xmm3
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0x6d0f4166; BYTE $0xf1               // punpckhqdq    xmm6, xmm9
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd3730f66; BYTE $0x30               // psrlq    xmm3, 48
	LONG $0xf6730f66; BYTE $0x10               // psllq    xmm6, 16
	LONG $0xf3eb0f66                           // por    xmm6, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd3730f66; BYTE $0x3d               // psrlq    xmm3, 61
	LONG $0xf1730f66; BYTE $0x03               // psllq    xmm1, 3
	LONG $0xcbeb0f66                           // por    xmm1, xmm3
	LONG $0xef0f4566; BYTE $0xdb               // pxor    xmm11, xmm11
	LONG $0x6d0f4466; BYTE $0xd9               // punpckhqdq    xmm11, xmm1
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd3730f66; BYTE $0x30               // psrlq    xmm3, 48
	LONG $0x730f4166; WORD $0x10f3             // psllq    xmm11, 16
	LONG $0xeb0f4166; BYTE $0xdb               // por    xmm3, xmm11
	LONG $0xef0f4466; BYTE $0xd9               // pxor    xmm11, xmm1
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xd1730f66; BYTE $0x1d               // psrlq    xmm1, 29
	LONG $0xf5730f66; BYTE $0x23               // psllq    xmm5, 35
	LONG $0xe9eb0f66                           // por    xmm5, xmm1
	LONG $0xef0f4566; BYTE $0xf6               // pxor    xmm14, xmm14
	LONG $0x6d0f4466; BYTE $0xf5               // punpckhqdq    xmm14, xmm5
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xd1730f66; BYTE $0x30               // psrlq    xmm1, 48
	LONG $0x730f4166; WORD $0x10f6             // psllq    xmm14, 16
	LONG $0xeb0f4466; BYTE $0xf1               // por    xmm14, xmm1
	LONG $0x6f0f4566; BYTE $0xea               // movdqa    xmm13, xmm10
	LONG $0x6c0f4466; BYTE $0xe8               // punpcklqdq    xmm13, xmm0
	LONG $0x6d0f4166; BYTE $0xc2               // punpckhqdq    xmm0, xmm10
	LONG $0x6f0f4166; BYTE $0xcc               // movdqa    xmm1, xmm12
	LONG $0xca6c0f66                           // punpcklqdq    xmm1, xmm2
	LONG $0x6d0f4166; BYTE $0xd4               // punpckhqdq    xmm2, xmm12
	LONG $0xf6700f66; BYTE $0x4e               // pshufd    xmm6, xmm6, 78
	LONG $0x730f4166; WORD $0x08f9             // pslldq    xmm9, 8
	LONG $0xef0f4466; BYTE $0xce               // pxor    xmm9, xmm6
	LONG $0x6c0f4566; BYTE $0xc1               // punpcklqdq    xmm8, xmm9
	LONG $0x6d0f4466; BYTE $0xcc               // punpckhqdq    xmm9, xmm4
	LONG $0x700f4166; WORD $0x4ee6             // pshufd    xmm4, xmm14, 78
	LONG $0xfd730f66; BYTE $0x08               // pslldq    xmm5, 8
	LONG $0xecef0f66                           // pxor    xmm5, xmm4
	LONG $0x6c0f4466; BYTE $0xdd               // punpcklqdq    xmm11, xmm5
	LONG $0xeb6d0f66                           // punpckhqdq    xmm5, xmm3
	QUAD $0x000001209f6f0ff3                   // movdqu    xmm3, oword [rdi + 288]
	QUAD $0x0000d0249c7f0f66; BYTE $0x00       // movdqa    oword [rsp + 208], xmm3
	LONG $0xcbef0f66                           // pxor    xmm1, xmm3
	QUAD $0x000001609f6f0ff3                   // movdqu    xmm3, oword [rdi + 352]
	QUAD $0x0000e0249c7f0f66; BYTE $0x00       // movdqa    oword [rsp + 224], xmm3
	LONG $0xef0f4466; BYTE $0xeb               // pxor    xmm13, xmm3
	LONG $0xd40f4166; BYTE $0xcd               // paddq    xmm1, xmm13
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xd4730f66; BYTE $0x39               // psrlq    xmm4, 57
	LONG $0xf1730f66; BYTE $0x07               // psllq    xmm1, 7
	LONG $0xcceb0f66                           // por    xmm1, xmm4
	QUAD $0x000001309f6f0ff3                   // movdqu    xmm3, oword [rdi + 304]
	LONG $0x5c7f0f66; WORD $0x6024             // movdqa    oword [rsp + 96], xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	QUAD $0x000001709f6f0ff3                   // movdqu    xmm3, oword [rdi + 368]
	LONG $0x5c7f0f66; WORD $0x7024             // movdqa    oword [rsp + 112], xmm3
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xd4730f66; BYTE $0x39               // psrlq    xmm4, 57
	LONG $0xf2730f66; BYTE $0x07               // psllq    xmm2, 7
	LONG $0xd4eb0f66                           // por    xmm2, xmm4
	QUAD $0x000001409f6f0ff3                   // movdqu    xmm3, oword [rdi + 320]
	LONG $0x5c7f0f66; WORD $0x3024             // movdqa    oword [rsp + 48], xmm3
	LONG $0xef0f4466; BYTE $0xdb               // pxor    xmm11, xmm3
	QUAD $0x000001809f6f0ff3                   // movdqu    xmm3, oword [rdi + 384]
	LONG $0x5c7f0f66; WORD $0x4024             // movdqa    oword [rsp + 64], xmm3
	LONG $0xef0f4466; BYTE $0xc3               // pxor    xmm8, xmm3
	LONG $0xd40f4566; BYTE $0xd8               // paddq    xmm11, xmm8
	LONG $0x6f0f4166; BYTE $0xe3               // movdqa    xmm4, xmm11
	LONG $0xd4730f66; BYTE $0x39               // psrlq    xmm4, 57
	LONG $0x730f4166; WORD $0x07f3             // psllq    xmm11, 7
	LONG $0xeb0f4466; BYTE $0xdc               // por    xmm11, xmm4
	QUAD $0x000001509f6f0ff3                   // movdqu    xmm3, oword [rdi + 336]
	QUAD $0x0000f0249c7f0f66; BYTE $0x00       // movdqa    oword [rsp + 240], xmm3
	LONG $0xebef0f66                           // pxor    xmm5, xmm3
	QUAD $0x000001909f6f0ff3                   // movdqu    xmm3, oword [rdi + 400]
	QUAD $0x000080249c7f0f66; BYTE $0x00       // movdqa    oword [rsp + 128], xmm3
	LONG $0xef0f4466; BYTE $0xcb               // pxor    xmm9, xmm3
	LONG $0xd40f4166; BYTE $0xe9               // paddq    xmm5, xmm9
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xd4730f66; BYTE $0x39               // psrlq    xmm4, 57
	LONG $0xf5730f66; BYTE $0x07               // psllq    xmm5, 7
	LONG $0xeceb0f66                           // por    xmm5, xmm4
	LONG $0x4def0f66; BYTE $0x40               // pxor    xmm1, oword 64[rbp]
	LONG $0xd40f4466; BYTE $0xe9               // paddq    xmm13, xmm1
	LONG $0x6f0f4166; BYTE $0xe5               // movdqa    xmm4, xmm13
	LONG $0xd4730f66; BYTE $0x3d               // psrlq    xmm4, 61
	LONG $0x730f4166; WORD $0x03f5             // psllq    xmm13, 3
	LONG $0xeb0f4466; BYTE $0xec               // por    xmm13, xmm4
	LONG $0x55ef0f66; BYTE $0x50               // pxor    xmm2, oword 80[rbp]
	LONG $0xc2d40f66                           // paddq    xmm0, xmm2
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xd4730f66; BYTE $0x3d               // psrlq    xmm4, 61
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xf3730f66; BYTE $0x03               // psllq    xmm3, 3
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0xef0f4466; WORD $0x605d             // pxor    xmm11, oword 96[rbp]
	LONG $0xd40f4566; BYTE $0xc3               // paddq    xmm8, xmm11
	LONG $0x6f0f4166; BYTE $0xf0               // movdqa    xmm6, xmm8
	LONG $0xd6730f66; BYTE $0x3d               // psrlq    xmm6, 61
	LONG $0x6f0f4166; BYTE $0xe0               // movdqa    xmm4, xmm8
	LONG $0xf4730f66; BYTE $0x03               // psllq    xmm4, 3
	LONG $0xe6eb0f66                           // por    xmm4, xmm6
	LONG $0x6def0f66; BYTE $0x70               // pxor    xmm5, oword 112[rbp]
	LONG $0xd40f4466; BYTE $0xcd               // paddq    xmm9, xmm5
	LONG $0x6f0f4166; BYTE $0xf1               // movdqa    xmm6, xmm9
	LONG $0xd6730f66; BYTE $0x3d               // psrlq    xmm6, 61
	LONG $0x6f0f4566; BYTE $0xf1               // movdqa    xmm14, xmm9
	LONG $0x730f4166; WORD $0x03f6             // psllq    xmm14, 3
	LONG $0xeb0f4466; BYTE $0xf6               // por    xmm14, xmm6
	LONG $0xdad40f66                           // paddq    xmm3, xmm2
	LONG $0xd40f4166; BYTE $0xe3               // paddq    xmm4, xmm11
	LONG $0xd40f4466; BYTE $0xf5               // paddq    xmm14, xmm5
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x6d0f4166; BYTE $0xd5               // punpckhqdq    xmm2, xmm13
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xd5730f66; BYTE $0x30               // psrlq    xmm5, 48
	LONG $0xf2730f66; BYTE $0x10               // psllq    xmm2, 16
	LONG $0xd5eb0f66                           // por    xmm2, xmm5
	LONG $0xd40f4166; BYTE $0xcd               // paddq    xmm1, xmm13
	LONG $0x7e0f41f3; BYTE $0xed               // movq    xmm5, xmm13
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xd5730f66; BYTE $0x1d               // psrlq    xmm5, 29
	LONG $0xf0730f66; BYTE $0x23               // psllq    xmm0, 35
	LONG $0xc5eb0f66                           // por    xmm0, xmm5
	LONG $0xedef0f66                           // pxor    xmm5, xmm5
	LONG $0xe86d0f66                           // punpckhqdq    xmm5, xmm0
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xd6730f66; BYTE $0x30               // psrlq    xmm6, 48
	LONG $0xf5730f66; BYTE $0x10               // psllq    xmm5, 16
	LONG $0xeeeb0f66                           // por    xmm5, xmm6
	LONG $0x6f0f4166; BYTE $0xf0               // movdqa    xmm6, xmm8
	LONG $0xd6730f66; BYTE $0x35               // psrlq    xmm6, 53
	LONG $0x730f4166; WORD $0x0bf0             // psllq    xmm8, 11
	LONG $0xeb0f4466; BYTE $0xc6               // por    xmm8, xmm6
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0x6d0f4166; BYTE $0xf0               // punpckhqdq    xmm6, xmm8
	LONG $0x6f0f4466; BYTE $0xde               // movdqa    xmm11, xmm6
	LONG $0x730f4166; WORD $0x30d3             // psrlq    xmm11, 48
	LONG $0xf6730f66; BYTE $0x10               // psllq    xmm6, 16
	LONG $0xeb0f4166; BYTE $0xf3               // por    xmm6, xmm11
	LONG $0x7e0f45f3; BYTE $0xc0               // movq    xmm8, xmm8
	LONG $0xef0f4166; BYTE $0xf0               // pxor    xmm6, xmm8
	LONG $0x6f0f4566; BYTE $0xc1               // movdqa    xmm8, xmm9
	LONG $0x730f4166; WORD $0x15d0             // psrlq    xmm8, 21
	LONG $0x730f4166; WORD $0x2bf1             // psllq    xmm9, 43
	LONG $0xeb0f4566; BYTE $0xc8               // por    xmm9, xmm8
	LONG $0xef0f4566; BYTE $0xed               // pxor    xmm13, xmm13
	LONG $0x6d0f4566; BYTE $0xe9               // punpckhqdq    xmm13, xmm9
	LONG $0x6f0f4566; BYTE $0xc5               // movdqa    xmm8, xmm13
	LONG $0x730f4166; WORD $0x30d0             // psrlq    xmm8, 48
	LONG $0x730f4166; WORD $0x10f5             // psllq    xmm13, 16
	LONG $0xeb0f4566; BYTE $0xe8               // por    xmm13, xmm8
	LONG $0x6f0f4466; BYTE $0xdb               // movdqa    xmm11, xmm3
	LONG $0x6c0f4466; BYTE $0xd9               // punpcklqdq    xmm11, xmm1
	LONG $0xcb6d0f66                           // punpckhqdq    xmm1, xmm3
	LONG $0x6f0f4566; BYTE $0xfe               // movdqa    xmm15, xmm14
	LONG $0x6c0f4466; BYTE $0xfc               // punpcklqdq    xmm15, xmm4
	LONG $0x6d0f4166; BYTE $0xe6               // punpckhqdq    xmm4, xmm14
	LONG $0xed700f66; BYTE $0x4e               // pshufd    xmm5, xmm5, 78
	LONG $0xf8730f66; BYTE $0x08               // pslldq    xmm0, 8
	LONG $0xc5ef0f66                           // pxor    xmm0, xmm5
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe86c0f66                           // punpcklqdq    xmm5, xmm0
	LONG $0xc26d0f66                           // punpckhqdq    xmm0, xmm2
	LONG $0x700f4166; WORD $0x4ed5             // pshufd    xmm2, xmm13, 78
	LONG $0x730f4166; WORD $0x08f9             // pslldq    xmm9, 8
	LONG $0xef0f4466; BYTE $0xca               // pxor    xmm9, xmm2
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0x6c0f4566; BYTE $0xf1               // punpcklqdq    xmm14, xmm9
	LONG $0x6d0f4466; BYTE $0xce               // punpckhqdq    xmm9, xmm6
	LONG $0x0000f0b8; BYTE $0x00               // mov    eax, 240
	MOVQ ·step(SB), CX                         //  lea    rcx, [rip + _g_StepConstants]
LBB2_14:
	LONG $0x54700f66; WORD $0x1024; BYTE $0x4e         // pshufd    xmm2, oword [rsp + 16], 78
	LONG $0x5c6f0f66; WORD $0x2024                     // movdqa    xmm3, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xe3                       // movdqa    xmm12, xmm3
	LONG $0x6d0f4466; BYTE $0xe2                       // punpckhqdq    xmm12, xmm2
	LONG $0xd36c0f66                                   // punpcklqdq    xmm2, xmm3
	LONG $0x74700f66; WORD $0x5024; BYTE $0x4e         // pshufd    xmm6, oword [rsp + 80], 78
	LONG $0x6f0f4466; WORD $0x2404                     // movdqa    xmm8, oword [rsp]
	LONG $0x6f0f4166; BYTE $0xf8                       // movdqa    xmm7, xmm8
	LONG $0xfe6d0f66                                   // punpckhqdq    xmm7, xmm6
	LONG $0x6c0f4166; BYTE $0xf0                       // punpcklqdq    xmm6, xmm8
	QUAD $0x00e024846f0f4466; WORD $0x0000             // movdqa    xmm8, oword [rsp + 224]
	QUAD $0x010024847f0f4466; WORD $0x0000             // movdqa    oword [rsp + 256], xmm8
	QUAD $0x00d024946f0f4466; WORD $0x0000             // movdqa    xmm10, oword [rsp + 208]
	LONG $0x7f0f4466; WORD $0x2454; BYTE $0x10         // movdqa    oword [rsp + 16], xmm10
	QUAD $0x000000b0249c280f                           // movaps    xmm3, oword [rsp + 176]
	LONG $0x241c290f                                   // movaps    oword [rsp], xmm3
	QUAD $0x00c024ac6f0f4466; WORD $0x0000             // movdqa    xmm13, oword [rsp + 192]
	QUAD $0x000090249c700f66; WORD $0x4e00             // pshufd    xmm3, oword [rsp + 144], 78
	LONG $0xd40f4166; BYTE $0xda                       // paddq    xmm3, xmm10
	QUAD $0x0000c0249c7f0f66; BYTE $0x00               // movdqa    oword [rsp + 192], xmm3
	QUAD $0x00a02494700f4466; WORD $0x0000; BYTE $0x4e // pshufd    xmm10, oword [rsp + 160], 78
	LONG $0xd40f4566; BYTE $0xd0                       // paddq    xmm10, xmm8
	QUAD $0x00b024947f0f4466; WORD $0x0000             // movdqa    oword [rsp + 176], xmm10
	LONG $0xef0f4466; BYTE $0xfb                       // pxor    xmm15, xmm3
	LONG $0xef0f4566; BYTE $0xda                       // pxor    xmm11, xmm10
	LONG $0xd40f4566; BYTE $0xfb                       // paddq    xmm15, xmm11
	LONG $0x6f0f4566; BYTE $0xc7                       // movdqa    xmm8, xmm15
	LONG $0x730f4166; WORD $0x29d0                     // psrlq    xmm8, 41
	LONG $0x730f4166; WORD $0x17f7                     // psllq    xmm15, 23
	LONG $0xeb0f4566; BYTE $0xf8                       // por    xmm15, xmm8
	LONG $0xd40f4466; WORD $0x246c; BYTE $0x60         // paddq    xmm13, oword [rsp + 96]
	QUAD $0x009024ac7f0f4466; WORD $0x0000             // movdqa    oword [rsp + 144], xmm13
	LONG $0x1c6f0f66; BYTE $0x24                       // movdqa    xmm3, oword [rsp]
	LONG $0x5cd40f66; WORD $0x7024                     // paddq    xmm3, oword [rsp + 112]
	QUAD $0x0000a0249c7f0f66; BYTE $0x00               // movdqa    oword [rsp + 160], xmm3
	LONG $0xef0f4166; BYTE $0xe5                       // pxor    xmm4, xmm13
	LONG $0xcbef0f66                                   // pxor    xmm1, xmm3
	LONG $0xe1d40f66                                   // paddq    xmm4, xmm1
	LONG $0xdc6f0f66                                   // movdqa    xmm3, xmm4
	LONG $0xf4730f66; BYTE $0x17                       // psllq    xmm4, 23
	LONG $0xd3730f66; BYTE $0x29                       // psrlq    xmm3, 41
	LONG $0xe3eb0f66                                   // por    xmm4, xmm3
	LONG $0x54d40f66; WORD $0x3024                     // paddq    xmm2, oword [rsp + 48]
	LONG $0x547f0f66; WORD $0x2024                     // movdqa    oword [rsp + 32], xmm2
	LONG $0x74d40f66; WORD $0x4024                     // paddq    xmm6, oword [rsp + 64]
	LONG $0x347f0f66; BYTE $0x24                       // movdqa    oword [rsp], xmm6
	LONG $0xef0f4466; BYTE $0xf2                       // pxor    xmm14, xmm2
	LONG $0xeeef0f66                                   // pxor    xmm5, xmm6
	LONG $0xd40f4466; BYTE $0xf5                       // paddq    xmm14, xmm5
	LONG $0x6f0f4166; BYTE $0xd6                       // movdqa    xmm2, xmm14
	LONG $0xd2730f66; BYTE $0x29                       // psrlq    xmm2, 41
	LONG $0x730f4166; WORD $0x17f6                     // psllq    xmm14, 23
	LONG $0xeb0f4466; BYTE $0xf2                       // por    xmm14, xmm2
	QUAD $0x00f024946f0f4466; WORD $0x0000             // movdqa    xmm10, oword [rsp + 240]
	LONG $0xd40f4566; BYTE $0xe2                       // paddq    xmm12, xmm10
	QUAD $0x00008024bcd40f66; BYTE $0x00               // paddq    xmm7, oword [rsp + 128]
	LONG $0x7c7f0f66; WORD $0x5024                     // movdqa    oword [rsp + 80], xmm7
	LONG $0xef0f4566; BYTE $0xcc                       // pxor    xmm9, xmm12
	LONG $0xc7ef0f66                                   // pxor    xmm0, xmm7
	LONG $0xd40f4466; BYTE $0xc8                       // paddq    xmm9, xmm0
	LONG $0x6f0f4166; BYTE $0xd1                       // movdqa    xmm2, xmm9
	LONG $0x730f4166; WORD $0x17f1                     // psllq    xmm9, 23
	LONG $0xd2730f66; BYTE $0x29                       // psrlq    xmm2, 41
	LONG $0xeb0f4466; BYTE $0xca                       // por    xmm9, xmm2
	LONG $0x64ef0f66; WORD $0xa008                     // pxor    xmm4, oword [rax + rcx - 96]
	LONG $0xccd40f66                                   // paddq    xmm1, xmm4
	LONG $0xd16f0f66                                   // movdqa    xmm2, xmm1
	LONG $0xd2730f66; BYTE $0x05                       // psrlq    xmm2, 5
	LONG $0xd96f0f66                                   // movdqa    xmm3, xmm1
	LONG $0xf3730f66; BYTE $0x3b                       // psllq    xmm3, 59
	LONG $0xdaeb0f66                                   // por    xmm3, xmm2
	LONG $0xef0f4466; WORD $0x0874; BYTE $0xb0         // pxor    xmm14, oword [rax + rcx - 80]
	LONG $0xd40f4166; BYTE $0xee                       // paddq    xmm5, xmm14
	LONG $0xf56f0f66                                   // movdqa    xmm6, xmm5
	LONG $0xd6730f66; BYTE $0x05                       // psrlq    xmm6, 5
	LONG $0xd56f0f66                                   // movdqa    xmm2, xmm5
	LONG $0xf2730f66; BYTE $0x3b                       // psllq    xmm2, 59
	LONG $0xd6eb0f66                                   // por    xmm2, xmm6
	LONG $0xef0f4466; WORD $0x084c; BYTE $0xc0         // pxor    xmm9, oword [rax + rcx - 64]
	LONG $0xd40f4166; BYTE $0xc1                       // paddq    xmm0, xmm9
	LONG $0x6f0f4466; BYTE $0xc0                       // movdqa    xmm8, xmm0
	LONG $0x730f4166; WORD $0x05d0                     // psrlq    xmm8, 5
	LONG $0xf06f0f66                                   // movdqa    xmm6, xmm0
	LONG $0xf6730f66; BYTE $0x3b                       // psllq    xmm6, 59
	LONG $0xeb0f4166; BYTE $0xf0                       // por    xmm6, xmm8
	LONG $0xdcd40f66                                   // paddq    xmm3, xmm4
	LONG $0xd40f4166; BYTE $0xf1                       // paddq    xmm6, xmm9
	LONG $0xd40f4166; BYTE $0xd6                       // paddq    xmm2, xmm14
	LONG $0xef0f4466; WORD $0x087c; BYTE $0x90         // pxor    xmm15, oword [rax + rcx - 112]
	LONG $0xd40f4566; BYTE $0xdf                       // paddq    xmm11, xmm15
	LONG $0x6f0f4166; BYTE $0xe3                       // movdqa    xmm4, xmm11
	LONG $0xd4730f66; BYTE $0x05                       // psrlq    xmm4, 5
	LONG $0x730f4166; WORD $0x3bf3                     // psllq    xmm11, 59
	LONG $0xeb0f4466; BYTE $0xdc                       // por    xmm11, xmm4
	LONG $0x6f0f4566; BYTE $0xc3                       // movdqa    xmm8, xmm11
	LONG $0x730f4166; WORD $0x30d0                     // psrlq    xmm8, 48
	LONG $0xf4730f66; BYTE $0x10                       // psllq    xmm4, 16
	LONG $0xeb0f4166; BYTE $0xe0                       // por    xmm4, xmm8
	LONG $0x6f0f4466; BYTE $0xc5                       // movdqa    xmm8, xmm5
	LONG $0x730f4166; WORD $0x3dd0                     // psrlq    xmm8, 61
	LONG $0xf5730f66; BYTE $0x03                       // psllq    xmm5, 3
	LONG $0xeb0f4166; BYTE $0xe8                       // por    xmm5, xmm8
	LONG $0xd40f4566; BYTE $0xfb                       // paddq    xmm15, xmm11
	LONG $0x6f0f4466; BYTE $0xf3                       // movdqa    xmm14, xmm3
	LONG $0x6c0f4566; BYTE $0xf7                       // punpcklqdq    xmm14, xmm15
	LONG $0x6d0f4466; BYTE $0xfb                       // punpckhqdq    xmm15, xmm3
	LONG $0x6f0f4466; BYTE $0xce                       // movdqa    xmm9, xmm6
	LONG $0x6c0f4466; BYTE $0xca                       // punpcklqdq    xmm9, xmm2
	LONG $0xd66d0f66                                   // punpckhqdq    xmm2, xmm6
	LONG $0xd96f0f66                                   // movdqa    xmm3, xmm1
	LONG $0xd3730f66; BYTE $0x25                       // psrlq    xmm3, 37
	LONG $0xf1730f66; BYTE $0x1b                       // psllq    xmm1, 27
	LONG $0xd9eb0f66                                   // por    xmm3, xmm1
	LONG $0xfb700f66; BYTE $0x44                       // pshufd    xmm7, xmm3, 68
	LONG $0xdb730f66; BYTE $0x08                       // psrldq    xmm3, 8
	LONG $0xf3730f66; BYTE $0x10                       // psllq    xmm3, 16
	LONG $0xfbef0f66                                   // pxor    xmm7, xmm3
	LONG $0xfc6d0f66                                   // punpckhqdq    xmm7, xmm4
	LONG $0xe56f0f66                                   // movdqa    xmm4, xmm5
	LONG $0xd4730f66; BYTE $0x30                       // psrlq    xmm4, 48
	LONG $0x6f0f4466; BYTE $0xed                       // movdqa    xmm13, xmm5
	LONG $0x730f4166; WORD $0x10f5                     // psllq    xmm13, 16
	LONG $0xeb0f4466; BYTE $0xec                       // por    xmm13, xmm4
	LONG $0xd9730f66; BYTE $0x0e                       // psrldq    xmm1, 14
	LONG $0xcbeb0f66                                   // por    xmm1, xmm3
	LONG $0x6c0f4466; BYTE $0xd9                       // punpcklqdq    xmm11, xmm1
	LONG $0xd86f0f66                                   // movdqa    xmm3, xmm0
	LONG $0xd3730f66; BYTE $0x1d                       // psrlq    xmm3, 29
	LONG $0xf0730f66; BYTE $0x23                       // psllq    xmm0, 35
	LONG $0xd8eb0f66                                   // por    xmm3, xmm0
	LONG $0xf3700f66; BYTE $0x44                       // pshufd    xmm6, xmm3, 68
	LONG $0xdb730f66; BYTE $0x08                       // psrldq    xmm3, 8
	LONG $0xf3730f66; BYTE $0x10                       // psllq    xmm3, 16
	LONG $0xd8730f66; BYTE $0x0e                       // psrldq    xmm0, 14
	LONG $0xf3ef0f66                                   // pxor    xmm6, xmm3
	LONG $0xc3eb0f66                                   // por    xmm0, xmm3
	LONG $0xe86c0f66                                   // punpcklqdq    xmm5, xmm0
	LONG $0x700f4566; WORD $0x4ec2                     // pshufd    xmm8, xmm10, 78
	LONG $0x446f0f66; WORD $0x3024                     // movdqa    xmm0, oword [rsp + 48]
	LONG $0x6f0f4466; BYTE $0xd0                       // movdqa    xmm10, xmm0
	LONG $0x6d0f4566; BYTE $0xd0                       // punpckhqdq    xmm10, xmm8
	LONG $0x6c0f4466; BYTE $0xc0                       // punpcklqdq    xmm8, xmm0
	LONG $0x6d0f4166; BYTE $0xf5                       // punpckhqdq    xmm6, xmm13
	QUAD $0x00008024a4700f66; WORD $0x4e00             // pshufd    xmm4, oword [rsp + 128], 78
	LONG $0x446f0f66; WORD $0x4024                     // movdqa    xmm0, oword [rsp + 64]
	LONG $0xd86f0f66                                   // movdqa    xmm3, xmm0
	LONG $0xdc6d0f66                                   // punpckhqdq    xmm3, xmm4
	LONG $0xe06c0f66                                   // punpcklqdq    xmm4, xmm0
	LONG $0x4c700f66; WORD $0x6024; BYTE $0x4e         // pshufd    xmm1, oword [rsp + 96], 78
	LONG $0x44700f66; WORD $0x7024; BYTE $0x4e         // pshufd    xmm0, oword [rsp + 112], 78
	QUAD $0x0000c0248cd40f66; BYTE $0x00               // paddq    xmm1, oword [rsp + 192]
	QUAD $0x0000b02484d40f66; BYTE $0x00               // paddq    xmm0, oword [rsp + 176]
	QUAD $0x0000d0248c7f0f66; BYTE $0x00               // movdqa    oword [rsp + 208], xmm1
	LONG $0xef0f4466; BYTE $0xc9                       // pxor    xmm9, xmm1
	QUAD $0x0000e024847f0f66; BYTE $0x00               // movdqa    oword [rsp + 224], xmm0
	LONG $0xef0f4466; BYTE $0xf0                       // pxor    xmm14, xmm0
	LONG $0xd40f4566; BYTE $0xce                       // paddq    xmm9, xmm14
	LONG $0x6f0f4566; BYTE $0xe9                       // movdqa    xmm13, xmm9
	LONG $0x730f4166; WORD $0x39d5                     // psrlq    xmm13, 57
	LONG $0x730f4166; WORD $0x07f1                     // psllq    xmm9, 7
	LONG $0xeb0f4566; BYTE $0xcd                       // por    xmm9, xmm13
	LONG $0x446f0f66; WORD $0x1024                     // movdqa    xmm0, oword [rsp + 16]
	QUAD $0x0000902484d40f66; BYTE $0x00               // paddq    xmm0, oword [rsp + 144]
	QUAD $0x010024ac6f0f4466; WORD $0x0000             // movdqa    xmm13, oword [rsp + 256]
	QUAD $0x00a024acd40f4466; WORD $0x0000             // paddq    xmm13, oword [rsp + 160]
	LONG $0x447f0f66; WORD $0x6024                     // movdqa    oword [rsp + 96], xmm0
	LONG $0xd0ef0f66                                   // pxor    xmm2, xmm0
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x70         // movdqa    oword [rsp + 112], xmm13
	LONG $0xef0f4566; BYTE $0xfd                       // pxor    xmm15, xmm13
	LONG $0xd40f4166; BYTE $0xd7                       // paddq    xmm2, xmm15
	LONG $0x6f0f4466; BYTE $0xea                       // movdqa    xmm13, xmm2
	LONG $0x730f4166; WORD $0x39d5                     // psrlq    xmm13, 57
	LONG $0xf2730f66; BYTE $0x07                       // psllq    xmm2, 7
	LONG $0xeb0f4166; BYTE $0xd5                       // por    xmm2, xmm13
	LONG $0xd40f4466; WORD $0x2444; BYTE $0x20         // paddq    xmm8, oword [rsp + 32]
	LONG $0x24d40f66; BYTE $0x24                       // paddq    xmm4, oword [rsp]
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x30         // movdqa    oword [rsp + 48], xmm8
	LONG $0xef0f4166; BYTE $0xe8                       // pxor    xmm5, xmm8
	LONG $0x647f0f66; WORD $0x4024                     // movdqa    oword [rsp + 64], xmm4
	LONG $0xef0f4466; BYTE $0xdc                       // pxor    xmm11, xmm4
	LONG $0xd40f4166; BYTE $0xeb                       // paddq    xmm5, xmm11
	LONG $0xe56f0f66                                   // movdqa    xmm4, xmm5
	LONG $0xd4730f66; BYTE $0x39                       // psrlq    xmm4, 57
	LONG $0xf5730f66; BYTE $0x07                       // psllq    xmm5, 7
	LONG $0xeceb0f66                                   // por    xmm5, xmm4
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x10         // movdqa    oword [rsp + 16], xmm12
	LONG $0xd40f4566; BYTE $0xd4                       // paddq    xmm10, xmm12
	LONG $0x5cd40f66; WORD $0x5024                     // paddq    xmm3, oword [rsp + 80]
	QUAD $0x00f024947f0f4466; WORD $0x0000             // movdqa    oword [rsp + 240], xmm10
	LONG $0xef0f4166; BYTE $0xf2                       // pxor    xmm6, xmm10
	QUAD $0x000080249c7f0f66; BYTE $0x00               // movdqa    oword [rsp + 128], xmm3
	LONG $0xfbef0f66                                   // pxor    xmm7, xmm3
	LONG $0xf7d40f66                                   // paddq    xmm6, xmm7
	LONG $0xe66f0f66                                   // movdqa    xmm4, xmm6
	LONG $0xf6730f66; BYTE $0x07                       // psllq    xmm6, 7
	LONG $0xef0f4466; WORD $0x084c; BYTE $0xd0         // pxor    xmm9, oword [rax + rcx - 48]
	LONG $0xd4730f66; BYTE $0x39                       // psrlq    xmm4, 57
	LONG $0xf4eb0f66                                   // por    xmm6, xmm4
	LONG $0xd40f4566; BYTE $0xf1                       // paddq    xmm14, xmm9
	LONG $0x6f0f4166; BYTE $0xe6                       // movdqa    xmm4, xmm14
	LONG $0xd4730f66; BYTE $0x3d                       // psrlq    xmm4, 61
	LONG $0x730f4166; WORD $0x03f6                     // psllq    xmm14, 3
	LONG $0xeb0f4466; BYTE $0xf4                       // por    xmm14, xmm4
	LONG $0x54ef0f66; WORD $0xe008                     // pxor    xmm2, oword [rax + rcx - 32]
	LONG $0xd40f4466; BYTE $0xfa                       // paddq    xmm15, xmm2
	LONG $0x6f0f4166; BYTE $0xe7                       // movdqa    xmm4, xmm15
	LONG $0xd4730f66; BYTE $0x3d                       // psrlq    xmm4, 61
	LONG $0x6f0f4566; BYTE $0xc7                       // movdqa    xmm8, xmm15
	LONG $0x730f4166; WORD $0x03f0                     // psllq    xmm8, 3
	LONG $0xeb0f4466; BYTE $0xc4                       // por    xmm8, xmm4
	LONG $0x6cef0f66; WORD $0xf008                     // pxor    xmm5, oword [rax + rcx - 16]
	LONG $0xd40f4466; BYTE $0xdd                       // paddq    xmm11, xmm5
	LONG $0x6f0f4566; BYTE $0xeb                       // movdqa    xmm13, xmm11
	LONG $0x730f4166; WORD $0x3dd5                     // psrlq    xmm13, 61
	LONG $0x6f0f4166; BYTE $0xe3                       // movdqa    xmm4, xmm11
	LONG $0xf4730f66; BYTE $0x03                       // psllq    xmm4, 3
	LONG $0xeb0f4166; BYTE $0xe5                       // por    xmm4, xmm13
	LONG $0xd40f4466; BYTE $0xc2                       // paddq    xmm8, xmm2
	LONG $0xe5d40f66                                   // paddq    xmm4, xmm5
	LONG $0x34ef0f66; BYTE $0x08                       // pxor    xmm6, oword [rax + rcx]
	LONG $0xfed40f66                                   // paddq    xmm7, xmm6
	LONG $0xd76f0f66                                   // movdqa    xmm2, xmm7
	LONG $0xd2730f66; BYTE $0x3d                       // psrlq    xmm2, 61
	LONG $0xef6f0f66                                   // movdqa    xmm5, xmm7
	LONG $0xf5730f66; BYTE $0x03                       // psllq    xmm5, 3
	LONG $0xeaeb0f66                                   // por    xmm5, xmm2
	LONG $0xeed40f66                                   // paddq    xmm5, xmm6
	LONG $0xd2ef0f66                                   // pxor    xmm2, xmm2
	LONG $0x6d0f4166; BYTE $0xd6                       // punpckhqdq    xmm2, xmm14
	LONG $0xca6f0f66                                   // movdqa    xmm1, xmm2
	LONG $0xd1730f66; BYTE $0x30                       // psrlq    xmm1, 48
	LONG $0xf2730f66; BYTE $0x10                       // psllq    xmm2, 16
	LONG $0xd1eb0f66                                   // por    xmm2, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                       // movdqa    xmm1, xmm11
	LONG $0xd1730f66; BYTE $0x35                       // psrlq    xmm1, 53
	LONG $0x730f4166; WORD $0x0bf3                     // psllq    xmm11, 11
	LONG $0xeb0f4466; BYTE $0xd9                       // por    xmm11, xmm1
	LONG $0xef0f4566; BYTE $0xed                       // pxor    xmm13, xmm13
	LONG $0x6d0f4566; BYTE $0xeb                       // punpckhqdq    xmm13, xmm11
	LONG $0x6f0f4166; BYTE $0xcd                       // movdqa    xmm1, xmm13
	LONG $0x730f4166; WORD $0x10f5                     // psllq    xmm13, 16
	LONG $0xd1730f66; BYTE $0x30                       // psrlq    xmm1, 48
	LONG $0xeb0f4466; BYTE $0xe9                       // por    xmm13, xmm1
	LONG $0xd40f4566; BYTE $0xce                       // paddq    xmm9, xmm14
	LONG $0x7e0f41f3; BYTE $0xce                       // movq    xmm1, xmm14
	LONG $0xd1ef0f66                                   // pxor    xmm2, xmm1
	LONG $0x7e0f41f3; BYTE $0xcb                       // movq    xmm1, xmm11
	LONG $0xef0f4466; BYTE $0xe9                       // pxor    xmm13, xmm1
	LONG $0x6f0f4566; BYTE $0xd8                       // movdqa    xmm11, xmm8
	LONG $0x6c0f4566; BYTE $0xd9                       // punpcklqdq    xmm11, xmm9
	LONG $0x6f0f4166; BYTE $0xc9                       // movdqa    xmm1, xmm9
	LONG $0x6d0f4166; BYTE $0xc8                       // punpckhqdq    xmm1, xmm8
	LONG $0x6f0f4166; BYTE $0xc7                       // movdqa    xmm0, xmm15
	LONG $0x6f0f4566; BYTE $0xc7                       // movdqa    xmm8, xmm15
	LONG $0x6f0f4466; BYTE $0xfd                       // movdqa    xmm15, xmm5
	LONG $0x6c0f4466; BYTE $0xfc                       // punpcklqdq    xmm15, xmm4
	LONG $0xe56d0f66                                   // punpckhqdq    xmm4, xmm5
	LONG $0xd0730f66; BYTE $0x1d                       // psrlq    xmm0, 29
	LONG $0x730f4166; WORD $0x23f0                     // psllq    xmm8, 35
	LONG $0xeb0f4166; BYTE $0xc0                       // por    xmm0, xmm8
	LONG $0xe86f0f66                                   // movdqa    xmm5, xmm0
	LONG $0xdd730f66; BYTE $0x08                       // psrldq    xmm5, 8
	LONG $0xf5730f66; BYTE $0x10                       // psllq    xmm5, 16
	LONG $0x730f4166; WORD $0x0ed8                     // psrldq    xmm8, 14
	LONG $0xeb0f4466; BYTE $0xc5                       // por    xmm8, xmm5
	LONG $0xf8730f66; BYTE $0x08                       // pslldq    xmm0, 8
	LONG $0xef0f4166; BYTE $0xc0                       // pxor    xmm0, xmm8
	LONG $0xea6f0f66                                   // movdqa    xmm5, xmm2
	LONG $0xe86c0f66                                   // punpcklqdq    xmm5, xmm0
	LONG $0xc26d0f66                                   // punpckhqdq    xmm0, xmm2
	LONG $0x6f0f4466; BYTE $0xcf                       // movdqa    xmm9, xmm7
	LONG $0x730f4166; WORD $0x15d1                     // psrlq    xmm9, 21
	LONG $0xf7730f66; BYTE $0x2b                       // psllq    xmm7, 43
	LONG $0xeb0f4466; BYTE $0xcf                       // por    xmm9, xmm7
	LONG $0x6f0f4166; BYTE $0xd1                       // movdqa    xmm2, xmm9
	LONG $0xda730f66; BYTE $0x08                       // psrldq    xmm2, 8
	LONG $0xdf730f66; BYTE $0x0e                       // psrldq    xmm7, 14
	LONG $0xf2730f66; BYTE $0x10                       // psllq    xmm2, 16
	LONG $0xfaeb0f66                                   // por    xmm7, xmm2
	LONG $0x730f4166; WORD $0x08f9                     // pslldq    xmm9, 8
	LONG $0xef0f4466; BYTE $0xcf                       // pxor    xmm9, xmm7
	LONG $0x6f0f4566; BYTE $0xf5                       // movdqa    xmm14, xmm13
	LONG $0x6c0f4566; BYTE $0xf1                       // punpcklqdq    xmm14, xmm9
	LONG $0x6d0f4566; BYTE $0xcd                       // punpckhqdq    xmm9, xmm13
	LONG $0x80e88348                                   // sub    rax, -128
	LONG $0x07703d48; WORD $0x0000                     // cmp    rax, 1904
	JNE  LBB2_14
	LONG $0x54700f66; WORD $0x1024; BYTE $0x4e         // pshufd    xmm2, oword [rsp + 16], 78
	LONG $0xf26f0f66                                   // movdqa    xmm6, xmm2
	LONG $0x6f0f4466; WORD $0x2464; BYTE $0x20         // movdqa    xmm12, oword [rsp + 32]
	LONG $0x6c0f4166; BYTE $0xf4                       // punpcklqdq    xmm6, xmm12
	LONG $0x6d0f4466; BYTE $0xe2                       // punpckhqdq    xmm12, xmm2
	LONG $0x7c700f66; WORD $0x5024; BYTE $0x4e         // pshufd    xmm7, oword [rsp + 80], 78
	LONG $0xd76f0f66                                   // movdqa    xmm2, xmm7
	LONG $0x6f0f4466; WORD $0x2404                     // movdqa    xmm8, oword [rsp]
	LONG $0x6c0f4166; BYTE $0xd0                       // punpcklqdq    xmm2, xmm8
	LONG $0x6d0f4466; BYTE $0xc7                       // punpckhqdq    xmm8, xmm7
	QUAD $0x00009024bc700f66; WORD $0x4e00             // pshufd    xmm7, oword [rsp + 144], 78
	QUAD $0x0000d0249c6f0f66; BYTE $0x00               // movdqa    xmm3, oword [rsp + 208]
	LONG $0xdfd40f66                                   // paddq    xmm3, xmm7
	LONG $0x6f0f4466; WORD $0x2454; BYTE $0x60         // movdqa    xmm10, oword [rsp + 96]
	QUAD $0x00c02494d40f4466; WORD $0x0000             // paddq    xmm10, oword [rsp + 192]
	LONG $0x74d40f66; WORD $0x3024                     // paddq    xmm6, oword [rsp + 48]
	QUAD $0x00f024a4d40f4466; WORD $0x0000             // paddq    xmm12, oword [rsp + 240]
	QUAD $0x0000a024bc700f66; WORD $0x4e00             // pshufd    xmm7, oword [rsp + 160], 78
	QUAD $0x00e024ac6f0f4466; WORD $0x0000             // movdqa    xmm13, oword [rsp + 224]
	LONG $0xd40f4466; BYTE $0xef                       // paddq    xmm13, xmm7
	LONG $0xef0f4466; BYTE $0xeb                       // pxor    xmm13, xmm3
	LONG $0x5c6f0f66; WORD $0x7024                     // movdqa    xmm3, oword [rsp + 112]
	QUAD $0x0000b0249cd40f66; BYTE $0x00               // paddq    xmm3, oword [rsp + 176]
	LONG $0xef0f4166; BYTE $0xda                       // pxor    xmm3, xmm10
	LONG $0x54d40f66; WORD $0x4024                     // paddq    xmm2, oword [rsp + 64]
	LONG $0xd6ef0f66                                   // pxor    xmm2, xmm6
	QUAD $0x00802484d40f4466; WORD $0x0000             // paddq    xmm8, oword [rsp + 128]
	LONG $0xef0f4566; BYTE $0xc4                       // pxor    xmm8, xmm12
	LONG $0xef0f4566; BYTE $0xeb                       // pxor    xmm13, xmm11
	LONG $0xef0f4566; BYTE $0xef                       // pxor    xmm13, xmm15
	LONG $0xd9ef0f66                                   // pxor    xmm3, xmm1
	LONG $0xdcef0f66                                   // pxor    xmm3, xmm4
	LONG $0xd5ef0f66                                   // pxor    xmm2, xmm5
	LONG $0xef0f4166; BYTE $0xd6                       // pxor    xmm2, xmm14
	LONG $0xef0f4466; BYTE $0xc0                       // pxor    xmm8, xmm0
	LONG $0xef0f4566; BYTE $0xc1                       // pxor    xmm8, xmm9
	LONG $0x7f0f44f3; BYTE $0x2e                       // movdqu    oword [rsi], xmm13
	LONG $0x5e7f0ff3; BYTE $0x10                       // movdqu    oword [rsi + 16], xmm3
	LONG $0x567f0ff3; BYTE $0x20                       // movdqu    oword [rsi + 32], xmm2
	LONG $0x7f0f44f3; WORD $0x3046                     // movdqu    oword [rsi + 48], xmm8

	MOVQ 272(SP), SP
	RET
