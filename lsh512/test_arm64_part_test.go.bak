package lsh512

import (
	"fmt"
	"strings"
	"testing"
)

func compair(t *testing.T, name string, input, answer []uint64) {
	for idx := range input {
		if input[idx] != answer[idx] {
			var sb strings.Builder

			for i := 0; i < (len(input)+7)/8; i++ {
				fmt.Fprintf(&sb, "\n%s[%2d]  answer  | ", name, i*8)
				for idx := 8 * i; idx < 8*i+8 && idx < len(input); idx++ {
					fmt.Fprintf(&sb, "  %016x", answer[idx])
				}
				fmt.Fprintf(&sb, "\n%s[%2d]  input   | ", name, i*8)
				for idx := 8 * i; idx < 8*i+8 && idx < len(input); idx++ {
					if input[idx] != answer[idx] {
						fmt.Fprintf(&sb, "  %016x", input[idx])
					} else {
						sb.WriteString("                  ")
					}
				}
			}

			t.Error(sb.String())
			return
		}
	}
}

func Test_add_blk(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	cv_r := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}

	add_blk(cv_l, cv_r)

	cv_l_a := []uint64{0xAA9C3EC75FC08928, 0xB1050CE28222F436, 0x21CFACAD7FB6DB03, 0xB953E8052FD3D16D, 0xD7D4D9EF625ADAB0, 0x6AFC2A80087B86FC, 0xA9818D3F6DEABDCA, 0x32E1C99360FE7280}
	cv_r_a := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "cv_r", cv_r, cv_r_a)
}

func Test_mix_even(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	cv_r := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}
	const_v := []uint64{0xecf9ae9414d41967, 0x5018f1dbf789934d, 0xfa5b52879155a74c, 0xca82d4d3cd278e7c, 0x688fdfdfe22316ad, 0x0f6555a4ba0d030a, 0xa2061df720f000f3, 0xe1a57dc5622fb3da}

	mix_even(cv_l, cv_r, const_v)

	cv_l_a := []uint64{0xE8C3E248403F5CAA, 0x8599DDEAFD00C811, 0x4B618C7C3BAEA66D, 0x245F72B2793DADA5, 0x45C7FFFC39493667, 0x608589D1F9C6B374, 0xDCDB6A976173E40E, 0x6856147AC7A2D4BB}
	cv_r_a := []uint64{0x596D9377BFBE0532, 0xFD49102FB646643F, 0x2AE965D39E7D0292, 0x861D5C4A3576FD42, 0x890D497F0039A6A6, 0x6A358E3655112421, 0xCF23D99F2A81ED9B, 0x7D4041117EA56C11}
	const_v_a := []uint64{0xECF9AE9414D41967, 0x5018F1DBF789934D, 0xFA5B52879155A74C, 0xCA82D4D3CD278E7C, 0x688FDFDFE22316AD, 0x0F6555A4BA0D030A, 0xA2061DF720F000F3, 0xE1A57DC5622FB3DA}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "cv_r", cv_r, cv_r_a)
	compair(t, "const_v", const_v, const_v_a)
}

func Test_mix_odd(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	cv_r := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}
	const_v := []uint64{0xecf9ae9414d41967, 0x5018f1dbf789934d, 0xfa5b52879155a74c, 0xca82d4d3cd278e7c, 0x688fdfdfe22316ad, 0x0f6555a4ba0d030a, 0xa2061df720f000f3, 0xe1a57dc5622fb3da}

	mix_odd(cv_l, cv_r, const_v)

	cv_l_a := []uint64{0xACFE3857530F6D5C, 0x9CC0C972E7BD80C6, 0x1FD368D4FF352C86, 0x88B91586ADF5DEB9, 0x29121FCE77B28593, 0xA606E99C32B4D351, 0xB5BF3C9E2523EACF, 0x1BB8BEE26029F52E}
	cv_r_a := []uint64{0x0A176B1B5E7EE02A, 0x48D800C9F8B1CA22, 0xB4FD05AA0246649C, 0xA61925423F428926, 0x2EF75FA86436CDA6, 0xFBAAE656123496D3, 0x75052852FEBA5C4F, 0x6B8A770A6D431301}
	const_v_a := []uint64{0xECF9AE9414D41967, 0x5018F1DBF789934D, 0xFA5B52879155A74C, 0xCA82D4D3CD278E7C, 0x688FDFDFE22316AD, 0x0F6555A4BA0D030A, 0xA2061DF720F000F3, 0xE1A57DC5622FB3DA}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "cv_r", cv_r, cv_r_a)
	compair(t, "const_v", const_v, const_v_a)
}

func Test_msg_add_even(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	cv_r := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}
	i_state := []uint64{
		0x97884283c938982a, 0xba1fca93533e2355, 0xc519a2e87aeb1c03, 0x9a0fc95462af17b1, 0xfc3dda8ab019a82b, 0x02825d079a895407, 0x79f2d0a7ee06a6f7, 0xd76d15eed9fdf5fe,
		0x1fcac64d01d0c2c1, 0xd9ea5de69161790f, 0xdebc8b6366071fc8, 0xa9d91db711c6c94b, 0x3a18653ac9c1d427, 0x84df64a223dd5b09, 0x6cc37895f4ad9e70, 0x448304c8d7f3f4d5,
		0xea91134ed29383e0, 0xc4484477f2da88e8, 0x9b47eec96d26e8a6, 0x82f6d4c8d89014f4, 0x527da0048b95fb61, 0x644406c60138648d, 0x303c0e8aa24c0edc, 0xc787cda0cbe8ca19,
		0x7ba46221661764ca, 0x0c8cbc6acd6371ac, 0xe336b836940f8f41, 0x79cb9da168a50976, 0xd01da49021915cb3, 0xa84accc7399cf1f1, 0x6c4a992cee5aeb0c, 0x4f556e6cb4b2e3e0,
	}

	msg_add_even(cv_l, cv_r, i_state[0:], i_state[8:], i_state[16:], i_state[24:])

	cv_l_a := []uint64{0x9BC85C1C21B9A27F, 0xF0408EF13BC31E60, 0x3A0A46BA49A47D29, 0x622DBF3561D122FB, 0x59CFF9F88C850AB6, 0x975B38A680646D7E, 0x7810E89257ADA43B, 0x85B989540C4EF3E8}
	cv_r_a := []uint64{0x8196E66A76EF8C12, 0xBF4F95668844CE0E, 0xFC0743382A606611, 0x68E86C133D935568, 0x0BFAD347EC7FEC34, 0x51FDA07CCE53168A, 0xCB5C2D9C4092248E, 0xA48E28105CB898BF}
	i_state_a := []uint64{
		0x97884283C938982A, 0xBA1FCA93533E2355, 0xC519A2E87AEB1C03, 0x9A0FC95462AF17B1, 0xFC3DDA8AB019A82B, 0x02825D079A895407, 0x79F2D0A7EE06A6F7, 0xD76D15EED9FDF5FE,
		0x1FCAC64D01D0C2C1, 0xD9EA5DE69161790F, 0xDEBC8B6366071FC8, 0xA9D91DB711C6C94B, 0x3A18653AC9C1D427, 0x84DF64A223DD5B09, 0x6CC37895F4AD9E70, 0x448304C8D7F3F4D5,
		0xEA91134ED29383E0, 0xC4484477F2DA88E8, 0x9B47EEC96D26E8A6, 0x82F6D4C8D89014F4, 0x527DA0048B95FB61, 0x644406C60138648D, 0x303C0E8AA24C0EDC, 0xC787CDA0CBE8CA19,
		0x7BA46221661764CA, 0x0C8CBC6ACD6371AC, 0xE336B836940F8F41, 0x79CB9DA168A50976, 0xD01DA49021915CB3, 0xA84ACCC7399CF1F1, 0x6C4A992CEE5AEB0C, 0x4F556E6CB4B2E3E0,
	}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "cv_r", cv_r, cv_r_a)
	compair(t, "i_state", i_state[:], i_state_a)
}

func Test_msg_add_odd(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	cv_r := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}
	i_state := []uint64{
		0x97884283c938982a, 0xba1fca93533e2355, 0xc519a2e87aeb1c03, 0x9a0fc95462af17b1, 0xfc3dda8ab019a82b, 0x02825d079a895407, 0x79f2d0a7ee06a6f7, 0xd76d15eed9fdf5fe,
		0x1fcac64d01d0c2c1, 0xd9ea5de69161790f, 0xdebc8b6366071fc8, 0xa9d91db711c6c94b, 0x3a18653ac9c1d427, 0x84df64a223dd5b09, 0x6cc37895f4ad9e70, 0x448304c8d7f3f4d5,
		0xea91134ed29383e0, 0xc4484477f2da88e8, 0x9b47eec96d26e8a6, 0x82f6d4c8d89014f4, 0x527da0048b95fb61, 0x644406c60138648d, 0x303c0e8aa24c0edc, 0xc787cda0cbe8ca19,
		0x7ba46221661764ca, 0x0c8cbc6acd6371ac, 0xe336b836940f8f41, 0x79cb9da168a50976, 0xd01da49021915cb3, 0xa84accc7399cf1f1, 0x6c4a992cee5aeb0c, 0x4f556e6cb4b2e3e0,
	}

	msg_add_odd(cv_l, cv_r, i_state[0:], i_state[8:], i_state[16:], i_state[24:])

	cv_l_a := []uint64{0xE6D10DD13A12B9B5, 0x8E1700159A27B5DD, 0x64540A9B5E69898C, 0x7AD4A2A9DBEE21BE, 0xF78F8376B70959FC, 0xF19D63671BD55DF4, 0x31DE36BF1BE70C10, 0x9553511A1E5BCC0F}
	cv_r_a := []uint64{0xE5F8420611282A19, 0x6A2974EAD446C6AD, 0xC18D706DD868F698, 0xB8FAEC0544F09555, 0xE1FF12ED042F64A0, 0x7D680819D412BC72, 0xCBD5CC255A6551F2, 0xAF5842B43FF98F8A}
	i_state_a := []uint64{
		0x97884283C938982A, 0xBA1FCA93533E2355, 0xC519A2E87AEB1C03, 0x9A0FC95462AF17B1, 0xFC3DDA8AB019A82B, 0x02825D079A895407, 0x79F2D0A7EE06A6F7, 0xD76D15EED9FDF5FE,
		0x1FCAC64D01D0C2C1, 0xD9EA5DE69161790F, 0xDEBC8B6366071FC8, 0xA9D91DB711C6C94B, 0x3A18653AC9C1D427, 0x84DF64A223DD5B09, 0x6CC37895F4AD9E70, 0x448304C8D7F3F4D5,
		0xEA91134ED29383E0, 0xC4484477F2DA88E8, 0x9B47EEC96D26E8A6, 0x82F6D4C8D89014F4, 0x527DA0048B95FB61, 0x644406C60138648D, 0x303C0E8AA24C0EDC, 0xC787CDA0CBE8CA19,
		0x7BA46221661764CA, 0x0C8CBC6ACD6371AC, 0xE336B836940F8F41, 0x79CB9DA168A50976, 0xD01DA49021915CB3, 0xA84ACCC7399CF1F1, 0x6C4A992CEE5AEB0C, 0x4F556E6CB4B2E3E0,
	}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "cv_r", cv_r, cv_r_a)
	compair(t, "i_state", i_state, i_state_a)
}

func Test_msg_exp_even(t *testing.T) {
	i_state := []uint64{
		0x97884283c938982a, 0xba1fca93533e2355, 0xc519a2e87aeb1c03, 0x9a0fc95462af17b1, 0xfc3dda8ab019a82b, 0x02825d079a895407, 0x79f2d0a7ee06a6f7, 0xd76d15eed9fdf5fe,
		0x1fcac64d01d0c2c1, 0xd9ea5de69161790f, 0xdebc8b6366071fc8, 0xa9d91db711c6c94b, 0x3a18653ac9c1d427, 0x84df64a223dd5b09, 0x6cc37895f4ad9e70, 0x448304c8d7f3f4d5,
		0xea91134ed29383e0, 0xc4484477f2da88e8, 0x9b47eec96d26e8a6, 0x82f6d4c8d89014f4, 0x527da0048b95fb61, 0x644406c60138648d, 0x303c0e8aa24c0edc, 0xc787cda0cbe8ca19,
		0x7ba46221661764ca, 0x0c8cbc6acd6371ac, 0xe336b836940f8f41, 0x79cb9da168a50976, 0xd01da49021915cb3, 0xa84accc7399cf1f1, 0x6c4a992cee5aeb0c, 0x4f556e6cb4b2e3e0,
	}

	msg_exp_even(i_state[0:], i_state[8:], i_state[16:], i_state[24:])

	i_state_a := []uint64{
		0x84A0DCA335429B91, 0x8961E7606DC5A4EB, 0x32D0314D365F80D0, 0x3D169F5C2BCE3849, 0x29EAB5F36593F15F, 0x6081E150B1520CB8, 0x32BE6B923CD562E3, 0x417A9E48B9EF7110,
		0x257D7FD877DE2E15, 0xEB4947CE336A9174, 0x03017E8395E05202, 0x53B5FB87FA068285, 0x14A0A958F9855188, 0xE2633202035EC618, 0xF129FDCF12384615, 0xBC18E702A9608250,
		0xEA91134ED29383E0, 0xC4484477F2DA88E8, 0x9B47EEC96D26E8A6, 0x82F6D4C8D89014F4, 0x527DA0048B95FB61, 0x644406C60138648D, 0x303C0E8AA24C0EDC, 0xC787CDA0CBE8CA19,
		0x7BA46221661764CA, 0x0C8CBC6ACD6371AC, 0xE336B836940F8F41, 0x79CB9DA168A50976, 0xD01DA49021915CB3, 0xA84ACCC7399CF1F1, 0x6C4A992CEE5AEB0C, 0x4F556E6CB4B2E3E0,
	}
	compair(t, "i_state[:16]", i_state[:16], i_state_a[:16])
}

func Test_msg_exp_odd(t *testing.T) {
	i_state := []uint64{
		0x97884283c938982a, 0xba1fca93533e2355, 0xc519a2e87aeb1c03, 0x9a0fc95462af17b1, 0xfc3dda8ab019a82b, 0x02825d079a895407, 0x79f2d0a7ee06a6f7, 0xd76d15eed9fdf5fe,
		0x1fcac64d01d0c2c1, 0xd9ea5de69161790f, 0xdebc8b6366071fc8, 0xa9d91db711c6c94b, 0x3a18653ac9c1d427, 0x84df64a223dd5b09, 0x6cc37895f4ad9e70, 0x448304c8d7f3f4d5,
		0xea91134ed29383e0, 0xc4484477f2da88e8, 0x9b47eec96d26e8a6, 0x82f6d4c8d89014f4, 0x527da0048b95fb61, 0x644406c60138648d, 0x303c0e8aa24c0edc, 0xc787cda0cbe8ca19,
		0x7ba46221661764ca, 0x0c8cbc6acd6371ac, 0xe336b836940f8f41, 0x79cb9da168a50976, 0xd01da49021915cb3, 0xa84accc7399cf1f1, 0x6c4a992cee5aeb0c, 0x4f556e6cb4b2e3e0,
	}

	msg_exp_odd(i_state[0:], i_state[8:], i_state[16:], i_state[24:])

	i_state_a := []uint64{
		0x97884283C938982A, 0xBA1FCA93533E2355, 0xC519A2E87AEB1C03, 0x9A0FC95462AF17B1, 0xFC3DDA8AB019A82B, 0x02825D079A895407, 0x79F2D0A7EE06A6F7, 0xD76D15EED9FDF5FE,
		0x1FCAC64D01D0C2C1, 0xD9EA5DE69161790F, 0xDEBC8B6366071FC8, 0xA9D91DB711C6C94B, 0x3A18653AC9C1D427, 0x84DF64A223DD5B09, 0x6CC37895F4AD9E70, 0x448304C8D7F3F4D5,
		0x1A7F174CA1C8AD1E, 0x5567B95CC0650BFB, 0xAFAAB6374D7E9FE3, 0x5E580DCC5589A099, 0xC3C5A82B7C027244, 0x54FFFD0C261F4F68, 0xDE36D76DEF3F0B84, 0x07A924797C4A04DA,
		0x999663EE6A75CC37, 0xBD21161D25710850, 0x5A60ED84CC1E8492, 0xB665DA21DF2A3AF7, 0x896DD3A77E74B807, 0x54FD0932456EB7BC, 0x150E455D2E4A9061, 0xB0CD9DF5C64EDFE1,
	}
	compair(t, "i_state[16:]", i_state[16:], i_state_a[16:])
}

func Test_rotate_blk_even_alpha(t *testing.T) {
	cv := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}

	rotate_blk_even_alpha(cv)

	cv_a := []uint64{0x4FF4409D2A86200F, 0x31347E9E9AA52FA2, 0x2919A7B0957F89F2, 0x3081BF1AA57C113B, 0xB91E4E514ED2F911, 0xD08D769CBCCAECB2, 0x1ADCD5816600F11C, 0x5D6AD9830B296A4E}
	compair(t, "cv", cv, cv_a)
}

func Test_rotate_blk_even_beta(t *testing.T) {
	cv := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}

	rotate_blk_even_beta(cv)

	cv_a := []uint64{0xA86200F4FF4409D2, 0xAA52FA231347E9E9, 0x57F89F22919A7B09, 0x57C113B3081BF1AA, 0xED2F911B91E4E514, 0xCCAECB2D08D769CB, 0x600F11C1ADCD5816, 0xB296A4E5D6AD9830}
	compair(t, "cv", cv, cv_a)
}

func Test_rotate_blk_odd_alpha(t *testing.T) {
	cv := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}

	rotate_blk_odd_alpha(cv)

	cv_a := []uint64{0x200F4FF4409D2A86, 0x2FA231347E9E9AA5, 0x89F22919A7B0957F, 0x113B3081BF1AA57C, 0xF911B91E4E514ED2, 0xECB2D08D769CBCCA, 0xF11C1ADCD5816600, 0x6A4E5D6AD9830B29}
	compair(t, "cv", cv, cv_a)
}

func Test_rotate_blk_odd_beta(t *testing.T) {
	cv := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}

	rotate_blk_odd_beta(cv)

	cv_a := []uint64{0x6200F4FF4409D2A8, 0x52FA231347E9E9AA, 0xF89F22919A7B0957, 0xC113B3081BF1AA57, 0x2F911B91E4E514ED, 0xAECB2D08D769CBCC, 0x0F11C1ADCD581660, 0x96A4E5D6AD9830B2}
	compair(t, "cv", cv, cv_a)
}

func Test_rotate_msg_gamma(t *testing.T) {
	cv := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}

	rotate_msg_gamma(cv)

	cv_a := []uint64{0x0C401E9FE8813A55, 0x446268FD3D354A5F, 0x334F612AFF13E452, 0x354AF8227661037E, 0xF223723C9CA29DA5, 0xA11AED397995D965, 0xAB02CC01E23835B9, 0x1652D49CBAD5B306}
	compair(t, "cv", cv, cv_a)
}

func Test_word_perm(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	cv_r := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}

	word_perm(cv_l, cv_r)

	cv_l_a := []uint64{0x01E23835B9AB02CC, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x52D49CBAD5B30616, 0x31E2B67D25BE3813, 0xE00D2CD88B4B6C6A, 0xA79F5509B43FBAFE, 0xD522C4DEED8E4D83}
	cv_r_a := []uint64{0xFF13E452334F612A, 0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xF8227661037E354A, 0x9E5C2027773F4ED3, 0xC13171A42C559C23, 0x22BBC85B4C6779D9, 0x66A5C8801925B701}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "cv_r", cv_r, cv_r_a)
}

func Test_xor_with_const(t *testing.T) {
	cv_l := []uint64{0x0C401E9FE8813A55, 0x4A5F446268FD3D35, 0xFF13E452334F612A, 0xF8227661037E354A, 0xA5F223723C9CA29D, 0x95D965A11AED3979, 0x01E23835B9AB02CC, 0x52D49CBAD5B30616}
	const_v := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}

	xor_with_const(cv_l, const_v)

	cv_l_a := []uint64{0x921C3EB89FBE7486, 0x2CFA8CE271D88A34, 0xDDA82C097F2818F3, 0x391307C52F2BA969, 0x9410950F19229A8E, 0x40FBA17FF76374FA, 0xA67D6D3C0D94B832, 0xB2D9B0625EF86A7C}
	cv_r_a := []uint64{0x9E5C2027773F4ED3, 0x66A5C8801925B701, 0x22BBC85B4C6779D9, 0xC13171A42C559C23, 0x31E2B67D25BE3813, 0xD522C4DEED8E4D83, 0xA79F5509B43FBAFE, 0xE00D2CD88B4B6C6A}
	compair(t, "cv_l", cv_l, cv_l_a)
	compair(t, "const_v", const_v, cv_r_a)
}
