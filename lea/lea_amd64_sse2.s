//go:build amd64 && gc && !purego
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·__lea_encrypt_4block(SB), $0-32

	MOVQ ct+0(FP), DI
	MOVQ pt+8(FP), SI
	MOVQ rk+16(FP), DX
	MOVQ round+24(FP), CX

	LONG $0x066f0ff3             // movdqu    xmm0, oword [rsi]
	LONG $0x4e6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rsi + 16]
	LONG $0x5e6f0ff3; BYTE $0x20 // movdqu    xmm3, oword [rsi + 32]
	LONG $0x6e6f0ff3; BYTE $0x30 // movdqu    xmm5, oword [rsi + 48]
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd1620f66             // punpckldq    xmm2, xmm1
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xe5620f66             // punpckldq    xmm4, xmm5
	LONG $0xc16a0f66             // punpckhdq    xmm0, xmm1
	LONG $0xdd6a0f66             // punpckhdq    xmm3, xmm5
	LONG $0x4a6e0f66; BYTE $0x10 // movd    xmm1, dword [rdx + 16]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0x6a6e0f66; BYTE $0x14 // movd    xmm5, dword [rdx + 20]
	LONG $0xed700f66; BYTE $0x00 // pshufd    xmm5, xmm5, 0
	LONG $0xf06f0f66             // movdqa    xmm6, xmm0
	LONG $0xf36c0f66             // punpcklqdq    xmm6, xmm3
	LONG $0xceef0f66             // pxor    xmm1, xmm6
	LONG $0xc36d0f66             // punpckhqdq    xmm0, xmm3
	LONG $0xc5ef0f66             // pxor    xmm0, xmm5
	LONG $0xc1fe0f66             // paddd    xmm0, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x03 // psrld    xmm1, 3
	LONG $0xf0720f66; BYTE $0x1d // pslld    xmm0, 29
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x08 // movd    xmm1, dword [rdx + 8]
	LONG $0xd9700f66; BYTE $0x00 // pshufd    xmm3, xmm1, 0
	LONG $0x4a6e0f66; BYTE $0x0c // movd    xmm1, dword [rdx + 12]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xea6f0f66             // movdqa    xmm5, xmm2
	LONG $0xec6d0f66             // punpckhqdq    xmm5, xmm4
	LONG $0xddef0f66             // pxor    xmm3, xmm5
	LONG $0xceef0f66             // pxor    xmm1, xmm6
	LONG $0xcbfe0f66             // paddd    xmm1, xmm3
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf1720f66; BYTE $0x1b // pslld    xmm1, 27
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	LONG $0x1a6e0f66             // movd    xmm3, dword [rdx]
	LONG $0xf3700f66; BYTE $0x00 // pshufd    xmm6, xmm3, 0
	LONG $0x5a6e0f66; BYTE $0x04 // movd    xmm3, dword [rdx + 4]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xd46c0f66             // punpcklqdq    xmm2, xmm4
	LONG $0xf2ef0f66             // pxor    xmm6, xmm2
	LONG $0xddef0f66             // pxor    xmm3, xmm5
	LONG $0xdefe0f66             // paddd    xmm3, xmm6
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x28 // movd    xmm4, dword [rdx + 40]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	LONG $0x626e0f66; BYTE $0x2c // movd    xmm4, dword [rdx + 44]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	LONG $0x526e0f66; BYTE $0x20 // movd    xmm2, dword [rdx + 32]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	LONG $0x526e0f66; BYTE $0x24 // movd    xmm2, dword [rdx + 36]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	LONG $0x426e0f66; BYTE $0x18 // movd    xmm0, dword [rdx + 24]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	LONG $0x426e0f66; BYTE $0x1c // movd    xmm0, dword [rdx + 28]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x40 // movd    xmm1, dword [rdx + 64]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	LONG $0x4a6e0f66; BYTE $0x44 // movd    xmm1, dword [rdx + 68]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x03 // psrld    xmm3, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	LONG $0x5a6e0f66; BYTE $0x38 // movd    xmm3, dword [rdx + 56]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	LONG $0x5a6e0f66; BYTE $0x3c // movd    xmm3, dword [rdx + 60]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x05 // psrld    xmm4, 5
	LONG $0xf3720f66; BYTE $0x1b // pslld    xmm3, 27
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x30 // movd    xmm4, dword [rdx + 48]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	LONG $0x626e0f66; BYTE $0x34 // movd    xmm4, dword [rdx + 52]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x17 // psrld    xmm2, 23
	LONG $0xf4720f66; BYTE $0x09 // pslld    xmm4, 9
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	LONG $0x526e0f66; BYTE $0x58 // movd    xmm2, dword [rdx + 88]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	LONG $0x526e0f66; BYTE $0x5c // movd    xmm2, dword [rdx + 92]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf2720f66; BYTE $0x1d // pslld    xmm2, 29
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	LONG $0x426e0f66; BYTE $0x50 // movd    xmm0, dword [rdx + 80]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	LONG $0x426e0f66; BYTE $0x54 // movd    xmm0, dword [rdx + 84]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x05 // psrld    xmm1, 5
	LONG $0xf0720f66; BYTE $0x1b // pslld    xmm0, 27
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x48 // movd    xmm1, dword [rdx + 72]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	LONG $0x4a6e0f66; BYTE $0x4c // movd    xmm1, dword [rdx + 76]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x17 // psrld    xmm3, 23
	LONG $0xf1720f66; BYTE $0x09 // pslld    xmm1, 9
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	LONG $0x5a6e0f66; BYTE $0x70 // movd    xmm3, dword [rdx + 112]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	LONG $0x5a6e0f66; BYTE $0x74 // movd    xmm3, dword [rdx + 116]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x03 // psrld    xmm4, 3
	LONG $0xf3720f66; BYTE $0x1d // pslld    xmm3, 29
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x68 // movd    xmm4, dword [rdx + 104]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	LONG $0x626e0f66; BYTE $0x6c // movd    xmm4, dword [rdx + 108]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x05 // psrld    xmm2, 5
	LONG $0xf4720f66; BYTE $0x1b // pslld    xmm4, 27
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	LONG $0x526e0f66; BYTE $0x60 // movd    xmm2, dword [rdx + 96]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	LONG $0x526e0f66; BYTE $0x64 // movd    xmm2, dword [rdx + 100]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf2720f66; BYTE $0x09 // pslld    xmm2, 9
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000088826e0f66     // movd    xmm0, dword [rdx + 136]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x0000008c826e0f66     // movd    xmm0, dword [rdx + 140]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x03 // psrld    xmm1, 3
	LONG $0xf0720f66; BYTE $0x1d // pslld    xmm0, 29
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000808a6e0f66     // movd    xmm1, dword [rdx + 128]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000000848a6e0f66     // movd    xmm1, dword [rdx + 132]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf1720f66; BYTE $0x1b // pslld    xmm1, 27
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	LONG $0x5a6e0f66; BYTE $0x78 // movd    xmm3, dword [rdx + 120]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	LONG $0x5a6e0f66; BYTE $0x7c // movd    xmm3, dword [rdx + 124]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000000a0a26e0f66     // movd    xmm4, dword [rdx + 160]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x000000a4a26e0f66     // movd    xmm4, dword [rdx + 164]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x00000098926e0f66     // movd    xmm2, dword [rdx + 152]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x0000009c926e0f66     // movd    xmm2, dword [rdx + 156]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000090826e0f66     // movd    xmm0, dword [rdx + 144]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x00000094826e0f66     // movd    xmm0, dword [rdx + 148]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000b88a6e0f66     // movd    xmm1, dword [rdx + 184]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000000bc8a6e0f66     // movd    xmm1, dword [rdx + 188]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x03 // psrld    xmm3, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000000b09a6e0f66     // movd    xmm3, dword [rdx + 176]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000000b49a6e0f66     // movd    xmm3, dword [rdx + 180]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x05 // psrld    xmm4, 5
	LONG $0xf3720f66; BYTE $0x1b // pslld    xmm3, 27
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000000a8a26e0f66     // movd    xmm4, dword [rdx + 168]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x000000aca26e0f66     // movd    xmm4, dword [rdx + 172]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x17 // psrld    xmm2, 23
	LONG $0xf4720f66; BYTE $0x09 // pslld    xmm4, 9
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x000000d0926e0f66     // movd    xmm2, dword [rdx + 208]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x000000d4926e0f66     // movd    xmm2, dword [rdx + 212]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf2720f66; BYTE $0x1d // pslld    xmm2, 29
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x000000c8826e0f66     // movd    xmm0, dword [rdx + 200]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x000000cc826e0f66     // movd    xmm0, dword [rdx + 204]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x05 // psrld    xmm1, 5
	LONG $0xf0720f66; BYTE $0x1b // pslld    xmm0, 27
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000c08a6e0f66     // movd    xmm1, dword [rdx + 192]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000000c48a6e0f66     // movd    xmm1, dword [rdx + 196]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x17 // psrld    xmm3, 23
	LONG $0xf1720f66; BYTE $0x09 // pslld    xmm1, 9
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000000e89a6e0f66     // movd    xmm3, dword [rdx + 232]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000000ec9a6e0f66     // movd    xmm3, dword [rdx + 236]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x03 // psrld    xmm4, 3
	LONG $0xf3720f66; BYTE $0x1d // pslld    xmm3, 29
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000000e0a26e0f66     // movd    xmm4, dword [rdx + 224]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x000000e4a26e0f66     // movd    xmm4, dword [rdx + 228]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x05 // psrld    xmm2, 5
	LONG $0xf4720f66; BYTE $0x1b // pslld    xmm4, 27
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x000000d8926e0f66     // movd    xmm2, dword [rdx + 216]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x000000dc926e0f66     // movd    xmm2, dword [rdx + 220]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf2720f66; BYTE $0x09 // pslld    xmm2, 9
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000100826e0f66     // movd    xmm0, dword [rdx + 256]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x00000104826e0f66     // movd    xmm0, dword [rdx + 260]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x03 // psrld    xmm1, 3
	LONG $0xf0720f66; BYTE $0x1d // pslld    xmm0, 29
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000f88a6e0f66     // movd    xmm1, dword [rdx + 248]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000000fc8a6e0f66     // movd    xmm1, dword [rdx + 252]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf1720f66; BYTE $0x1b // pslld    xmm1, 27
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000000f09a6e0f66     // movd    xmm3, dword [rdx + 240]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000000f49a6e0f66     // movd    xmm3, dword [rdx + 244]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000118a26e0f66     // movd    xmm4, dword [rdx + 280]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x0000011ca26e0f66     // movd    xmm4, dword [rdx + 284]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x00000110926e0f66     // movd    xmm2, dword [rdx + 272]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x00000114926e0f66     // movd    xmm2, dword [rdx + 276]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000108826e0f66     // movd    xmm0, dword [rdx + 264]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x0000010c826e0f66     // movd    xmm0, dword [rdx + 268]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001308a6e0f66     // movd    xmm1, dword [rdx + 304]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000001348a6e0f66     // movd    xmm1, dword [rdx + 308]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x03 // psrld    xmm3, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000001289a6e0f66     // movd    xmm3, dword [rdx + 296]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x0000012c9a6e0f66     // movd    xmm3, dword [rdx + 300]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x05 // psrld    xmm4, 5
	LONG $0xf3720f66; BYTE $0x1b // pslld    xmm3, 27
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000120a26e0f66     // movd    xmm4, dword [rdx + 288]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x00000124a26e0f66     // movd    xmm4, dword [rdx + 292]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x17 // psrld    xmm2, 23
	LONG $0xf4720f66; BYTE $0x09 // pslld    xmm4, 9
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x00000148926e0f66     // movd    xmm2, dword [rdx + 328]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x0000014c926e0f66     // movd    xmm2, dword [rdx + 332]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf2720f66; BYTE $0x1d // pslld    xmm2, 29
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000140826e0f66     // movd    xmm0, dword [rdx + 320]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x00000144826e0f66     // movd    xmm0, dword [rdx + 324]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x05 // psrld    xmm1, 5
	LONG $0xf0720f66; BYTE $0x1b // pslld    xmm0, 27
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001388a6e0f66     // movd    xmm1, dword [rdx + 312]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x0000013c8a6e0f66     // movd    xmm1, dword [rdx + 316]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x17 // psrld    xmm3, 23
	LONG $0xf1720f66; BYTE $0x09 // pslld    xmm1, 9
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000001609a6e0f66     // movd    xmm3, dword [rdx + 352]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000001649a6e0f66     // movd    xmm3, dword [rdx + 356]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x03 // psrld    xmm4, 3
	LONG $0xf3720f66; BYTE $0x1d // pslld    xmm3, 29
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000158a26e0f66     // movd    xmm4, dword [rdx + 344]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x0000015ca26e0f66     // movd    xmm4, dword [rdx + 348]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x05 // psrld    xmm2, 5
	LONG $0xf4720f66; BYTE $0x1b // pslld    xmm4, 27
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x00000150926e0f66     // movd    xmm2, dword [rdx + 336]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x00000154926e0f66     // movd    xmm2, dword [rdx + 340]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf2720f66; BYTE $0x09 // pslld    xmm2, 9
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000178826e0f66     // movd    xmm0, dword [rdx + 376]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x0000017c826e0f66     // movd    xmm0, dword [rdx + 380]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x03 // psrld    xmm1, 3
	LONG $0xf0720f66; BYTE $0x1d // pslld    xmm0, 29
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001708a6e0f66     // movd    xmm1, dword [rdx + 368]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000001748a6e0f66     // movd    xmm1, dword [rdx + 372]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf1720f66; BYTE $0x1b // pslld    xmm1, 27
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000001689a6e0f66     // movd    xmm3, dword [rdx + 360]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x0000016c9a6e0f66     // movd    xmm3, dword [rdx + 364]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000190a26e0f66     // movd    xmm4, dword [rdx + 400]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x00000194a26e0f66     // movd    xmm4, dword [rdx + 404]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x00000188926e0f66     // movd    xmm2, dword [rdx + 392]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x0000018c926e0f66     // movd    xmm2, dword [rdx + 396]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x00000180826e0f66     // movd    xmm0, dword [rdx + 384]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x00000184826e0f66     // movd    xmm0, dword [rdx + 388]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001a88a6e0f66     // movd    xmm1, dword [rdx + 424]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000001ac8a6e0f66     // movd    xmm1, dword [rdx + 428]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x03 // psrld    xmm3, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000001a09a6e0f66     // movd    xmm3, dword [rdx + 416]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000001a49a6e0f66     // movd    xmm3, dword [rdx + 420]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x05 // psrld    xmm4, 5
	LONG $0xf3720f66; BYTE $0x1b // pslld    xmm3, 27
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000198a26e0f66     // movd    xmm4, dword [rdx + 408]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x0000019ca26e0f66     // movd    xmm4, dword [rdx + 412]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x17 // psrld    xmm2, 23
	LONG $0xf4720f66; BYTE $0x09 // pslld    xmm4, 9
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x000001c0926e0f66     // movd    xmm2, dword [rdx + 448]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x000001c4926e0f66     // movd    xmm2, dword [rdx + 452]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf2720f66; BYTE $0x1d // pslld    xmm2, 29
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x000001b8826e0f66     // movd    xmm0, dword [rdx + 440]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x000001bc826e0f66     // movd    xmm0, dword [rdx + 444]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x05 // psrld    xmm1, 5
	LONG $0xf0720f66; BYTE $0x1b // pslld    xmm0, 27
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001b08a6e0f66     // movd    xmm1, dword [rdx + 432]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000001b48a6e0f66     // movd    xmm1, dword [rdx + 436]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x17 // psrld    xmm3, 23
	LONG $0xf1720f66; BYTE $0x09 // pslld    xmm1, 9
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000001d89a6e0f66     // movd    xmm3, dword [rdx + 472]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000001dc9a6e0f66     // movd    xmm3, dword [rdx + 476]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x03 // psrld    xmm4, 3
	LONG $0xf3720f66; BYTE $0x1d // pslld    xmm3, 29
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000001d0a26e0f66     // movd    xmm4, dword [rdx + 464]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x000001d4a26e0f66     // movd    xmm4, dword [rdx + 468]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x05 // psrld    xmm2, 5
	LONG $0xf4720f66; BYTE $0x1b // pslld    xmm4, 27
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x000001c8926e0f66     // movd    xmm2, dword [rdx + 456]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x000001cc926e0f66     // movd    xmm2, dword [rdx + 460]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf2720f66; BYTE $0x09 // pslld    xmm2, 9
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x000001f0826e0f66     // movd    xmm0, dword [rdx + 496]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x000001f4826e0f66     // movd    xmm0, dword [rdx + 500]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x03 // psrld    xmm1, 3
	LONG $0xf0720f66; BYTE $0x1d // pslld    xmm0, 29
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001e88a6e0f66     // movd    xmm1, dword [rdx + 488]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000001ec8a6e0f66     // movd    xmm1, dword [rdx + 492]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcbef0f66             // pxor    xmm1, xmm3
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd96f0f66             // movdqa    xmm3, xmm1
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf1720f66; BYTE $0x1b // pslld    xmm1, 27
	LONG $0xcbeb0f66             // por    xmm1, xmm3
	QUAD $0x000001e09a6e0f66     // movd    xmm3, dword [rdx + 480]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000001e49a6e0f66     // movd    xmm3, dword [rdx + 484]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000208a26e0f66     // movd    xmm4, dword [rdx + 520]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x0000020ca26e0f66     // movd    xmm4, dword [rdx + 524]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe2ef0f66             // pxor    xmm4, xmm2
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xd46f0f66             // movdqa    xmm2, xmm4
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe2eb0f66             // por    xmm4, xmm2
	QUAD $0x00000200926e0f66     // movd    xmm2, dword [rdx + 512]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x00000204926e0f66     // movd    xmm2, dword [rdx + 516]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	QUAD $0x000001f8826e0f66     // movd    xmm0, dword [rdx + 504]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	QUAD $0x000001fcaa6e0f66     // movd    xmm5, dword [rdx + 508]
	LONG $0xed700f66; BYTE $0x00 // pshufd    xmm5, xmm5, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	LONG $0xe8fe0f66             // paddd    xmm5, xmm0
	LONG $0xc56f0f66             // movdqa    xmm0, xmm5
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf5720f66; BYTE $0x09 // pslld    xmm5, 9
	LONG $0xe8eb0f66             // por    xmm5, xmm0
	QUAD $0x00000220826e0f66     // movd    xmm0, dword [rdx + 544]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	QUAD $0x000002248a6e0f66     // movd    xmm1, dword [rdx + 548]
	LONG $0xf1700f66; BYTE $0x00 // pshufd    xmm6, xmm1, 0
	LONG $0xf3ef0f66             // pxor    xmm6, xmm3
	LONG $0xf0fe0f66             // paddd    xmm6, xmm0
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf6720f66; BYTE $0x1d // pslld    xmm6, 29
	LONG $0xf0eb0f66             // por    xmm6, xmm0
	QUAD $0x00000218826e0f66     // movd    xmm0, dword [rdx + 536]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	QUAD $0x0000021c8a6e0f66     // movd    xmm1, dword [rdx + 540]
	LONG $0xf9700f66; BYTE $0x00 // pshufd    xmm7, xmm1, 0
	LONG $0xfcef0f66             // pxor    xmm7, xmm4
	LONG $0xf8fe0f66             // paddd    xmm7, xmm0
	LONG $0xc76f0f66             // movdqa    xmm0, xmm7
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf7720f66; BYTE $0x1b // pslld    xmm7, 27
	LONG $0xf8eb0f66             // por    xmm7, xmm0
	QUAD $0x00000210826e0f66     // movd    xmm0, dword [rdx + 528]
	LONG $0xc8700f66; BYTE $0x00 // pshufd    xmm1, xmm0, 0
	LONG $0xcdef0f66             // pxor    xmm1, xmm5
	QUAD $0x00000214826e0f66     // movd    xmm0, dword [rdx + 532]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	LONG $0xc1fe0f66             // paddd    xmm0, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002388a6e0f66     // movd    xmm1, dword [rdx + 568]
	LONG $0xd1700f66; BYTE $0x00 // pshufd    xmm2, xmm1, 0
	LONG $0xd6ef0f66             // pxor    xmm2, xmm6
	QUAD $0x0000023c8a6e0f66     // movd    xmm1, dword [rdx + 572]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcdef0f66             // pxor    xmm1, xmm5
	LONG $0xcafe0f66             // paddd    xmm1, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000230926e0f66     // movd    xmm2, dword [rdx + 560]
	LONG $0xda700f66; BYTE $0x00 // pshufd    xmm3, xmm2, 0
	LONG $0xdfef0f66             // pxor    xmm3, xmm7
	QUAD $0x00000234926e0f66     // movd    xmm2, dword [rdx + 564]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd6ef0f66             // pxor    xmm2, xmm6
	LONG $0xd3fe0f66             // paddd    xmm2, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002289a6e0f66     // movd    xmm3, dword [rdx + 552]
	LONG $0xe3700f66; BYTE $0x00 // pshufd    xmm4, xmm3, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	QUAD $0x0000022c9a6e0f66     // movd    xmm3, dword [rdx + 556]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdfef0f66             // pxor    xmm3, xmm7
	LONG $0xdcfe0f66             // paddd    xmm3, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x19f98348             // cmp    rcx, 25
	JB   LBB0_3
	QUAD $0x00000250a26e0f66     // movd    xmm4, dword [rdx + 592]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x00000254a26e0f66     // movd    xmm4, dword [rdx + 596]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000248826e0f66     // movd    xmm0, dword [rdx + 584]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x0000024c826e0f66     // movd    xmm0, dword [rdx + 588]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x05 // psrld    xmm1, 5
	LONG $0xf0720f66; BYTE $0x1b // pslld    xmm0, 27
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002408a6e0f66     // movd    xmm1, dword [rdx + 576]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x000002448a6e0f66     // movd    xmm1, dword [rdx + 580]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x17 // psrld    xmm2, 23
	LONG $0xf1720f66; BYTE $0x09 // pslld    xmm1, 9
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000268926e0f66     // movd    xmm2, dword [rdx + 616]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x0000026c926e0f66     // movd    xmm2, dword [rdx + 620]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x03 // psrld    xmm3, 3
	LONG $0xf2720f66; BYTE $0x1d // pslld    xmm2, 29
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002609a6e0f66     // movd    xmm3, dword [rdx + 608]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x000002649a6e0f66     // movd    xmm3, dword [rdx + 612]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x05 // psrld    xmm4, 5
	LONG $0xf3720f66; BYTE $0x1b // pslld    xmm3, 27
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000258a26e0f66     // movd    xmm4, dword [rdx + 600]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x0000025ca26e0f66     // movd    xmm4, dword [rdx + 604]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf4720f66; BYTE $0x09 // pslld    xmm4, 9
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000280826e0f66     // movd    xmm0, dword [rdx + 640]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	QUAD $0x00000284aa6e0f66     // movd    xmm5, dword [rdx + 644]
	LONG $0xed700f66; BYTE $0x00 // pshufd    xmm5, xmm5, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	LONG $0xe8fe0f66             // paddd    xmm5, xmm0
	LONG $0xc56f0f66             // movdqa    xmm0, xmm5
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf5720f66; BYTE $0x1d // pslld    xmm5, 29
	LONG $0xe8eb0f66             // por    xmm5, xmm0
	QUAD $0x00000278826e0f66     // movd    xmm0, dword [rdx + 632]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	QUAD $0x0000027c8a6e0f66     // movd    xmm1, dword [rdx + 636]
	LONG $0xf1700f66; BYTE $0x00 // pshufd    xmm6, xmm1, 0
	LONG $0xf2ef0f66             // pxor    xmm6, xmm2
	LONG $0xf0fe0f66             // paddd    xmm6, xmm0
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf6720f66; BYTE $0x1b // pslld    xmm6, 27
	LONG $0xf0eb0f66             // por    xmm6, xmm0
	QUAD $0x00000270826e0f66     // movd    xmm0, dword [rdx + 624]
	LONG $0xc8700f66; BYTE $0x00 // pshufd    xmm1, xmm0, 0
	LONG $0xccef0f66             // pxor    xmm1, xmm4
	QUAD $0x00000274826e0f66     // movd    xmm0, dword [rdx + 628]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	LONG $0xc1fe0f66             // paddd    xmm0, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002988a6e0f66     // movd    xmm1, dword [rdx + 664]
	LONG $0xd1700f66; BYTE $0x00 // pshufd    xmm2, xmm1, 0
	LONG $0xd5ef0f66             // pxor    xmm2, xmm5
	QUAD $0x0000029c8a6e0f66     // movd    xmm1, dword [rdx + 668]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xccef0f66             // pxor    xmm1, xmm4
	LONG $0xcafe0f66             // paddd    xmm1, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000290926e0f66     // movd    xmm2, dword [rdx + 656]
	LONG $0xda700f66; BYTE $0x00 // pshufd    xmm3, xmm2, 0
	LONG $0xdeef0f66             // pxor    xmm3, xmm6
	QUAD $0x00000294926e0f66     // movd    xmm2, dword [rdx + 660]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd5ef0f66             // pxor    xmm2, xmm5
	LONG $0xd3fe0f66             // paddd    xmm2, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002889a6e0f66     // movd    xmm3, dword [rdx + 648]
	LONG $0xe3700f66; BYTE $0x00 // pshufd    xmm4, xmm3, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	QUAD $0x0000028c9a6e0f66     // movd    xmm3, dword [rdx + 652]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdeef0f66             // pxor    xmm3, xmm6
	LONG $0xdcfe0f66             // paddd    xmm3, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x1df98348             // cmp    rcx, 29
	JB   LBB0_3
	QUAD $0x000002b0a26e0f66     // movd    xmm4, dword [rdx + 688]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x000002b4a26e0f66     // movd    xmm4, dword [rdx + 692]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf4720f66; BYTE $0x1d // pslld    xmm4, 29
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000002a8826e0f66     // movd    xmm0, dword [rdx + 680]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	QUAD $0x000002ac826e0f66     // movd    xmm0, dword [rdx + 684]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xc5fe0f66             // paddd    xmm0, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x05 // psrld    xmm1, 5
	LONG $0xf0720f66; BYTE $0x1b // pslld    xmm0, 27
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002a08a6e0f66     // movd    xmm1, dword [rdx + 672]
	LONG $0xe9700f66; BYTE $0x00 // pshufd    xmm5, xmm1, 0
	LONG $0xebef0f66             // pxor    xmm5, xmm3
	QUAD $0x000002a48a6e0f66     // movd    xmm1, dword [rdx + 676]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xcdfe0f66             // paddd    xmm1, xmm5
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x17 // psrld    xmm2, 23
	LONG $0xf1720f66; BYTE $0x09 // pslld    xmm1, 9
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000002c8926e0f66     // movd    xmm2, dword [rdx + 712]
	LONG $0xea700f66; BYTE $0x00 // pshufd    xmm5, xmm2, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	QUAD $0x000002cc926e0f66     // movd    xmm2, dword [rdx + 716]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xd5fe0f66             // paddd    xmm2, xmm5
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x03 // psrld    xmm3, 3
	LONG $0xf2720f66; BYTE $0x1d // pslld    xmm2, 29
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002c09a6e0f66     // movd    xmm3, dword [rdx + 704]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xe8ef0f66             // pxor    xmm5, xmm0
	QUAD $0x000002c49a6e0f66     // movd    xmm3, dword [rdx + 708]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xddfe0f66             // paddd    xmm3, xmm5
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x05 // psrld    xmm4, 5
	LONG $0xf3720f66; BYTE $0x1b // pslld    xmm3, 27
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000002b8a26e0f66     // movd    xmm4, dword [rdx + 696]
	LONG $0xec700f66; BYTE $0x00 // pshufd    xmm5, xmm4, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	QUAD $0x000002bca26e0f66     // movd    xmm4, dword [rdx + 700]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xe5fe0f66             // paddd    xmm4, xmm5
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x17 // psrld    xmm0, 23
	LONG $0xf4720f66; BYTE $0x09 // pslld    xmm4, 9
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000002e0826e0f66     // movd    xmm0, dword [rdx + 736]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	QUAD $0x000002e4aa6e0f66     // movd    xmm5, dword [rdx + 740]
	LONG $0xed700f66; BYTE $0x00 // pshufd    xmm5, xmm5, 0
	LONG $0xe9ef0f66             // pxor    xmm5, xmm1
	LONG $0xe8fe0f66             // paddd    xmm5, xmm0
	LONG $0xc56f0f66             // movdqa    xmm0, xmm5
	LONG $0xd0720f66; BYTE $0x03 // psrld    xmm0, 3
	LONG $0xf5720f66; BYTE $0x1d // pslld    xmm5, 29
	LONG $0xe8eb0f66             // por    xmm5, xmm0
	QUAD $0x000002d8826e0f66     // movd    xmm0, dword [rdx + 728]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	QUAD $0x000002dc8a6e0f66     // movd    xmm1, dword [rdx + 732]
	LONG $0xf1700f66; BYTE $0x00 // pshufd    xmm6, xmm1, 0
	LONG $0xf2ef0f66             // pxor    xmm6, xmm2
	LONG $0xf0fe0f66             // paddd    xmm6, xmm0
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x05 // psrld    xmm0, 5
	LONG $0xf6720f66; BYTE $0x1b // pslld    xmm6, 27
	LONG $0xf0eb0f66             // por    xmm6, xmm0
	QUAD $0x000002d0826e0f66     // movd    xmm0, dword [rdx + 720]
	LONG $0xc8700f66; BYTE $0x00 // pshufd    xmm1, xmm0, 0
	LONG $0xccef0f66             // pxor    xmm1, xmm4
	QUAD $0x000002d4826e0f66     // movd    xmm0, dword [rdx + 724]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	LONG $0xc1fe0f66             // paddd    xmm0, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x17 // psrld    xmm1, 23
	LONG $0xf0720f66; BYTE $0x09 // pslld    xmm0, 9
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002f88a6e0f66     // movd    xmm1, dword [rdx + 760]
	LONG $0xd1700f66; BYTE $0x00 // pshufd    xmm2, xmm1, 0
	LONG $0xd5ef0f66             // pxor    xmm2, xmm5
	QUAD $0x000002fc8a6e0f66     // movd    xmm1, dword [rdx + 764]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xccef0f66             // pxor    xmm1, xmm4
	LONG $0xcafe0f66             // paddd    xmm1, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x03 // psrld    xmm2, 3
	LONG $0xf1720f66; BYTE $0x1d // pslld    xmm1, 29
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000002f0926e0f66     // movd    xmm2, dword [rdx + 752]
	LONG $0xda700f66; BYTE $0x00 // pshufd    xmm3, xmm2, 0
	LONG $0xdeef0f66             // pxor    xmm3, xmm6
	QUAD $0x000002f4926e0f66     // movd    xmm2, dword [rdx + 756]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd5ef0f66             // pxor    xmm2, xmm5
	LONG $0xd3fe0f66             // paddd    xmm2, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x05 // psrld    xmm3, 5
	LONG $0xf2720f66; BYTE $0x1b // pslld    xmm2, 27
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002e89a6e0f66     // movd    xmm3, dword [rdx + 744]
	LONG $0xe3700f66; BYTE $0x00 // pshufd    xmm4, xmm3, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	QUAD $0x000002ec9a6e0f66     // movd    xmm3, dword [rdx + 748]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdeef0f66             // pxor    xmm3, xmm6
	LONG $0xdcfe0f66             // paddd    xmm3, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x17 // psrld    xmm4, 23
	LONG $0xf3720f66; BYTE $0x09 // pslld    xmm3, 9
	LONG $0xdceb0f66             // por    xmm3, xmm4

LBB0_3:
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xe2620f66             // punpckldq    xmm4, xmm2
	LONG $0xe96f0f66             // movdqa    xmm5, xmm1
	LONG $0xe8620f66             // punpckldq    xmm5, xmm0
	LONG $0xda6a0f66             // punpckhdq    xmm3, xmm2
	LONG $0xc86a0f66             // punpckhdq    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xc56c0f66             // punpcklqdq    xmm0, xmm5
	LONG $0xe56d0f66             // punpckhqdq    xmm4, xmm5
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd16c0f66             // punpcklqdq    xmm2, xmm1
	LONG $0xd96d0f66             // punpckhqdq    xmm3, xmm1
	LONG $0x077f0ff3             // movdqu    oword [rdi], xmm0
	LONG $0x677f0ff3; BYTE $0x10 // movdqu    oword [rdi + 16], xmm4
	LONG $0x577f0ff3; BYTE $0x20 // movdqu    oword [rdi + 32], xmm2
	LONG $0x5f7f0ff3; BYTE $0x30 // movdqu    oword [rdi + 48], xmm3
	RET

TEXT Â·__lea_decrypt_4block(SB), $0-32

	MOVQ pt+0(FP), DI
	MOVQ ct+8(FP), SI
	MOVQ rk+16(FP), DX
	MOVQ round+24(FP), CX

	LONG $0x066f0ff3             // movdqu    xmm0, oword [rsi]
	LONG $0x4e6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rsi + 16]
	LONG $0x666f0ff3; BYTE $0x20 // movdqu    xmm4, oword [rsi + 32]
	LONG $0x5e6f0ff3; BYTE $0x30 // movdqu    xmm3, oword [rsi + 48]
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd1620f66             // punpckldq    xmm2, xmm1
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xeb620f66             // punpckldq    xmm5, xmm3
	LONG $0xc16a0f66             // punpckhdq    xmm0, xmm1
	LONG $0xe36a0f66             // punpckhdq    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xdd6c0f66             // punpcklqdq    xmm3, xmm5
	LONG $0xd56d0f66             // punpckhqdq    xmm2, xmm5
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xcc6c0f66             // punpcklqdq    xmm1, xmm4
	LONG $0xc46d0f66             // punpckhqdq    xmm0, xmm4
	LONG $0x1df98348             // cmp    rcx, 29
	JB   LBB1_2
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000002e8a26e0f66     // movd    xmm4, dword [rdx + 744]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000002eca26e0f66     // movd    xmm4, dword [rdx + 748]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002f09a6e0f66     // movd    xmm3, dword [rdx + 752]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000002f49a6e0f66     // movd    xmm3, dword [rdx + 756]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000002f8926e0f66     // movd    xmm2, dword [rdx + 760]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x000002fc926e0f66     // movd    xmm2, dword [rdx + 764]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002d08a6e0f66     // movd    xmm1, dword [rdx + 720]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000002d48a6e0f66     // movd    xmm1, dword [rdx + 724]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000002d8826e0f66     // movd    xmm0, dword [rdx + 728]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000002dc826e0f66     // movd    xmm0, dword [rdx + 732]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1d // psrld    xmm4, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000002e0a26e0f66     // movd    xmm4, dword [rdx + 736]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000002e4a26e0f66     // movd    xmm4, dword [rdx + 740]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x09 // psrld    xmm3, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002b89a6e0f66     // movd    xmm3, dword [rdx + 696]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000002bc9a6e0f66     // movd    xmm3, dword [rdx + 700]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1b // psrld    xmm2, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000002c0926e0f66     // movd    xmm2, dword [rdx + 704]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd5ef0f66             // pxor    xmm2, xmm5
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x000002c4926e0f66     // movd    xmm2, dword [rdx + 708]
	LONG $0xf2700f66; BYTE $0x00 // pshufd    xmm6, xmm2, 0
	LONG $0xf1ef0f66             // pxor    xmm6, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1d // psrld    xmm1, 29
	LONG $0xf0720f66; BYTE $0x03 // pslld    xmm0, 3
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002c88a6e0f66     // movd    xmm1, dword [rdx + 712]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xceef0f66             // pxor    xmm1, xmm6
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000002cc8a6e0f66     // movd    xmm1, dword [rdx + 716]
	LONG $0xd9700f66; BYTE $0x00 // pshufd    xmm3, xmm1, 0
	LONG $0xd8ef0f66             // pxor    xmm3, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000002a0826e0f66     // movd    xmm0, dword [rdx + 672]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000002a4826e0f66     // movd    xmm0, dword [rdx + 676]
	LONG $0xd0700f66; BYTE $0x00 // pshufd    xmm2, xmm0, 0
	LONG $0xd4ef0f66             // pxor    xmm2, xmm4
	LONG $0xc56f0f66             // movdqa    xmm0, xmm5
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf5720f66; BYTE $0x05 // pslld    xmm5, 5
	LONG $0xe8eb0f66             // por    xmm5, xmm0
	QUAD $0x000002a8826e0f66     // movd    xmm0, dword [rdx + 680]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	LONG $0xe8fa0f66             // psubd    xmm5, xmm0
	QUAD $0x000002ac826e0f66     // movd    xmm0, dword [rdx + 684]
	LONG $0xc8700f66; BYTE $0x00 // pshufd    xmm1, xmm0, 0
	LONG $0xcdef0f66             // pxor    xmm1, xmm5
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf6720f66; BYTE $0x03 // pslld    xmm6, 3
	LONG $0xf0eb0f66             // por    xmm6, xmm0
	QUAD $0x000002b0826e0f66     // movd    xmm0, dword [rdx + 688]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xf0fa0f66             // psubd    xmm6, xmm0
	QUAD $0x000002b4826e0f66     // movd    xmm0, dword [rdx + 692]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc6ef0f66             // pxor    xmm0, xmm6
	JMP  LBB1_3

LBB1_2:
	LONG $0x19f98348 // cmp    rcx, 25
	JB   LBB1_4

LBB1_3:
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000288a26e0f66     // movd    xmm4, dword [rdx + 648]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x0000028ca26e0f66     // movd    xmm4, dword [rdx + 652]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002909a6e0f66     // movd    xmm3, dword [rdx + 656]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000002949a6e0f66     // movd    xmm3, dword [rdx + 660]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000298926e0f66     // movd    xmm2, dword [rdx + 664]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x0000029c926e0f66     // movd    xmm2, dword [rdx + 668]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002708a6e0f66     // movd    xmm1, dword [rdx + 624]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000002748a6e0f66     // movd    xmm1, dword [rdx + 628]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000278826e0f66     // movd    xmm0, dword [rdx + 632]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x0000027c826e0f66     // movd    xmm0, dword [rdx + 636]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1d // psrld    xmm4, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000280a26e0f66     // movd    xmm4, dword [rdx + 640]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x00000284a26e0f66     // movd    xmm4, dword [rdx + 644]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x09 // psrld    xmm3, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002589a6e0f66     // movd    xmm3, dword [rdx + 600]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x0000025c9a6e0f66     // movd    xmm3, dword [rdx + 604]
	LONG $0xeb700f66; BYTE $0x00 // pshufd    xmm5, xmm3, 0
	LONG $0xeaef0f66             // pxor    xmm5, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1b // psrld    xmm2, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000260926e0f66     // movd    xmm2, dword [rdx + 608]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd5ef0f66             // pxor    xmm2, xmm5
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x00000264926e0f66     // movd    xmm2, dword [rdx + 612]
	LONG $0xf2700f66; BYTE $0x00 // pshufd    xmm6, xmm2, 0
	LONG $0xf1ef0f66             // pxor    xmm6, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1d // psrld    xmm1, 29
	LONG $0xf0720f66; BYTE $0x03 // pslld    xmm0, 3
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002688a6e0f66     // movd    xmm1, dword [rdx + 616]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xceef0f66             // pxor    xmm1, xmm6
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x0000026c8a6e0f66     // movd    xmm1, dword [rdx + 620]
	LONG $0xd9700f66; BYTE $0x00 // pshufd    xmm3, xmm1, 0
	LONG $0xd8ef0f66             // pxor    xmm3, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000240826e0f66     // movd    xmm0, dword [rdx + 576]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x00000244826e0f66     // movd    xmm0, dword [rdx + 580]
	LONG $0xd0700f66; BYTE $0x00 // pshufd    xmm2, xmm0, 0
	LONG $0xd4ef0f66             // pxor    xmm2, xmm4
	LONG $0xc56f0f66             // movdqa    xmm0, xmm5
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf5720f66; BYTE $0x05 // pslld    xmm5, 5
	LONG $0xe8eb0f66             // por    xmm5, xmm0
	QUAD $0x00000248826e0f66     // movd    xmm0, dword [rdx + 584]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	LONG $0xe8fa0f66             // psubd    xmm5, xmm0
	QUAD $0x0000024c826e0f66     // movd    xmm0, dword [rdx + 588]
	LONG $0xc8700f66; BYTE $0x00 // pshufd    xmm1, xmm0, 0
	LONG $0xcdef0f66             // pxor    xmm1, xmm5
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf6720f66; BYTE $0x03 // pslld    xmm6, 3
	LONG $0xf0eb0f66             // por    xmm6, xmm0
	QUAD $0x00000250826e0f66     // movd    xmm0, dword [rdx + 592]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xf0fa0f66             // psubd    xmm6, xmm0
	QUAD $0x00000254826e0f66     // movd    xmm0, dword [rdx + 596]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc6ef0f66             // pxor    xmm0, xmm6

LBB1_4:
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000228a26e0f66     // movd    xmm4, dword [rdx + 552]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x0000022ca26e0f66     // movd    xmm4, dword [rdx + 556]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000002309a6e0f66     // movd    xmm3, dword [rdx + 560]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000002349a6e0f66     // movd    xmm3, dword [rdx + 564]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000238926e0f66     // movd    xmm2, dword [rdx + 568]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x0000023c926e0f66     // movd    xmm2, dword [rdx + 572]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002108a6e0f66     // movd    xmm1, dword [rdx + 528]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000002148a6e0f66     // movd    xmm1, dword [rdx + 532]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000218826e0f66     // movd    xmm0, dword [rdx + 536]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x0000021c826e0f66     // movd    xmm0, dword [rdx + 540]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1d // psrld    xmm4, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000220a26e0f66     // movd    xmm4, dword [rdx + 544]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x00000224a26e0f66     // movd    xmm4, dword [rdx + 548]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x09 // psrld    xmm3, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001f89a6e0f66     // movd    xmm3, dword [rdx + 504]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000001fc9a6e0f66     // movd    xmm3, dword [rdx + 508]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1b // psrld    xmm2, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000200926e0f66     // movd    xmm2, dword [rdx + 512]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x00000204926e0f66     // movd    xmm2, dword [rdx + 516]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1d // psrld    xmm1, 29
	LONG $0xf0720f66; BYTE $0x03 // pslld    xmm0, 3
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000002088a6e0f66     // movd    xmm1, dword [rdx + 520]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x0000020c8a6e0f66     // movd    xmm1, dword [rdx + 524]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000001e0826e0f66     // movd    xmm0, dword [rdx + 480]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000001e4826e0f66     // movd    xmm0, dword [rdx + 484]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1b // psrld    xmm4, 27
	LONG $0xf3720f66; BYTE $0x05 // pslld    xmm3, 5
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000001e8a26e0f66     // movd    xmm4, dword [rdx + 488]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000001eca26e0f66     // movd    xmm4, dword [rdx + 492]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1d // psrld    xmm3, 29
	LONG $0xf2720f66; BYTE $0x03 // pslld    xmm2, 3
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001f09a6e0f66     // movd    xmm3, dword [rdx + 496]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000001f49a6e0f66     // movd    xmm3, dword [rdx + 500]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x09 // psrld    xmm2, 9
	LONG $0xf1720f66; BYTE $0x17 // pslld    xmm1, 23
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000001c8926e0f66     // movd    xmm2, dword [rdx + 456]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x000001cc926e0f66     // movd    xmm2, dword [rdx + 460]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1b // psrld    xmm1, 27
	LONG $0xf0720f66; BYTE $0x05 // pslld    xmm0, 5
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001d08a6e0f66     // movd    xmm1, dword [rdx + 464]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000001d48a6e0f66     // movd    xmm1, dword [rdx + 468]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf4720f66; BYTE $0x03 // pslld    xmm4, 3
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000001d8826e0f66     // movd    xmm0, dword [rdx + 472]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000001dc826e0f66     // movd    xmm0, dword [rdx + 476]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000001b0a26e0f66     // movd    xmm4, dword [rdx + 432]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000001b4a26e0f66     // movd    xmm4, dword [rdx + 436]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001b89a6e0f66     // movd    xmm3, dword [rdx + 440]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000001bc9a6e0f66     // movd    xmm3, dword [rdx + 444]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000001c0926e0f66     // movd    xmm2, dword [rdx + 448]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x000001c4926e0f66     // movd    xmm2, dword [rdx + 452]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001988a6e0f66     // movd    xmm1, dword [rdx + 408]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x0000019c8a6e0f66     // movd    xmm1, dword [rdx + 412]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000001a0826e0f66     // movd    xmm0, dword [rdx + 416]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000001a4826e0f66     // movd    xmm0, dword [rdx + 420]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1d // psrld    xmm4, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000001a8a26e0f66     // movd    xmm4, dword [rdx + 424]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000001aca26e0f66     // movd    xmm4, dword [rdx + 428]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x09 // psrld    xmm3, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001809a6e0f66     // movd    xmm3, dword [rdx + 384]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000001849a6e0f66     // movd    xmm3, dword [rdx + 388]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1b // psrld    xmm2, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000188926e0f66     // movd    xmm2, dword [rdx + 392]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x0000018c926e0f66     // movd    xmm2, dword [rdx + 396]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1d // psrld    xmm1, 29
	LONG $0xf0720f66; BYTE $0x03 // pslld    xmm0, 3
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001908a6e0f66     // movd    xmm1, dword [rdx + 400]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000001948a6e0f66     // movd    xmm1, dword [rdx + 404]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000168826e0f66     // movd    xmm0, dword [rdx + 360]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x0000016c826e0f66     // movd    xmm0, dword [rdx + 364]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1b // psrld    xmm4, 27
	LONG $0xf3720f66; BYTE $0x05 // pslld    xmm3, 5
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000170a26e0f66     // movd    xmm4, dword [rdx + 368]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x00000174a26e0f66     // movd    xmm4, dword [rdx + 372]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1d // psrld    xmm3, 29
	LONG $0xf2720f66; BYTE $0x03 // pslld    xmm2, 3
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001789a6e0f66     // movd    xmm3, dword [rdx + 376]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x0000017c9a6e0f66     // movd    xmm3, dword [rdx + 380]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x09 // psrld    xmm2, 9
	LONG $0xf1720f66; BYTE $0x17 // pslld    xmm1, 23
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000150926e0f66     // movd    xmm2, dword [rdx + 336]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x00000154926e0f66     // movd    xmm2, dword [rdx + 340]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1b // psrld    xmm1, 27
	LONG $0xf0720f66; BYTE $0x05 // pslld    xmm0, 5
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001588a6e0f66     // movd    xmm1, dword [rdx + 344]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x0000015c8a6e0f66     // movd    xmm1, dword [rdx + 348]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf4720f66; BYTE $0x03 // pslld    xmm4, 3
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000160826e0f66     // movd    xmm0, dword [rdx + 352]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x00000164826e0f66     // movd    xmm0, dword [rdx + 356]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000138a26e0f66     // movd    xmm4, dword [rdx + 312]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x0000013ca26e0f66     // movd    xmm4, dword [rdx + 316]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001409a6e0f66     // movd    xmm3, dword [rdx + 320]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000001449a6e0f66     // movd    xmm3, dword [rdx + 324]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000148926e0f66     // movd    xmm2, dword [rdx + 328]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x0000014c926e0f66     // movd    xmm2, dword [rdx + 332]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001208a6e0f66     // movd    xmm1, dword [rdx + 288]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000001248a6e0f66     // movd    xmm1, dword [rdx + 292]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x00000128826e0f66     // movd    xmm0, dword [rdx + 296]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x0000012c826e0f66     // movd    xmm0, dword [rdx + 300]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1d // psrld    xmm4, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000130a26e0f66     // movd    xmm4, dword [rdx + 304]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x00000134a26e0f66     // movd    xmm4, dword [rdx + 308]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x09 // psrld    xmm3, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001089a6e0f66     // movd    xmm3, dword [rdx + 264]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x0000010c9a6e0f66     // movd    xmm3, dword [rdx + 268]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1b // psrld    xmm2, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000110926e0f66     // movd    xmm2, dword [rdx + 272]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x00000114926e0f66     // movd    xmm2, dword [rdx + 276]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1d // psrld    xmm1, 29
	LONG $0xf0720f66; BYTE $0x03 // pslld    xmm0, 3
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000001188a6e0f66     // movd    xmm1, dword [rdx + 280]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x0000011c8a6e0f66     // movd    xmm1, dword [rdx + 284]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000000f0826e0f66     // movd    xmm0, dword [rdx + 240]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000000f4826e0f66     // movd    xmm0, dword [rdx + 244]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1b // psrld    xmm4, 27
	LONG $0xf3720f66; BYTE $0x05 // pslld    xmm3, 5
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000000f8a26e0f66     // movd    xmm4, dword [rdx + 248]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000000fca26e0f66     // movd    xmm4, dword [rdx + 252]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1d // psrld    xmm3, 29
	LONG $0xf2720f66; BYTE $0x03 // pslld    xmm2, 3
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000001009a6e0f66     // movd    xmm3, dword [rdx + 256]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000001049a6e0f66     // movd    xmm3, dword [rdx + 260]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x09 // psrld    xmm2, 9
	LONG $0xf1720f66; BYTE $0x17 // pslld    xmm1, 23
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000000d8926e0f66     // movd    xmm2, dword [rdx + 216]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x000000dc926e0f66     // movd    xmm2, dword [rdx + 220]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1b // psrld    xmm1, 27
	LONG $0xf0720f66; BYTE $0x05 // pslld    xmm0, 5
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000e08a6e0f66     // movd    xmm1, dword [rdx + 224]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000000e48a6e0f66     // movd    xmm1, dword [rdx + 228]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf4720f66; BYTE $0x03 // pslld    xmm4, 3
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000000e8826e0f66     // movd    xmm0, dword [rdx + 232]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000000ec826e0f66     // movd    xmm0, dword [rdx + 236]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000000c0a26e0f66     // movd    xmm4, dword [rdx + 192]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000000c4a26e0f66     // movd    xmm4, dword [rdx + 196]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000000c89a6e0f66     // movd    xmm3, dword [rdx + 200]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000000cc9a6e0f66     // movd    xmm3, dword [rdx + 204]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x000000d0926e0f66     // movd    xmm2, dword [rdx + 208]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x000000d4926e0f66     // movd    xmm2, dword [rdx + 212]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000a88a6e0f66     // movd    xmm1, dword [rdx + 168]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000000ac8a6e0f66     // movd    xmm1, dword [rdx + 172]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	QUAD $0x000000b0826e0f66     // movd    xmm0, dword [rdx + 176]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	QUAD $0x000000b4826e0f66     // movd    xmm0, dword [rdx + 180]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1d // psrld    xmm4, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x000000b8a26e0f66     // movd    xmm4, dword [rdx + 184]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x000000bca26e0f66     // movd    xmm4, dword [rdx + 188]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x09 // psrld    xmm3, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000000909a6e0f66     // movd    xmm3, dword [rdx + 144]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x000000949a6e0f66     // movd    xmm3, dword [rdx + 148]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1b // psrld    xmm2, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	QUAD $0x00000098926e0f66     // movd    xmm2, dword [rdx + 152]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	QUAD $0x0000009c926e0f66     // movd    xmm2, dword [rdx + 156]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1d // psrld    xmm1, 29
	LONG $0xf0720f66; BYTE $0x03 // pslld    xmm0, 3
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	QUAD $0x000000a08a6e0f66     // movd    xmm1, dword [rdx + 160]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	QUAD $0x000000a48a6e0f66     // movd    xmm1, dword [rdx + 164]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	LONG $0x426e0f66; BYTE $0x78 // movd    xmm0, dword [rdx + 120]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	LONG $0x426e0f66; BYTE $0x7c // movd    xmm0, dword [rdx + 124]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1b // psrld    xmm4, 27
	LONG $0xf3720f66; BYTE $0x05 // pslld    xmm3, 5
	LONG $0xdceb0f66             // por    xmm3, xmm4
	QUAD $0x00000080a26e0f66     // movd    xmm4, dword [rdx + 128]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	QUAD $0x00000084a26e0f66     // movd    xmm4, dword [rdx + 132]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1d // psrld    xmm3, 29
	LONG $0xf2720f66; BYTE $0x03 // pslld    xmm2, 3
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	QUAD $0x000000889a6e0f66     // movd    xmm3, dword [rdx + 136]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	QUAD $0x0000008c9a6e0f66     // movd    xmm3, dword [rdx + 140]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x09 // psrld    xmm2, 9
	LONG $0xf1720f66; BYTE $0x17 // pslld    xmm1, 23
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	LONG $0x526e0f66; BYTE $0x60 // movd    xmm2, dword [rdx + 96]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	LONG $0x526e0f66; BYTE $0x64 // movd    xmm2, dword [rdx + 100]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x1b // psrld    xmm1, 27
	LONG $0xf0720f66; BYTE $0x05 // pslld    xmm0, 5
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x68 // movd    xmm1, dword [rdx + 104]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x6c // movd    xmm1, dword [rdx + 108]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf4720f66; BYTE $0x03 // pslld    xmm4, 3
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	LONG $0x426e0f66; BYTE $0x70 // movd    xmm0, dword [rdx + 112]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	LONG $0x426e0f66; BYTE $0x74 // movd    xmm0, dword [rdx + 116]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x09 // psrld    xmm4, 9
	LONG $0xf3720f66; BYTE $0x17 // pslld    xmm3, 23
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x48 // movd    xmm4, dword [rdx + 72]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe0ef0f66             // pxor    xmm4, xmm0
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x4c // movd    xmm4, dword [rdx + 76]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1b // psrld    xmm3, 27
	LONG $0xf2720f66; BYTE $0x05 // pslld    xmm2, 5
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	LONG $0x5a6e0f66; BYTE $0x50 // movd    xmm3, dword [rdx + 80]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	LONG $0x5a6e0f66; BYTE $0x54 // movd    xmm3, dword [rdx + 84]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd2720f66; BYTE $0x1d // psrld    xmm2, 29
	LONG $0xf1720f66; BYTE $0x03 // pslld    xmm1, 3
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	LONG $0x526e0f66; BYTE $0x58 // movd    xmm2, dword [rdx + 88]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd3ef0f66             // pxor    xmm2, xmm3
	LONG $0xcafa0f66             // psubd    xmm1, xmm2
	LONG $0x526e0f66; BYTE $0x5c // movd    xmm2, dword [rdx + 92]
	LONG $0xd2700f66; BYTE $0x00 // pshufd    xmm2, xmm2, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc86f0f66             // movdqa    xmm1, xmm0
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf0720f66; BYTE $0x17 // pslld    xmm0, 23
	LONG $0xc1eb0f66             // por    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x30 // movd    xmm1, dword [rdx + 48]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xcaef0f66             // pxor    xmm1, xmm2
	LONG $0xc1fa0f66             // psubd    xmm0, xmm1
	LONG $0x4a6e0f66; BYTE $0x34 // movd    xmm1, dword [rdx + 52]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf4720f66; BYTE $0x05 // pslld    xmm4, 5
	LONG $0xe0eb0f66             // por    xmm4, xmm0
	LONG $0x426e0f66; BYTE $0x38 // movd    xmm0, dword [rdx + 56]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc1ef0f66             // pxor    xmm0, xmm1
	LONG $0xe0fa0f66             // psubd    xmm4, xmm0
	LONG $0x426e0f66; BYTE $0x3c // movd    xmm0, dword [rdx + 60]
	LONG $0xe8700f66; BYTE $0x00 // pshufd    xmm5, xmm0, 0
	LONG $0xecef0f66             // pxor    xmm5, xmm4
	LONG $0xc36f0f66             // movdqa    xmm0, xmm3
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf3720f66; BYTE $0x03 // pslld    xmm3, 3
	LONG $0xd8eb0f66             // por    xmm3, xmm0
	LONG $0x426e0f66; BYTE $0x40 // movd    xmm0, dword [rdx + 64]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc5ef0f66             // pxor    xmm0, xmm5
	LONG $0xd8fa0f66             // psubd    xmm3, xmm0
	LONG $0x426e0f66; BYTE $0x44 // movd    xmm0, dword [rdx + 68]
	LONG $0xe0700f66; BYTE $0x00 // pshufd    xmm4, xmm0, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xd0720f66; BYTE $0x09 // psrld    xmm0, 9
	LONG $0xf2720f66; BYTE $0x17 // pslld    xmm2, 23
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	LONG $0x426e0f66; BYTE $0x18 // movd    xmm0, dword [rdx + 24]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc4ef0f66             // pxor    xmm0, xmm4
	LONG $0xd0fa0f66             // psubd    xmm2, xmm0
	LONG $0x426e0f66; BYTE $0x1c // movd    xmm0, dword [rdx + 28]
	LONG $0xd8700f66; BYTE $0x00 // pshufd    xmm3, xmm0, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0xd0720f66; BYTE $0x1b // psrld    xmm0, 27
	LONG $0xf1720f66; BYTE $0x05 // pslld    xmm1, 5
	LONG $0xc8eb0f66             // por    xmm1, xmm0
	LONG $0x426e0f66; BYTE $0x20 // movd    xmm0, dword [rdx + 32]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc3ef0f66             // pxor    xmm0, xmm3
	LONG $0xc8fa0f66             // psubd    xmm1, xmm0
	LONG $0x426e0f66; BYTE $0x24 // movd    xmm0, dword [rdx + 36]
	LONG $0xd0700f66; BYTE $0x00 // pshufd    xmm2, xmm0, 0
	LONG $0xd1ef0f66             // pxor    xmm2, xmm1
	LONG $0xc56f0f66             // movdqa    xmm0, xmm5
	LONG $0xd0720f66; BYTE $0x1d // psrld    xmm0, 29
	LONG $0xf5720f66; BYTE $0x03 // pslld    xmm5, 3
	LONG $0xe8eb0f66             // por    xmm5, xmm0
	LONG $0x426e0f66; BYTE $0x28 // movd    xmm0, dword [rdx + 40]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc2ef0f66             // pxor    xmm0, xmm2
	LONG $0xe8fa0f66             // psubd    xmm5, xmm0
	LONG $0x426e0f66; BYTE $0x2c // movd    xmm0, dword [rdx + 44]
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xc5ef0f66             // pxor    xmm0, xmm5
	LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
	LONG $0xd1720f66; BYTE $0x09 // psrld    xmm1, 9
	LONG $0xf4720f66; BYTE $0x17 // pslld    xmm4, 23
	LONG $0xe1eb0f66             // por    xmm4, xmm1
	LONG $0x0a6e0f66             // movd    xmm1, dword [rdx]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xc8ef0f66             // pxor    xmm1, xmm0
	LONG $0xe1fa0f66             // psubd    xmm4, xmm1
	LONG $0x4a6e0f66; BYTE $0x04 // movd    xmm1, dword [rdx + 4]
	LONG $0xc9700f66; BYTE $0x00 // pshufd    xmm1, xmm1, 0
	LONG $0xccef0f66             // pxor    xmm1, xmm4
	LONG $0xe36f0f66             // movdqa    xmm4, xmm3
	LONG $0xd4720f66; BYTE $0x1b // psrld    xmm4, 27
	LONG $0xf3720f66; BYTE $0x05 // pslld    xmm3, 5
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x08 // movd    xmm4, dword [rdx + 8]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe1ef0f66             // pxor    xmm4, xmm1
	LONG $0xdcfa0f66             // psubd    xmm3, xmm4
	LONG $0x626e0f66; BYTE $0x0c // movd    xmm4, dword [rdx + 12]
	LONG $0xe4700f66; BYTE $0x00 // pshufd    xmm4, xmm4, 0
	LONG $0xe3ef0f66             // pxor    xmm4, xmm3
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd3720f66; BYTE $0x1d // psrld    xmm3, 29
	LONG $0xf2720f66; BYTE $0x03 // pslld    xmm2, 3
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	LONG $0x5a6e0f66; BYTE $0x10 // movd    xmm3, dword [rdx + 16]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdcef0f66             // pxor    xmm3, xmm4
	LONG $0xd3fa0f66             // psubd    xmm2, xmm3
	LONG $0x5a6e0f66; BYTE $0x14 // movd    xmm3, dword [rdx + 20]
	LONG $0xdb700f66; BYTE $0x00 // pshufd    xmm3, xmm3, 0
	LONG $0xdaef0f66             // pxor    xmm3, xmm2
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd1620f66             // punpckldq    xmm2, xmm1
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xeb620f66             // punpckldq    xmm5, xmm3
	LONG $0xc16a0f66             // punpckhdq    xmm0, xmm1
	LONG $0xe36a0f66             // punpckhdq    xmm4, xmm3
	LONG $0xca6f0f66             // movdqa    xmm1, xmm2
	LONG $0xcd6c0f66             // punpcklqdq    xmm1, xmm5
	LONG $0xd56d0f66             // punpckhqdq    xmm2, xmm5
	LONG $0xd86f0f66             // movdqa    xmm3, xmm0
	LONG $0xdc6c0f66             // punpcklqdq    xmm3, xmm4
	LONG $0xc46d0f66             // punpckhqdq    xmm0, xmm4
	LONG $0x0f7f0ff3             // movdqu    oword [rdi], xmm1
	LONG $0x577f0ff3; BYTE $0x10 // movdqu    oword [rdi + 16], xmm2
	LONG $0x5f7f0ff3; BYTE $0x20 // movdqu    oword [rdi + 32], xmm3
	LONG $0x477f0ff3; BYTE $0x30 // movdqu    oword [rdi + 48], xmm0
	RET
