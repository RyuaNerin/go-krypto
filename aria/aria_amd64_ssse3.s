//go:build amd64 && !purego
// +build amd64,!purego

// GENERATED BY C2GOASM
// EDITED BY RYUANERIN
// -- DO NOT EDIT

#include "textflag.h"

DATA LCDATA1<>+0x000(SB)/8, $0x0504808000808080
DATA LCDATA1<>+0x008(SB)/8, $0x0d0c808008808080
DATA LCDATA1<>+0x010(SB)/8, $0x0480808001008080
DATA LCDATA1<>+0x018(SB)/8, $0x0c80808009088080
GLOBL LCDATA1<>(SB), 8, $32

TEXT ·__initEncKey_SSSE3(SB), NOSPLIT, $136-24
	MOVQ rk+0(FP), DI
	MOVQ keyk+8(FP), SI
	MOVQ keyBits+16(FP), DX

	MOVQ SP, BP
	ADDQ $16, SP
	ANDQ $-16, SP
	MOVQ BP, 112(SP)
	LEAQ LCDATA1<>(SB), BP

	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x0f46b60f                           // movzx    eax, byte [rsi + 15]
	LONG $0x0d4eb60f                           // movzx    ecx, byte [rsi + 13]
	LONG $0x46b60f44; BYTE $0x0c               // movzx    r8d, byte [rsi + 12]
	LONG $0x6e0f4166; BYTE $0xd0               // movd    xmm2, r8d
	LONG $0x203a0f66; WORD $0x0156; BYTE $0x04 // pinsrb    xmm2, byte [rsi + 1], 4
	LONG $0x203a0f66; WORD $0x0456; BYTE $0x08 // pinsrb    xmm2, byte [rsi + 4], 8
	LONG $0x203a0f66; WORD $0x0956; BYTE $0x0c // pinsrb    xmm2, byte [rsi + 9], 12
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x00380f66; WORD $0x0045             // pshufb    xmm0, oword 0[rbp]
	LONG $0xe16e0f66                           // movd    xmm4, ecx
	LONG $0x203a0f66; WORD $0x0426             // pinsrb    xmm4, byte [rsi], 4
	LONG $0x203a0f66; WORD $0x0566; BYTE $0x08 // pinsrb    xmm4, byte [rsi + 5], 8
	LONG $0x0e4eb60f                           // movzx    ecx, byte [rsi + 14]
	LONG $0x203a0f66; WORD $0x0866; BYTE $0x0c // pinsrb    xmm4, byte [rsi + 8], 12
	LONG $0x647f0f66; WORD $0x4024             // movdqa    oword [rsp + 64], xmm4
	LONG $0x00380f66; WORD $0x1065             // pshufb    xmm4, oword 16[rbp]
	LONG $0xe0eb0f66                           // por    xmm4, xmm0
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0x203a0f66; WORD $0x0246; BYTE $0x04 // pinsrb    xmm0, byte [rsi + 2], 4
	LONG $0x203a0f66; WORD $0x0646; BYTE $0x08 // pinsrb    xmm0, byte [rsi + 6], 8
	LONG $0x203a0f66; WORD $0x0a46; BYTE $0x0c // pinsrb    xmm0, byte [rsi + 10], 12
	LONG $0xf0720f66; BYTE $0x08               // pslld    xmm0, 8
	LONG $0xc86e0f66                           // movd    xmm1, eax
	LONG $0x203a0f66; WORD $0x034e; BYTE $0x04 // pinsrb    xmm1, byte [rsi + 3], 4
	LONG $0x203a0f66; WORD $0x074e; BYTE $0x08 // pinsrb    xmm1, byte [rsi + 7], 8
	LONG $0x203a0f66; WORD $0x0b4e; BYTE $0x0c // pinsrb    xmm1, byte [rsi + 11], 12
	LONG $0x4c7f0f66; WORD $0x5024             // movdqa    oword [rsp + 80], xmm1
	LONG $0xc1eb0f66                           // por    xmm0, xmm1
	LONG $0xc4eb0f66                           // por    xmm0, xmm4
	QUAD $0x003fffffff80b848; WORD $0x0000     // mov    rax, 274877906816
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	LONG $0x06e8c148                           // shr    rax, 6
	WORD $0x634c; BYTE $0xd0                   // movsxd    r10, eax
	LONG $0x04e2c149                           // shl    r10, 4

	MOVQ ·krk(SB), DX                          // lea    rdx, [rip + _KRK]
	LONG $0x3a0f4166; WORD $0xc016; BYTE $0x01 // pextrd    r8d, xmm0, 1
	LONG $0x120c8b41                           // mov    ecx, dword [r10 + rdx]
	WORD $0x8949; BYTE $0xd3                   // mov    r11, rdx
	LONG $0x24448944; BYTE $0x34               // mov    dword [rsp + 52], r8d
	WORD $0x3144; BYTE $0xc1                   // xor    ecx, r8d
	WORD $0x8941; BYTE $0xc9                   // mov    r9d, ecx
	WORD $0x8941; BYTE $0xc8                   // mov    r8d, ecx
	LONG $0x18e8c141                           // shr    r8d, 24

	MOVQ ·s1(SB), R12 // lea    r12, [rip + _S1]
	LONG $0x10e9c141  // shr    r9d, 16
	LONG $0xc9b60f45  // movzx    r9d, r9b

	MOVQ ·s2(SB), R15        // lea    r15, [rip + _S2]
	LONG $0x8f348b47         // mov    r14d, dword [r15 + 4*r9]
	LONG $0x84343347         // xor    r14d, dword [r12 + 4*r8]
	WORD $0xb60f; BYTE $0xdd // movzx    ebx, ch

	MOVQ ·x1(SB), R13            // lea    r13, [rip + _X1]
	LONG $0x9d743345; BYTE $0x00 // xor    r14d, dword [r13 + 4*rbx]
	WORD $0xb60f; BYTE $0xc9     // movzx    ecx, cl

	MOVQ ·x2(SB), DX                           // lea    rdx, [rip + _X2]
	LONG $0x8a343344                           // xor    r14d, dword [rdx + 4*rcx]
	LONG $0x3a0f4166; WORD $0xc016; BYTE $0x02 // pextrd    r8d, xmm0, 2
	LONG $0x1a4c8b43; BYTE $0x04               // mov    ecx, dword [r10 + r11 + 4]
	LONG $0x24448944; BYTE $0x1c               // mov    dword [rsp + 28], r8d
	WORD $0x3144; BYTE $0xc1                   // xor    ecx, r8d
	WORD $0x8941; BYTE $0xc9                   // mov    r9d, ecx
	LONG $0x18e9c141                           // shr    r9d, 24
	WORD $0x8941; BYTE $0xc8                   // mov    r8d, ecx
	LONG $0x10e8c141                           // shr    r8d, 16
	LONG $0xc0b60f45                           // movzx    r8d, r8b
	LONG $0x87048b47                           // mov    r8d, dword [r15 + 4*r8]
	LONG $0x8c043347                           // xor    r8d, dword [r12 + 4*r9]
	WORD $0xb60f; BYTE $0xdd                   // movzx    ebx, ch
	LONG $0x9d443345; BYTE $0x00               // xor    r8d, dword [r13 + 4*rbx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8a043344                           // xor    r8d, dword [rdx + 4*rcx]
	LONG $0x3a0f4166; WORD $0xc116; BYTE $0x03 // pextrd    r9d, xmm0, 3
	LONG $0x1a4c8b43; BYTE $0x08               // mov    ecx, dword [r10 + r11 + 8]
	LONG $0x244c8944; BYTE $0x18               // mov    dword [rsp + 24], r9d
	WORD $0x3144; BYTE $0xc9                   // xor    ecx, r9d
	WORD $0x8941; BYTE $0xcb                   // mov    r11d, ecx
	LONG $0x18ebc141                           // shr    r11d, 24
	WORD $0x8941; BYTE $0xc9                   // mov    r9d, ecx
	LONG $0x10e9c141                           // shr    r9d, 16
	LONG $0xc9b60f45                           // movzx    r9d, r9b
	LONG $0x8f0c8b47                           // mov    r9d, dword [r15 + 4*r9]
	LONG $0x9c0c3347                           // xor    r9d, dword [r12 + 4*r11]
	WORD $0xb60f; BYTE $0xdd                   // movzx    ebx, ch
	LONG $0x9d4c3345; BYTE $0x00               // xor    r9d, dword [r13 + 4*rbx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8a0c3344                           // xor    r9d, dword [rdx + 4*rcx]

	MOVQ ·krk(SB), CX                          // lea    rcx, [rip + _KRK]
	LONG $0x0a4c8b41; BYTE $0x0c               // mov    ecx, dword [r10 + rcx + 12]
	LONG $0x7e0f4166; BYTE $0xc2               // movd    r10d, xmm0
	LONG $0x24548944; BYTE $0x04               // mov    dword [rsp + 4], r10d
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0x8941; BYTE $0xcb                   // mov    r11d, ecx
	LONG $0x18ebc141                           // shr    r11d, 24
	WORD $0x8941; BYTE $0xca                   // mov    r10d, ecx
	LONG $0x10eac141                           // shr    r10d, 16
	LONG $0xd2b60f45                           // movzx    r10d, r10b
	LONG $0x97148b47                           // mov    r10d, dword [r15 + 4*r10]
	LONG $0x9c143347                           // xor    r10d, dword [r12 + 4*r11]
	WORD $0xb60f; BYTE $0xdd                   // movzx    ebx, ch
	LONG $0x9d543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rbx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8a143344                           // xor    r10d, dword [rdx + 4*rcx]
	WORD $0x3145; BYTE $0xc8                   // xor    r8d, r9d
	WORD $0x3145; BYTE $0xd1                   // xor    r9d, r10d
	WORD $0x3145; BYTE $0xc2                   // xor    r10d, r8d
	WORD $0x3145; BYTE $0xf0                   // xor    r8d, r14d
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	WORD $0x3145; BYTE $0xf1                   // xor    r9d, r14d
	WORD $0x3145; BYTE $0xc3                   // xor    r11d, r8d
	WORD $0x0f41; BYTE $0xc9                   // bswap    r9d
	LONG $0x10c9c141                           // ror    r9d, 16
	LONG $0x10c3c141                           // rol    r11d, 16
	LONG $0x247c8948; BYTE $0x38               // mov    qword [rsp + 56], rdi
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	WORD $0x3145; BYTE $0xd9                   // xor    r9d, r11d
	WORD $0x3145; BYTE $0xd3                   // xor    r11d, r10d
	WORD $0x8945; BYTE $0xcf                   // mov    r15d, r9d
	WORD $0x3145; BYTE $0xc7                   // xor    r15d, r8d
	WORD $0x3145; BYTE $0xed                   // xor    r13d, r13d
	LONG $0x000000bb; BYTE $0x00               // mov    ebx, 0
	LONG $0x0000bc41; WORD $0x0000             // mov    r12d, 0
	LONG $0x000000b9; BYTE $0x00               // mov    ecx, 0
	LONG $0x0000be41; WORD $0x0000             // mov    r14d, 0
	QUAD $0x00008108247c8148; BYTE $0x00       // cmp    qword [rsp + 8], 129
	JB   LBB0_4
	LONG $0x10768b44                           // mov    r14d, dword [rsi + 16]
	WORD $0x4e8b; BYTE $0x14                   // mov    ecx, dword [rsi + 20]
	WORD $0x0f41; BYTE $0xce                   // bswap    r14d
	WORD $0xc90f                               // bswap    ecx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0xc1fa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 193
	JB   LBB0_2
	LONG $0x18668b44                           // mov    r12d, dword [rsi + 24]
	WORD $0x5e8b; BYTE $0x1c                   // mov    ebx, dword [rsi + 28]
	WORD $0x0f41; BYTE $0xcc                   // bswap    r12d
	WORD $0xcb0f                               // bswap    ebx
	JMP  LBB0_4

LBB0_2:
	WORD $0xdb31             // xor    ebx, ebx
	WORD $0x3145; BYTE $0xe4 // xor    r12d, r12d

LBB0_4:
	WORD $0x3141; BYTE $0xc8                   // xor    r8d, ecx
	WORD $0x3141; BYTE $0xda                   // xor    r10d, ebx
	WORD $0x3145; BYTE $0xdc                   // xor    r12d, r11d
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	WORD $0x408d; BYTE $0x01                   // lea    eax, [rax + 1]
	LONG $0xc5440f41                           // cmove    eax, r13d
	WORD $0x9848                               // cdqe
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x04e3c148                           // shl    rbx, 4
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	WORD $0x408d; BYTE $0x01                   // lea    eax, [rax + 1]
	LONG $0xc5440f41                           // cmove    eax, r13d
	LONG $0x6e0f4166; BYTE $0xf0               // movd    xmm6, r8d
	LONG $0x3a0f4166; WORD $0xf422; BYTE $0x01 // pinsrd    xmm6, r12d, 1
	LONG $0x3a0f4166; WORD $0xf222; BYTE $0x02 // pinsrd    xmm6, r10d, 2
	LONG $0x3a0f4166; WORD $0xf622; BYTE $0x03 // pinsrd    xmm6, r14d, 3
	LONG $0x6e0f4166; BYTE $0xeb               // movd    xmm5, r11d
	LONG $0x3a0f4166; WORD $0xef22; BYTE $0x01 // pinsrd    xmm5, r15d, 1
	LONG $0x3a0f4166; WORD $0xe922; BYTE $0x02 // pinsrd    xmm5, r9d, 2
	LONG $0xed700f66; BYTE $0x64               // pshufd    xmm5, xmm5, 100
	LONG $0xeeef0f66                           // pxor    xmm5, xmm6
	LONG $0x163a0f66; WORD $0x03ea             // pextrd    edx, xmm5, 3
	LONG $0x30245489                           // mov    dword [rsp + 48], edx

	MOVQ ·krk(SB), R15       // lea    r15, [rip + _KRK]
	LONG $0x3b0c8b42         // mov    ecx, dword [rbx + r15]
	WORD $0x894d; BYTE $0xfb // mov    r11, r15
	WORD $0xd131             // xor    ecx, edx
	WORD $0xca89             // mov    edx, ecx
	WORD $0xb60f; BYTE $0xf5 // movzx    esi, ch
	LONG $0xc1b60f44         // movzx    r8d, cl
	WORD $0xe9c1; BYTE $0x18 // shr    ecx, 24
	WORD $0xeac1; BYTE $0x10 // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2 // movzx    edx, dl

	MOVQ ·x2(SB), R9             // lea    r9, [rip + _X2]
	LONG $0x91148b41             // mov    edx, dword [r9 + 4*rdx]
	MOVQ ·x1(SB), R13            // lea    r13, [rip + _X1]
	LONG $0x8d543341; BYTE $0x00 // xor    edx, dword [r13 + 4*rcx]
	MOVQ ·s1(SB), R12            // lea    r12, [rip + _S1]
	LONG $0xb4143341             // xor    edx, dword [r12 + 4*rsi]
	MOVQ ·s2(SB), R15            // lea    r15, [rip + _S2]

	LONG $0x87143343                           // xor    edx, dword [r15 + 4*r8]
	LONG $0xee7e0f66                           // movd    esi, xmm5
	LONG $0x1b4c8b42; BYTE $0x04               // mov    ecx, dword [rbx + r11 + 4]
	LONG $0x14247489                           // mov    dword [rsp + 20], esi
	WORD $0xf131                               // xor    ecx, esi
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0x8941; BYTE $0xc8                   // mov    r8d, ecx
	LONG $0x10e8c141                           // shr    r8d, 16
	LONG $0xc0b60f45                           // movzx    r8d, r8b
	WORD $0x894d; BYTE $0xca                   // mov    r10, r9
	LONG $0x81048b47                           // mov    r8d, dword [r9 + 4*r8]
	LONG $0xb5443345; BYTE $0x00               // xor    r8d, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xf5                   // movzx    esi, ch
	LONG $0xb4043345                           // xor    r8d, dword [r12 + 4*rsi]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8f043345                           // xor    r8d, dword [r15 + 4*rcx]
	LONG $0x163a0f66; WORD $0x01ee             // pextrd    esi, xmm5, 1
	LONG $0x1b4c8b42; BYTE $0x08               // mov    ecx, dword [rbx + r11 + 8]
	LONG $0x10247489                           // mov    dword [rsp + 16], esi
	WORD $0xf131                               // xor    ecx, esi
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0x8941; BYTE $0xc9                   // mov    r9d, ecx
	LONG $0x10e9c141                           // shr    r9d, 16
	LONG $0xc9b60f45                           // movzx    r9d, r9b
	LONG $0x8a0c8b47                           // mov    r9d, dword [r10 + 4*r9]
	WORD $0x894d; BYTE $0xd6                   // mov    r14, r10
	LONG $0xb54c3345; BYTE $0x00               // xor    r9d, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xf5                   // movzx    esi, ch
	LONG $0xb40c3345                           // xor    r9d, dword [r12 + 4*rsi]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8f0c3345                           // xor    r9d, dword [r15 + 4*rcx]
	LONG $0x1b4c8b42; BYTE $0x0c               // mov    ecx, dword [rbx + r11 + 12]
	LONG $0x163a0f66; WORD $0x02ee             // pextrd    esi, xmm5, 2
	LONG $0x2c247489                           // mov    dword [rsp + 44], esi
	WORD $0xf131                               // xor    ecx, esi
	WORD $0x8941; BYTE $0xca                   // mov    r10d, ecx
	LONG $0x18eac141                           // shr    r10d, 24
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb6348b41                           // mov    esi, dword [r14 + 4*rsi]
	LONG $0x95743343; BYTE $0x00               // xor    esi, dword [r13 + 4*r10]
	WORD $0xb60f; BYTE $0xdd                   // movzx    ebx, ch
	LONG $0x9c343341                           // xor    esi, dword [r12 + 4*rbx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8f343341                           // xor    esi, dword [r15 + 4*rcx]
	WORD $0x3145; BYTE $0xc8                   // xor    r8d, r9d
	WORD $0x3141; BYTE $0xf1                   // xor    r9d, esi
	WORD $0x3144; BYTE $0xc6                   // xor    esi, r8d
	WORD $0x3141; BYTE $0xd0                   // xor    r8d, edx
	WORD $0x8944; BYTE $0xc9                   // mov    ecx, r9d
	WORD $0x3141; BYTE $0xd1                   // xor    r9d, edx
	WORD $0x3144; BYTE $0xc1                   // xor    ecx, r8d
	LONG $0x10c0c141                           // rol    r8d, 16
	WORD $0x0f41; BYTE $0xc9                   // bswap    r9d
	WORD $0x3141; BYTE $0xc9                   // xor    r9d, ecx
	WORD $0x8944; BYTE $0xca                   // mov    edx, r9d
	WORD $0x3144; BYTE $0xc2                   // xor    edx, r8d
	LONG $0x6e0f4166; BYTE $0xf0               // movd    xmm6, r8d
	LONG $0x223a0f66; WORD $0x01f2             // pinsrd    xmm6, edx, 1
	LONG $0x700f4466; WORD $0xeec0             // pshufd    xmm8, xmm0, 238
	LONG $0xef0f4466; BYTE $0xc6               // pxor    xmm8, xmm6
	LONG $0x244c3344; BYTE $0x04               // xor    r9d, dword [rsp + 4]
	LONG $0x3a0f4566; WORD $0xc122; BYTE $0x02 // pinsrd    xmm8, r9d, 2
	LONG $0x3a0f4466; WORD $0xc222; BYTE $0x03 // pinsrd    xmm8, edx, 3
	WORD $0x634c; BYTE $0xd0                   // movsxd    r10, eax
	LONG $0x04e2c149                           // shl    r10, 4
	LONG $0xf8700f66; BYTE $0x4e               // pshufd    xmm7, xmm0, 78
	WORD $0xce0f                               // bswap    esi
	WORD $0xcec1; BYTE $0x10                   // ror    esi, 16
	WORD $0xf131                               // xor    ecx, esi
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0x223a0f66; WORD $0x00f1             // pinsrd    xmm6, ecx, 0
	LONG $0x223a0f66; WORD $0x02f6             // pinsrd    xmm6, esi, 2
	LONG $0xf6700f66; BYTE $0xe0               // pshufd    xmm6, xmm6, 224
	LONG $0xef0f4166; BYTE $0xf0               // pxor    xmm6, xmm8
	LONG $0x163a0f66; WORD $0x03f0             // pextrd    eax, xmm6, 3
	WORD $0x894c; BYTE $0xde                   // mov    rsi, r11
	LONG $0x1a048b47                           // mov    r8d, dword [r10 + r11]
	LONG $0x20244489                           // mov    dword [rsp + 32], eax
	WORD $0x3141; BYTE $0xc0                   // xor    r8d, eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0x8944; BYTE $0xc1                   // mov    ecx, r8d
	WORD $0xe9c1; BYTE $0x10                   // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8f1c8b45                           // mov    r11d, dword [r15 + 4*rcx]
	LONG $0x841c3345                           // xor    r11d, dword [r12 + 4*rax]
	LONG $0xf07e0f66                           // movd    eax, xmm6
	LONG $0x32548b41; BYTE $0x04               // mov    edx, dword [r10 + rsi + 4]
	LONG $0x28244489                           // mov    dword [rsp + 40], eax
	WORD $0xc231                               // xor    edx, eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0xd189                               // mov    ecx, edx
	WORD $0xe9c1; BYTE $0x10                   // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8f1c8b41                           // mov    ebx, dword [r15 + 4*rcx]
	LONG $0x841c3341                           // xor    ebx, dword [r12 + 4*rax]
	LONG $0x163a0f66; WORD $0x01f0             // pextrd    eax, xmm6, 1
	LONG $0x327c8b41; BYTE $0x08               // mov    edi, dword [r10 + rsi + 8]
	LONG $0x24244489                           // mov    dword [rsp + 36], eax
	WORD $0xc731                               // xor    edi, eax
	WORD $0xf889                               // mov    eax, edi
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0x8941; BYTE $0xf9                   // mov    r9d, edi
	LONG $0x10e9c141                           // shr    r9d, 16
	LONG $0xc9b60f45                           // movzx    r9d, r9b
	LONG $0x8f348b47                           // mov    r14d, dword [r15 + 4*r9]
	LONG $0x84343345                           // xor    r14d, dword [r12 + 4*rax]
	LONG $0x3a0f4166; WORD $0xf116; BYTE $0x02 // pextrd    r9d, xmm6, 2
	LONG $0x32448b41; BYTE $0x0c               // mov    eax, dword [r10 + rsi + 12]
	WORD $0x3144; BYTE $0xc8                   // xor    eax, r9d
	WORD $0x8941; BYTE $0xc2                   // mov    r10d, eax
	LONG $0x10eac141                           // shr    r10d, 16
	LONG $0xd2b60f45                           // movzx    r10d, r10b
	LONG $0x97148b47                           // mov    r10d, dword [r15 + 4*r10]
	WORD $0x8941; BYTE $0xc7                   // mov    r15d, eax
	LONG $0x18efc141                           // shr    r15d, 24
	LONG $0xbc143347                           // xor    r10d, dword [r12 + 4*r15]
	WORD $0x8944; BYTE $0xc1                   // mov    ecx, r8d
	WORD $0xb60f; BYTE $0xf5                   // movzx    esi, ch
	LONG $0xb55c3345; BYTE $0x00               // xor    r11d, dword [r13 + 4*rsi]
	LONG $0xf9b60f44                           // movzx    r15d, cl
	WORD $0xb60f; BYTE $0xf6                   // movzx    esi, dh
	LONG $0xb55c3341; BYTE $0x00               // xor    ebx, dword [r13 + 4*rsi]
	WORD $0xf989                               // mov    ecx, edi
	WORD $0xb60f; BYTE $0xf5                   // movzx    esi, ch
	LONG $0xb5743345; BYTE $0x00               // xor    r14d, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xf4                   // movzx    esi, ah
	LONG $0xb5543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rsi]
	LONG $0x3024748b                           // mov    esi, dword [rsp + 48]

	MOVQ ·x2(SB), R12                          // lea    r12, [rip + _X2]
	LONG $0xbc1c3347                           // xor    r11d, dword [r12 + 4*r15]
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x941c3341                           // xor    ebx, dword [r12 + 4*rdx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8c343345                           // xor    r14d, dword [r12 + 4*rcx]
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x84143345                           // xor    r10d, dword [r12 + 4*rax]
	WORD $0x3144; BYTE $0xf3                   // xor    ebx, r14d
	WORD $0x3145; BYTE $0xd6                   // xor    r14d, r10d
	WORD $0x3141; BYTE $0xda                   // xor    r10d, ebx
	WORD $0x3144; BYTE $0xdb                   // xor    ebx, r11d
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0x3145; BYTE $0xde                   // xor    r14d, r11d
	WORD $0xd831                               // xor    eax, ebx
	WORD $0x0f41; BYTE $0xce                   // bswap    r14d
	LONG $0x10cec141                           // ror    r14d, 16
	WORD $0xc0c1; BYTE $0x10                   // rol    eax, 16
	WORD $0x3141; BYTE $0xc6                   // xor    r14d, eax
	LONG $0x6e0f4566; BYTE $0xc6               // movd    xmm8, r14d
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	WORD $0x3144; BYTE $0xd0                   // xor    eax, r10d
	LONG $0x3a0f4466; WORD $0xc322; BYTE $0x01 // pinsrd    xmm8, ebx, 1
	LONG $0x3a0f4466; WORD $0xc022; BYTE $0x02 // pinsrd    xmm8, eax, 2
	LONG $0x700f4566; WORD $0x28c8             // pshufd    xmm9, xmm8, 40
	LONG $0x3a0f4566; WORD $0xc222; BYTE $0x03 // pinsrd    xmm8, r10d, 3
	LONG $0x24548b44; BYTE $0x2c               // mov    r10d, dword [rsp + 44]
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	LONG $0x0df0a40f                           // shld    eax, esi, 13
	LONG $0x6e0f4466; BYTE $0xd3               // movd    xmm10, ebx
	LONG $0x700f4466; WORD $0x90dd             // pshufd    xmm11, xmm5, 144
	LONG $0x3a0f4566; WORD $0xda0e; BYTE $0x03 // pblendw    xmm11, xmm10, 3
	LONG $0xef0f4566; BYTE $0xd8               // pxor    xmm11, xmm8
	LONG $0x700f4566; WORD $0x44d3             // pshufd    xmm10, xmm11, 68
	LONG $0x3a0f4566; WORD $0xd10e; BYTE $0xcf // pblendw    xmm10, xmm9, 207
	LONG $0x700f4466; WORD $0xffc5             // pshufd    xmm8, xmm5, 255
	LONG $0x3a0f4566; WORD $0xc20e; BYTE $0xfc // pblendw    xmm8, xmm10, 252
	LONG $0xef0f4566; BYTE $0xc3               // pxor    xmm8, xmm11
	LONG $0x3a0f4466; WORD $0xc116; BYTE $0x02 // pextrd    ecx, xmm8, 2
	LONG $0x34244433                           // xor    eax, dword [rsp + 52]
	LONG $0x700f4466; WORD $0x39c8             // pshufd    xmm9, xmm0, 57
	LONG $0x700f4466; WORD $0x93d5             // pshufd    xmm10, xmm5, 147
	LONG $0x0e3a0f66; WORD $0xc0fd             // pblendw    xmm7, xmm5, 192
	LONG $0x700f4466; WORD $0x4edc             // pshufd    xmm11, xmm4, 78
	LONG $0x247c8b48; BYTE $0x38               // mov    rdi, qword [rsp + 56]
	WORD $0x0789                               // mov    dword [rdi], eax
	LONG $0x700f4466; WORD $0xaae5             // pshufd    xmm12, xmm5, 170
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0x720f4166; WORD $0x1fd5             // psrld    xmm13, 31
	LONG $0x720f4166; WORD $0x13d3             // psrld    xmm11, 19
	LONG $0x3a0f4566; WORD $0xdd0e; BYTE $0xc0 // pblendw    xmm11, xmm13, 192
	LONG $0x720f4166; WORD $0x01f4             // pslld    xmm12, 1
	LONG $0x700f4466; WORD $0x39ed             // pshufd    xmm13, xmm5, 57
	LONG $0x6f0f4466; BYTE $0xf5               // movdqa    xmm14, xmm5
	LONG $0x720f4166; WORD $0x1df6             // pslld    xmm14, 29
	LONG $0x720f4166; WORD $0x03d5             // psrld    xmm13, 3
	LONG $0xeb0f4566; BYTE $0xee               // por    xmm13, xmm14
	LONG $0xef0f4566; BYTE $0xe9               // pxor    xmm13, xmm9
	LONG $0x6f0f4566; BYTE $0xf9               // movdqa    xmm15, xmm9
	LONG $0x720f4166; WORD $0x0df7             // pslld    xmm15, 13
	LONG $0x3a0f4566; WORD $0xfc0e; BYTE $0xc0 // pblendw    xmm15, xmm12, 192
	LONG $0xeb0f4566; BYTE $0xfb               // por    xmm15, xmm11
	QUAD $0x000080af7f0f44f3; BYTE $0x00       // movdqu    oword [rdi + 128], xmm13
	LONG $0x6f0f4466; BYTE $0xdd               // movdqa    xmm11, xmm5
	LONG $0x3a0f4466; WORD $0xde0e; BYTE $0xc0 // pblendw    xmm11, xmm6, 192
	LONG $0x700f4466; WORD $0xaaee             // pshufd    xmm13, xmm6, 170
	LONG $0x3a0f4566; WORD $0xea0e; BYTE $0x3f // pblendw    xmm13, xmm10, 63
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0x720f4166; WORD $0x13d4             // psrld    xmm12, 19
	LONG $0x6f0f4566; BYTE $0xf5               // movdqa    xmm14, xmm13
	LONG $0x720f4166; WORD $0x0df6             // pslld    xmm14, 13
	LONG $0xeb0f4566; BYTE $0xf4               // por    xmm14, xmm12
	LONG $0xef0f4466; BYTE $0xf7               // pxor    xmm14, xmm7
	LONG $0x7f0f44f3; WORD $0x0477             // movdqu    oword [rdi + 4], xmm14
	LONG $0x700f4466; WORD $0xd3f6             // pshufd    xmm14, xmm6, 211
	LONG $0x3a0f4566; WORD $0xf00e; BYTE $0xc0 // pblendw    xmm14, xmm8, 192
	LONG $0x700f4166; WORD $0x00d8             // pshufd    xmm3, xmm8, 0
	LONG $0x0e3a0f66; WORD $0x3fde             // pblendw    xmm3, xmm6, 63
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xf1720f66; BYTE $0x0d               // pslld    xmm1, 13
	LONG $0x6f0f4466; BYTE $0xe3               // movdqa    xmm12, xmm3
	LONG $0x720f4166; WORD $0x13d4             // psrld    xmm12, 19
	LONG $0xeb0f4466; BYTE $0xe1               // por    xmm12, xmm1
	LONG $0xef0f4566; BYTE $0xe3               // pxor    xmm12, xmm11
	LONG $0x7f0f44f3; WORD $0x1467             // movdqu    oword [rdi + 20], xmm12
	LONG $0xc8700f66; BYTE $0x00               // pshufd    xmm1, xmm0, 0
	LONG $0x3a0f4166; WORD $0xc80e; BYTE $0x3f // pblendw    xmm1, xmm8, 63
	LONG $0x700f4566; WORD $0xf9e0             // pshufd    xmm12, xmm8, 249
	LONG $0xe4700f66; BYTE $0x44               // pshufd    xmm4, xmm4, 68
	LONG $0x3a0f4166; WORD $0xe40e; BYTE $0x3f // pblendw    xmm4, xmm12, 63
	LONG $0xf1720f66; BYTE $0x0d               // pslld    xmm1, 13
	LONG $0xd4720f66; BYTE $0x13               // psrld    xmm4, 19
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xe3ef0f66                           // pxor    xmm4, xmm3
	LONG $0x677f0ff3; BYTE $0x24               // movdqu    oword [rdi + 36], xmm4
	LONG $0xe0700f66; BYTE $0x44               // pshufd    xmm4, xmm0, 68
	LONG $0x3a0f4166; WORD $0xe40e; BYTE $0x3f // pblendw    xmm4, xmm12, 63
	LONG $0x3a0f4566; WORD $0xc616; BYTE $0x03 // pextrd    r14d, xmm8, 3
	LONG $0xef0f4466; BYTE $0xfc               // pxor    xmm15, xmm4
	LONG $0x7f0f44f3; WORD $0x347f             // movdqu    oword [rdi + 52], xmm15
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xd1720f66; BYTE $0x1f               // psrld    xmm1, 31
	LONG $0xfe0f4566; BYTE $0xed               // paddd    xmm13, xmm13
	LONG $0xeb0f4466; BYTE $0xe9               // por    xmm13, xmm1
	WORD $0xc889                               // mov    eax, ecx
	LONG $0xf0a40f44; BYTE $0x01               // shld    eax, r14d, 1
	LONG $0xef0f4466; BYTE $0xef               // pxor    xmm13, xmm7
	LONG $0x7f0f44f3; WORD $0x446f             // movdqu    oword [rdi + 68], xmm13
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xd1720f66; BYTE $0x1f               // psrld    xmm1, 31
	LONG $0xfe0f4566; BYTE $0xf6               // paddd    xmm14, xmm14
	LONG $0xeb0f4466; BYTE $0xf1               // por    xmm14, xmm1
	LONG $0xef0f4566; BYTE $0xf3               // pxor    xmm14, xmm11
	LONG $0x7f0f44f3; WORD $0x5477             // movdqu    oword [rdi + 84], xmm14
	LONG $0x700f4166; WORD $0xe9c8             // pshufd    xmm1, xmm8, 233
	LONG $0xd1720f66; BYTE $0x1f               // psrld    xmm1, 31
	LONG $0x6f0f4166; BYTE $0xf8               // movdqa    xmm7, xmm8
	LONG $0xfe0f4166; BYTE $0xf8               // paddd    xmm7, xmm8
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	WORD $0x3144; BYTE $0xc8                   // xor    eax, r9d
	LONG $0xfeef0f66                           // pxor    xmm7, xmm6
	LONG $0x7fd60f66; BYTE $0x64               // movq    qword [rdi + 100], xmm7
	WORD $0x4789; BYTE $0x6c                   // mov    dword [rdi + 108], eax
	QUAD $0xcc4024540e3a0f66                   // pblendw    xmm2, oword [rsp + 64], 204
	LONG $0xca700f66; BYTE $0x39               // pshufd    xmm1, xmm2, 57
	LONG $0xd1720f66; BYTE $0x07               // psrld    xmm1, 7
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd1eb0f66                           // por    xmm2, xmm1
	LONG $0xef0f4166; BYTE $0xd0               // pxor    xmm2, xmm8
	LONG $0x577f0ff3; BYTE $0x70               // movdqu    oword [rdi + 112], xmm2
	LONG $0xd6700f66; BYTE $0x39               // pshufd    xmm2, xmm6, 57
	LONG $0xce700f66; BYTE $0x93               // pshufd    xmm1, xmm6, 147
	LONG $0xf6720f66; BYTE $0x1d               // pslld    xmm6, 29
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xd7720f66; BYTE $0x03               // psrld    xmm7, 3
	LONG $0xfeeb0f66                           // por    xmm7, xmm6
	LONG $0xef0f4166; BYTE $0xfa               // pxor    xmm7, xmm10
	QUAD $0x00000090bf7f0ff3                   // movdqu    oword [rdi + 144], xmm7
	LONG $0x700f4166; WORD $0x39f0             // pshufd    xmm6, xmm8, 57
	LONG $0x6f0f4166; BYTE $0xf8               // movdqa    xmm7, xmm8
	LONG $0xf7720f66; BYTE $0x1d               // pslld    xmm7, 29
	LONG $0xd6720f66; BYTE $0x03               // psrld    xmm6, 3
	LONG $0xf7eb0f66                           // por    xmm6, xmm7
	LONG $0xf6700f66; BYTE $0x39               // pshufd    xmm6, xmm6, 57
	LONG $0xf1ef0f66                           // pxor    xmm6, xmm1
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xd1720f66; BYTE $0x01               // psrld    xmm1, 1
	LONG $0x720f4166; WORD $0x1ff2             // pslld    xmm10, 31
	LONG $0xeb0f4466; BYTE $0xd1               // por    xmm10, xmm1
	LONG $0xef0f4566; BYTE $0xd1               // pxor    xmm10, xmm9
	QUAD $0x000000a0b77f0ff3                   // movdqu    oword [rdi + 160], xmm6
	LONG $0x746f0f66; WORD $0x5024             // movdqa    xmm6, oword [rsp + 80]
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xf1720f66; BYTE $0x1d               // pslld    xmm1, 29
	LONG $0x720f4166; WORD $0x03d1             // psrld    xmm9, 3
	LONG $0xeb0f4466; BYTE $0xc9               // por    xmm9, xmm1
	LONG $0x700f4166; WORD $0x4ec9             // pshufd    xmm1, xmm9, 78
	LONG $0xef0f4166; BYTE $0xc8               // pxor    xmm1, xmm8
	QUAD $0x000000b08f7f0ff3                   // movdqu    oword [rdi + 176], xmm1
	QUAD $0x0000c0977f0f44f3; BYTE $0x00       // movdqu    oword [rdi + 192], xmm10
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x81fa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 129
	JB   LBB0_7
	LONG $0x3a0f4466; WORD $0xc016; BYTE $0x01 // pextrd    eax, xmm8, 1
	LONG $0x245c8b44; BYTE $0x28               // mov    r11d, dword [rsp + 40]
	LONG $0x24448b44; BYTE $0x20               // mov    r8d, dword [rsp + 32]
	LONG $0xd8a40f45; BYTE $0x1f               // shld    r8d, r11d, 31
	WORD $0x3141; BYTE $0xf0                   // xor    r8d, esi
	LONG $0xd0878944; WORD $0x0000; BYTE $0x00 // mov    dword [rdi + 208], r8d
	LONG $0x700f4166; WORD $0x44c8             // pshufd    xmm1, xmm8, 68
	LONG $0x0e3a0f66; WORD $0xc0d1             // pblendw    xmm2, xmm1, 192
	LONG $0xd2720f66; BYTE $0x01               // psrld    xmm2, 1
	LONG $0xf3720f66; BYTE $0x1f               // pslld    xmm3, 31
	LONG $0xdaeb0f66                           // por    xmm3, xmm2
	LONG $0xef0f4166; BYTE $0xdb               // pxor    xmm3, xmm11
	QUAD $0x000000d49f7f0ff3                   // movdqu    oword [rdi + 212], xmm3
	LONG $0x1fc8a40f                           // shld    eax, ecx, 31
	WORD $0x3144; BYTE $0xd8                   // xor    eax, r11d
	LONG $0x00e48789; WORD $0x0000             // mov    dword [rdi + 228], eax
	LONG $0xf1a40f44; BYTE $0x1f               // shld    ecx, r14d, 31
	LONG $0x24244c33                           // xor    ecx, dword [rsp + 36]
	LONG $0x7e0f4466; BYTE $0xc0               // movd    eax, xmm8
	LONG $0xc6a40f41; BYTE $0x1f               // shld    r14d, eax, 31
	LONG $0x00e88f89; WORD $0x0000             // mov    dword [rdi + 232], ecx
	WORD $0x3145; BYTE $0xce                   // xor    r14d, r9d
	LONG $0xecb78944; WORD $0x0000; BYTE $0x00 // mov    dword [rdi + 236], r14d
	LONG $0xc1fa8148; WORD $0x0000; BYTE $0x00 // cmp    rdx, 193
	JB   LBB0_7
	LONG $0x163a0f66; WORD $0x01f1             // pextrd    ecx, xmm6, 1
	LONG $0x1c24548b                           // mov    edx, dword [rsp + 28]
	LONG $0x1fd1a40f                           // shld    ecx, edx, 31
	WORD $0xc831                               // xor    eax, ecx
	LONG $0x00f08789; WORD $0x0000             // mov    dword [rdi + 240], eax
	LONG $0xce700f66; BYTE $0x4e               // pshufd    xmm1, xmm6, 78
	LONG $0xc0700f66; BYTE $0xd3               // pshufd    xmm0, xmm0, 211
	LONG $0xd5700f66; BYTE $0x00               // pshufd    xmm2, xmm5, 0
	LONG $0xd2720f66; BYTE $0x0d               // psrld    xmm2, 13
	LONG $0xd0720f66; BYTE $0x01               // psrld    xmm0, 1
	LONG $0x0e3a0f66; WORD $0xc0c2             // pblendw    xmm0, xmm2, 192
	LONG $0xf5720f66; BYTE $0x13               // pslld    xmm5, 19
	LONG $0xf1720f66; BYTE $0x1f               // pslld    xmm1, 31
	LONG $0x0e3a0f66; WORD $0xc0cd             // pblendw    xmm1, xmm5, 192
	LONG $0xc8eb0f66                           // por    xmm1, xmm0
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	QUAD $0x000000f48f7f0ff3                   // movdqu    oword [rdi + 244], xmm1
	LONG $0x1424448b                           // mov    eax, dword [rsp + 20]
	LONG $0x10244c8b                           // mov    ecx, dword [rsp + 16]
	LONG $0x13c8a40f                           // shld    eax, ecx, 19
	WORD $0xd031                               // xor    eax, edx
	LONG $0x01048789; WORD $0x0000             // mov    dword [rdi + 260], eax
	LONG $0xd1a40f44; BYTE $0x13               // shld    ecx, r10d, 19
	LONG $0x18244c33                           // xor    ecx, dword [rsp + 24]
	LONG $0x01088f89; WORD $0x0000             // mov    dword [rdi + 264], ecx
	LONG $0xd6ac0f44; BYTE $0x0d               // shrd    esi, r10d, 13
	LONG $0x04247433                           // xor    esi, dword [rsp + 4]
	LONG $0x010cb789; WORD $0x0000             // mov    dword [rdi + 268], esi

LBB0_7:
	MOVQ 112(SP), SP
	RET

TEXT ·__initDecKey_SSSE3(SB), NOSPLIT, $32-24
	MOVQ rk+0(FP), DI
	MOVQ key+8(FP), SI
	MOVQ keyBits+16(FP), DX

	ADDQ $8, SP

	LONG $0xe0e28348                       // and    rdx, -32
	LONG $0x1de2c148                       // shl    rdx, 29
	QUAD $0x002000000000b848; WORD $0x0000 // mov    rax, 137438953472
	WORD $0x0148; BYTE $0xd0               // add    rax, rdx
	WORD $0x8948; BYTE $0xc1               // mov    rcx, rax
	LONG $0x1ef9c148                       // sar    rcx, 30
	WORD $0x148b; BYTE $0x0f               // mov    edx, dword [rdi + rcx]
	WORD $0x100f; BYTE $0x07               // movups    xmm0, oword [rdi]
	WORD $0x1789                           // mov    dword [rdi], edx
	LONG $0x040f548b                       // mov    edx, dword [rdi + rcx + 4]
	WORD $0x5789; BYTE $0x04               // mov    dword [rdi + 4], edx
	LONG $0x080f548b                       // mov    edx, dword [rdi + rcx + 8]
	WORD $0x5789; BYTE $0x08               // mov    dword [rdi + 8], edx
	LONG $0x0c0f548b                       // mov    edx, dword [rdi + rcx + 12]
	WORD $0x5789; BYTE $0x0c               // mov    dword [rdi + 12], edx
	LONG $0x0f04110f                       // movups    oword [rdi + rcx], xmm0
	QUAD $0x000800000001ba48; WORD $0x0000 // mov    rdx, 34359738369
	WORD $0x3948; BYTE $0xd0               // cmp    rax, rdx
	JL   LBB1_1
	LONG $0x20f8c148                       // sar    rax, 32
	QUAD $0x0000000085048d4c               // lea    r8, [4*rax]
	WORD $0xf749; BYTE $0xd8               // neg    r8
	QUAD $0xfffffff085048d48               // lea    rax, [4*rax - 16]
	WORD $0xf631                           // xor    esi, esi
	WORD $0x3145; BYTE $0xc9               // xor    r9d, r9d

LBB1_3:
	LONG $0x244c894c; BYTE $0x08 // mov    qword [rsp + 8], r9
	LONG $0x2444894c; BYTE $0x10 // mov    qword [rsp + 16], r8
	LONG $0x375c8b44; BYTE $0x10 // mov    r11d, dword [rdi + rsi + 16]
	LONG $0x37448b44; BYTE $0x14 // mov    r8d, dword [rdi + rsi + 20]
	WORD $0x8945; BYTE $0xd9     // mov    r9d, r11d
	LONG $0x08e1c141             // shl    r9d, 8
	WORD $0x8945; BYTE $0xda     // mov    r10d, r11d
	LONG $0x08eac141             // shr    r10d, 8
	WORD $0x3145; BYTE $0xca     // xor    r10d, r9d
	WORD $0x8945; BYTE $0xd9     // mov    r9d, r11d
	LONG $0x10e1c141             // shl    r9d, 16
	WORD $0x8944; BYTE $0xdb     // mov    ebx, r11d
	WORD $0xebc1; BYTE $0x10     // shr    ebx, 16
	WORD $0x3144; BYTE $0xcb     // xor    ebx, r9d
	WORD $0x3144; BYTE $0xd3     // xor    ebx, r10d
	WORD $0x8945; BYTE $0xd9     // mov    r9d, r11d
	LONG $0x18e1c141             // shl    r9d, 24
	LONG $0x18ebc141             // shr    r11d, 24
	WORD $0x3145; BYTE $0xcb     // xor    r11d, r9d
	WORD $0x3141; BYTE $0xdb     // xor    r11d, ebx
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0x08e1c141             // shl    r9d, 8
	WORD $0x8945; BYTE $0xc2     // mov    r10d, r8d
	LONG $0x08eac141             // shr    r10d, 8
	WORD $0x3145; BYTE $0xca     // xor    r10d, r9d
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0x10e1c141             // shl    r9d, 16
	WORD $0x8944; BYTE $0xc3     // mov    ebx, r8d
	WORD $0xebc1; BYTE $0x10     // shr    ebx, 16
	WORD $0x3144; BYTE $0xcb     // xor    ebx, r9d
	WORD $0x3144; BYTE $0xd3     // xor    ebx, r10d
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0x18e1c141             // shl    r9d, 24
	LONG $0x18e8c141             // shr    r8d, 24
	WORD $0x3145; BYTE $0xc8     // xor    r8d, r9d
	WORD $0x3141; BYTE $0xd8     // xor    r8d, ebx
	LONG $0x374c8b44; BYTE $0x18 // mov    r9d, dword [rdi + rsi + 24]
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0x08e2c141             // shl    r10d, 8
	WORD $0x8944; BYTE $0xcb     // mov    ebx, r9d
	WORD $0xebc1; BYTE $0x08     // shr    ebx, 8
	WORD $0x3144; BYTE $0xd3     // xor    ebx, r10d
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0x10e2c141             // shl    r10d, 16
	WORD $0x8945; BYTE $0xce     // mov    r14d, r9d
	LONG $0x10eec141             // shr    r14d, 16
	WORD $0x3145; BYTE $0xd6     // xor    r14d, r10d
	WORD $0x3141; BYTE $0xde     // xor    r14d, ebx
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0x18e2c141             // shl    r10d, 24
	LONG $0x18e9c141             // shr    r9d, 24
	WORD $0x3145; BYTE $0xd1     // xor    r9d, r10d
	WORD $0x3145; BYTE $0xf1     // xor    r9d, r14d
	LONG $0x1c375c8b             // mov    ebx, dword [rdi + rsi + 28]
	WORD $0x8941; BYTE $0xda     // mov    r10d, ebx
	LONG $0x08e2c141             // shl    r10d, 8
	WORD $0x8941; BYTE $0xde     // mov    r14d, ebx
	LONG $0x08eec141             // shr    r14d, 8
	WORD $0x3145; BYTE $0xd6     // xor    r14d, r10d
	WORD $0x8941; BYTE $0xda     // mov    r10d, ebx
	LONG $0x10e2c141             // shl    r10d, 16
	WORD $0x8941; BYTE $0xdf     // mov    r15d, ebx
	LONG $0x10efc141             // shr    r15d, 16
	WORD $0x3145; BYTE $0xd7     // xor    r15d, r10d
	WORD $0x3145; BYTE $0xf7     // xor    r15d, r14d
	WORD $0x8941; BYTE $0xda     // mov    r10d, ebx
	LONG $0x18e2c141             // shl    r10d, 24
	WORD $0xebc1; BYTE $0x18     // shr    ebx, 24
	WORD $0x3144; BYTE $0xd3     // xor    ebx, r10d
	WORD $0x3144; BYTE $0xfb     // xor    ebx, r15d
	WORD $0x3145; BYTE $0xc8     // xor    r8d, r9d
	WORD $0x3141; BYTE $0xd9     // xor    r9d, ebx
	WORD $0x3144; BYTE $0xc3     // xor    ebx, r8d
	WORD $0x3145; BYTE $0xd8     // xor    r8d, r11d
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	WORD $0x3145; BYTE $0xd9     // xor    r9d, r11d
	WORD $0x0f41; BYTE $0xc9     // bswap    r9d
	LONG $0x10c9c141             // ror    r9d, 16
	WORD $0x3145; BYTE $0xc2     // xor    r10d, r8d
	LONG $0x10c2c141             // rol    r10d, 16
	WORD $0xcb0f                 // bswap    ebx
	WORD $0x3145; BYTE $0xd1     // xor    r9d, r10d
	WORD $0x3141; BYTE $0xda     // xor    r10d, ebx
	WORD $0x8945; BYTE $0xcb     // mov    r11d, r9d
	WORD $0x3141; BYTE $0xd9     // xor    r9d, ebx
	LONG $0x07348b44             // mov    r14d, dword [rdi + rax]
	LONG $0x04075c8b             // mov    ebx, dword [rdi + rax + 4]
	WORD $0x8945; BYTE $0xf7     // mov    r15d, r14d
	LONG $0x08e7c141             // shl    r15d, 8
	WORD $0x8945; BYTE $0xf4     // mov    r12d, r14d
	LONG $0x08ecc141             // shr    r12d, 8
	WORD $0x3145; BYTE $0xfc     // xor    r12d, r15d
	WORD $0x8945; BYTE $0xf7     // mov    r15d, r14d
	LONG $0x10e7c141             // shl    r15d, 16
	WORD $0x8945; BYTE $0xf5     // mov    r13d, r14d
	LONG $0x10edc141             // shr    r13d, 16
	WORD $0x3145; BYTE $0xfd     // xor    r13d, r15d
	WORD $0x3145; BYTE $0xe5     // xor    r13d, r12d
	WORD $0x8945; BYTE $0xf7     // mov    r15d, r14d
	LONG $0x18e7c141             // shl    r15d, 24
	LONG $0x18eec141             // shr    r14d, 24
	WORD $0x3145; BYTE $0xfe     // xor    r14d, r15d
	WORD $0x3145; BYTE $0xee     // xor    r14d, r13d
	WORD $0x8941; BYTE $0xdf     // mov    r15d, ebx
	LONG $0x08e7c141             // shl    r15d, 8
	WORD $0x8941; BYTE $0xdc     // mov    r12d, ebx
	LONG $0x08ecc141             // shr    r12d, 8
	WORD $0x3145; BYTE $0xfc     // xor    r12d, r15d
	WORD $0x8941; BYTE $0xdf     // mov    r15d, ebx
	LONG $0x10e7c141             // shl    r15d, 16
	WORD $0x8941; BYTE $0xdd     // mov    r13d, ebx
	LONG $0x10edc141             // shr    r13d, 16
	WORD $0x3145; BYTE $0xfd     // xor    r13d, r15d
	WORD $0x3145; BYTE $0xe5     // xor    r13d, r12d
	WORD $0x8941; BYTE $0xdf     // mov    r15d, ebx
	LONG $0x18e7c141             // shl    r15d, 24
	WORD $0xebc1; BYTE $0x18     // shr    ebx, 24
	WORD $0x3144; BYTE $0xfb     // xor    ebx, r15d
	WORD $0x3144; BYTE $0xeb     // xor    ebx, r13d
	LONG $0x077c8b44; BYTE $0x08 // mov    r15d, dword [rdi + rax + 8]
	WORD $0x8945; BYTE $0xfc     // mov    r12d, r15d
	LONG $0x08e4c141             // shl    r12d, 8
	WORD $0x8945; BYTE $0xfd     // mov    r13d, r15d
	LONG $0x08edc141             // shr    r13d, 8
	WORD $0x3145; BYTE $0xe5     // xor    r13d, r12d
	WORD $0x8945; BYTE $0xfc     // mov    r12d, r15d
	LONG $0x10e4c141             // shl    r12d, 16
	WORD $0x8944; BYTE $0xfa     // mov    edx, r15d
	WORD $0xeac1; BYTE $0x10     // shr    edx, 16
	WORD $0x3144; BYTE $0xe2     // xor    edx, r12d
	WORD $0x3144; BYTE $0xea     // xor    edx, r13d
	WORD $0x8945; BYTE $0xfc     // mov    r12d, r15d
	LONG $0x18e4c141             // shl    r12d, 24
	LONG $0x18efc141             // shr    r15d, 24
	WORD $0x3145; BYTE $0xe7     // xor    r15d, r12d
	WORD $0x3141; BYTE $0xd7     // xor    r15d, edx
	LONG $0x07648b44; BYTE $0x0c // mov    r12d, dword [rdi + rax + 12]
	WORD $0x8944; BYTE $0xe2     // mov    edx, r12d
	WORD $0xe2c1; BYTE $0x08     // shl    edx, 8
	WORD $0x8945; BYTE $0xe5     // mov    r13d, r12d
	LONG $0x08edc141             // shr    r13d, 8
	WORD $0x3141; BYTE $0xd5     // xor    r13d, edx
	WORD $0x8944; BYTE $0xe2     // mov    edx, r12d
	WORD $0xe2c1; BYTE $0x10     // shl    edx, 16
	WORD $0x8944; BYTE $0xe1     // mov    ecx, r12d
	WORD $0xe9c1; BYTE $0x10     // shr    ecx, 16
	WORD $0xd131                 // xor    ecx, edx
	WORD $0x3144; BYTE $0xe9     // xor    ecx, r13d
	WORD $0x8944; BYTE $0xe2     // mov    edx, r12d
	WORD $0xe2c1; BYTE $0x18     // shl    edx, 24
	LONG $0x18ecc141             // shr    r12d, 24
	WORD $0x3141; BYTE $0xd4     // xor    r12d, edx
	WORD $0x3141; BYTE $0xcc     // xor    r12d, ecx
	WORD $0x3144; BYTE $0xfb     // xor    ebx, r15d
	WORD $0x3145; BYTE $0xe7     // xor    r15d, r12d
	WORD $0x3141; BYTE $0xdc     // xor    r12d, ebx
	WORD $0x3144; BYTE $0xf3     // xor    ebx, r14d
	WORD $0x8944; BYTE $0xf9     // mov    ecx, r15d
	WORD $0xd931                 // xor    ecx, ebx
	WORD $0x3145; BYTE $0xf7     // xor    r15d, r14d
	WORD $0x0f41; BYTE $0xcf     // bswap    r15d
	LONG $0x10cfc141             // ror    r15d, 16
	WORD $0xc1c1; BYTE $0x10     // rol    ecx, 16
	WORD $0x0f41; BYTE $0xcc     // bswap    r12d
	WORD $0x3141; BYTE $0xcf     // xor    r15d, ecx
	WORD $0x3144; BYTE $0xe1     // xor    ecx, r12d
	WORD $0x8944; BYTE $0xfa     // mov    edx, r15d
	WORD $0x3145; BYTE $0xe7     // xor    r15d, r12d
	WORD $0xda31                 // xor    edx, ebx
	LONG $0x10375489             // mov    dword [rdi + rsi + 16], edx
	WORD $0xca31                 // xor    edx, ecx
	WORD $0xd931                 // xor    ecx, ebx
	LONG $0x14374c89             // mov    dword [rdi + rsi + 20], ecx
	LONG $0x18375489             // mov    dword [rdi + rsi + 24], edx
	LONG $0x377c8944; BYTE $0x1c // mov    dword [rdi + rsi + 28], r15d
	WORD $0x3145; BYTE $0xc3     // xor    r11d, r8d
	LONG $0x071c8944             // mov    dword [rdi + rax], r11d
	WORD $0x3145; BYTE $0xd3     // xor    r11d, r10d
	WORD $0x3145; BYTE $0xc2     // xor    r10d, r8d
	LONG $0x24448b4c; BYTE $0x10 // mov    r8, qword [rsp + 16]
	LONG $0x07548944; BYTE $0x04 // mov    dword [rdi + rax + 4], r10d
	LONG $0x075c8944; BYTE $0x08 // mov    dword [rdi + rax + 8], r11d
	LONG $0x074c8944; BYTE $0x0c // mov    dword [rdi + rax + 12], r9d
	LONG $0x244c8b4c; BYTE $0x08 // mov    r9, qword [rsp + 8]
	LONG $0x370c8d48             // lea    rcx, [rdi + rsi]
	LONG $0x20c18348             // add    rcx, 32
	LONG $0x10c08349             // add    r8, 16
	LONG $0x07148d48             // lea    rdx, [rdi + rax]
	LONG $0xf0c28348             // add    rdx, -16
	LONG $0xf0c08348             // add    rax, -16
	LONG $0xf0c18349             // add    r9, -16
	LONG $0x10c68348             // add    rsi, 16
	WORD $0x3948; BYTE $0xd1     // cmp    rcx, rdx
	JB   LBB1_3
	WORD $0x8948; BYTE $0xfe     // mov    rsi, rdi
	WORD $0x294c; BYTE $0xc6     // sub    rsi, r8
	WORD $0x0148; BYTE $0xf8     // add    rax, rdi
	WORD $0x294c; BYTE $0xcf     // sub    rdi, r9
	LONG $0x10578d48             // lea    rdx, [rdi + 16]
	JMP  LBB1_5

LBB1_1:
	LONG $0x0f348d48 // lea    rsi, [rdi + rcx]
	LONG $0x10578d48 // lea    rdx, [rdi + 16]
	LONG $0x0f048d48 // lea    rax, [rdi + rcx]
	LONG $0xf0c08348 // add    rax, -16

LBB1_5:
	WORD $0x0a8b             // mov    ecx, dword [rdx]
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe2c1; BYTE $0x08 // shl    edx, 8
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x08e8c141         // shr    r8d, 8
	WORD $0x3141; BYTE $0xd0 // xor    r8d, edx
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe2c1; BYTE $0x10 // shl    edx, 16
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x10e9c141         // shr    r9d, 16
	WORD $0x3141; BYTE $0xd1 // xor    r9d, edx
	WORD $0x3145; BYTE $0xc1 // xor    r9d, r8d
	WORD $0xca89             // mov    edx, ecx
	WORD $0xe2c1; BYTE $0x18 // shl    edx, 24
	WORD $0xe9c1; BYTE $0x18 // shr    ecx, 24
	WORD $0xd131             // xor    ecx, edx
	WORD $0x3144; BYTE $0xc9 // xor    ecx, r9d
	LONG $0x14478b44         // mov    r8d, dword [rdi + 20]
	WORD $0x578b; BYTE $0x18 // mov    edx, dword [rdi + 24]
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x08e1c141         // shl    r9d, 8
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	LONG $0x08eac141         // shr    r10d, 8
	WORD $0x3145; BYTE $0xca // xor    r10d, r9d
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x10e1c141         // shl    r9d, 16
	WORD $0x8945; BYTE $0xc3 // mov    r11d, r8d
	LONG $0x10ebc141         // shr    r11d, 16
	WORD $0x3145; BYTE $0xcb // xor    r11d, r9d
	WORD $0x3145; BYTE $0xd3 // xor    r11d, r10d
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x18e1c141         // shl    r9d, 24
	LONG $0x18e8c141         // shr    r8d, 24
	WORD $0x3145; BYTE $0xc8 // xor    r8d, r9d
	WORD $0x3145; BYTE $0xd8 // xor    r8d, r11d
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x08e1c141         // shl    r9d, 8
	WORD $0x8941; BYTE $0xd2 // mov    r10d, edx
	LONG $0x08eac141         // shr    r10d, 8
	WORD $0x3145; BYTE $0xca // xor    r10d, r9d
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x10e1c141         // shl    r9d, 16
	WORD $0x8941; BYTE $0xd3 // mov    r11d, edx
	LONG $0x10ebc141         // shr    r11d, 16
	WORD $0x3145; BYTE $0xcb // xor    r11d, r9d
	WORD $0x3145; BYTE $0xd3 // xor    r11d, r10d
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x18e1c141         // shl    r9d, 24
	WORD $0xeac1; BYTE $0x18 // shr    edx, 24
	WORD $0x3144; BYTE $0xca // xor    edx, r9d
	WORD $0x3144; BYTE $0xda // xor    edx, r11d
	WORD $0x7f8b; BYTE $0x1c // mov    edi, dword [rdi + 28]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x08e1c141         // shl    r9d, 8
	WORD $0x8941; BYTE $0xfa // mov    r10d, edi
	LONG $0x08eac141         // shr    r10d, 8
	WORD $0x3145; BYTE $0xca // xor    r10d, r9d
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x10e1c141         // shl    r9d, 16
	WORD $0x8941; BYTE $0xfb // mov    r11d, edi
	LONG $0x10ebc141         // shr    r11d, 16
	WORD $0x3145; BYTE $0xcb // xor    r11d, r9d
	WORD $0x3145; BYTE $0xd3 // xor    r11d, r10d
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x18e1c141         // shl    r9d, 24
	WORD $0xefc1; BYTE $0x18 // shr    edi, 24
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	WORD $0x3144; BYTE $0xdf // xor    edi, r11d
	WORD $0x3141; BYTE $0xd0 // xor    r8d, edx
	WORD $0xfa31             // xor    edx, edi
	WORD $0x3144; BYTE $0xc7 // xor    edi, r8d
	WORD $0x3141; BYTE $0xc8 // xor    r8d, ecx
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xca31             // xor    edx, ecx
	WORD $0xca0f             // bswap    edx
	WORD $0xcac1; BYTE $0x10 // ror    edx, 16
	WORD $0x3145; BYTE $0xc1 // xor    r9d, r8d
	LONG $0x10c1c141         // rol    r9d, 16
	WORD $0xcf0f             // bswap    edi
	WORD $0x3144; BYTE $0xca // xor    edx, r9d
	WORD $0x3141; BYTE $0xf9 // xor    r9d, edi
	WORD $0xd189             // mov    ecx, edx
	WORD $0x3144; BYTE $0xc1 // xor    ecx, r8d
	WORD $0xfa31             // xor    edx, edi
	WORD $0x0889             // mov    dword [rax], ecx
	WORD $0x3144; BYTE $0xc9 // xor    ecx, r9d
	WORD $0x3145; BYTE $0xc1 // xor    r9d, r8d
	LONG $0xf44e8944         // mov    dword [rsi - 12], r9d
	WORD $0x4e89; BYTE $0xf8 // mov    dword [rsi - 8], ecx
	WORD $0x5689; BYTE $0xfc // mov    dword [rsi - 4], edx
	SUBQ $8, SP
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0405060700010203
DATA LCDATA2<>+0x008(SB)/8, $0x0c0d0e0f08090a0b
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·__process_SSSE3(SB), $32-32
	MOVQ dst+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ rk+16(FP), DX
	MOVQ rounds+24(FP), CX

	ADDQ $8, SP
	LEAQ LCDATA2<>(SB), BP

	WORD $0x8949; BYTE $0xc8     // mov    r8, rcx
	LONG $0x24148948             // mov    qword [rsp], rdx
	WORD $0x068b                 // mov    eax, dword [rsi]
	WORD $0x4e8b; BYTE $0x04     // mov    ecx, dword [rsi + 4]
	WORD $0xc80f                 // bswap    eax
	WORD $0xc90f                 // bswap    ecx
	WORD $0x5e8b; BYTE $0x08     // mov    ebx, dword [rsi + 8]
	WORD $0xcb0f                 // bswap    ebx
	WORD $0x568b; BYTE $0x0c     // mov    edx, dword [rsi + 12]
	WORD $0xca0f                 // bswap    edx
	LONG $0x0df88349             // cmp    r8, 13
	LONG $0x247c8948; BYTE $0x10 // mov    qword [rsp + 16], rdi
	JB   LBB2_1
	LONG $0x24348b4c             // mov    r14, qword [rsp]
	WORD $0x3341; BYTE $0x06     // xor    eax, dword [r14]
	LONG $0x044e3341             // xor    ecx, dword [r14 + 4]
	LONG $0x085e3341             // xor    ebx, dword [r14 + 8]
	LONG $0x0c563341             // xor    edx, dword [r14 + 12]
	WORD $0xc689                 // mov    esi, eax
	LONG $0x2444894c; BYTE $0x08 // mov    qword [rsp + 8], r8
	WORD $0x8941; BYTE $0xc0     // mov    r8d, eax
	LONG $0x18e8c141             // shr    r8d, 24

	MOVQ ·s1(SB), DI         // lea    rdi, [rip + _S1]
	WORD $0xeec1; BYTE $0x10 // shr    esi, 16
	LONG $0xceb60f44         // movzx    r9d, sil

	MOVQ ·s2(SB), SI         // lea    rsi, [rip + _S2]
	LONG $0x8e3c8b46         // mov    r15d, dword [rsi + 4*r9]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x873c3346         // xor    r15d, dword [rdi + 4*r8]
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xb60f; BYTE $0xf4 // movzx    esi, ah

	MOVQ ·x1(SB), DI         // lea    rdi, [rip + _X1]
	LONG $0xb73c3344         // xor    r15d, dword [rdi + 4*rsi]
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al

	MOVQ ·x2(SB), SI             // lea    rsi, [rip + _X2]
	LONG $0x863c3344             // xor    r15d, dword [rsi + 4*rax]
	WORD $0x8949; BYTE $0xf5     // mov    r13, rsi
	WORD $0xc889                 // mov    eax, ecx
	WORD $0xb60f; BYTE $0xf5     // movzx    esi, ch
	LONG $0xe1b60f44             // movzx    r12d, cl
	WORD $0xe9c1; BYTE $0x18     // shr    ecx, 24
	WORD $0xe8c1; BYTE $0x10     // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x81048b41             // mov    eax, dword [r9 + 4*rax]
	LONG $0x88043341             // xor    eax, dword [r8 + 4*rcx]
	WORD $0x0433; BYTE $0xb7     // xor    eax, dword [rdi + 4*rsi]
	LONG $0xa5443343; BYTE $0x00 // xor    eax, dword [r13 + 4*r12]
	WORD $0xd989                 // mov    ecx, ebx
	WORD $0xb60f; BYTE $0xf7     // movzx    esi, bh
	LONG $0xe3b60f44             // movzx    r12d, bl
	WORD $0xdf89                 // mov    edi, ebx
	WORD $0xefc1; BYTE $0x18     // shr    edi, 24
	WORD $0xe9c1; BYTE $0x10     // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9     // movzx    ecx, cl
	LONG $0x890c8b41             // mov    ecx, dword [r9 + 4*rcx]
	LONG $0xb80c3341             // xor    ecx, dword [r8 + 4*rdi]
	LONG $0xb20c3341             // xor    ecx, dword [r10 + 4*rsi]
	LONG $0xa54c3343; BYTE $0x00 // xor    ecx, dword [r13 + 4*r12]
	WORD $0xd789                 // mov    edi, edx
	WORD $0xb60f; BYTE $0xf6     // movzx    esi, dh
	WORD $0x8941; BYTE $0xd4     // mov    r12d, edx
	LONG $0x18ecc141             // shr    r12d, 24
	WORD $0xefc1; BYTE $0x10     // shr    edi, 16
	LONG $0xffb60f40             // movzx    edi, dil
	LONG $0xb90c8b45             // mov    r9d, dword [r9 + 4*rdi]
	LONG $0xa00c3347             // xor    r9d, dword [r8 + 4*r12]
	LONG $0xb20c3345             // xor    r9d, dword [r10 + 4*rsi]
	WORD $0x894d; BYTE $0xd3     // mov    r11, r10
	WORD $0xb60f; BYTE $0xf2     // movzx    esi, dl
	LONG $0xb54c3345; BYTE $0x00 // xor    r9d, dword [r13 + 4*rsi]
	WORD $0xc831                 // xor    eax, ecx
	WORD $0x3144; BYTE $0xc9     // xor    ecx, r9d
	WORD $0x3141; BYTE $0xc1     // xor    r9d, eax
	WORD $0x3144; BYTE $0xf8     // xor    eax, r15d
	WORD $0xcb89                 // mov    ebx, ecx
	WORD $0x3144; BYTE $0xf9     // xor    ecx, r15d
	WORD $0xc90f                 // bswap    ecx
	WORD $0xc9c1; BYTE $0x10     // ror    ecx, 16
	WORD $0xc331                 // xor    ebx, eax
	WORD $0xc3c1; BYTE $0x10     // rol    ebx, 16
	WORD $0xd931                 // xor    ecx, ebx
	WORD $0x8941; BYTE $0xcf     // mov    r15d, ecx
	WORD $0x3141; BYTE $0xc7     // xor    r15d, eax
	LONG $0x10568b41             // mov    edx, dword [r14 + 16]
	WORD $0x3144; BYTE $0xfa     // xor    edx, r15d
	WORD $0xd689                 // mov    esi, edx
	WORD $0xb60f; BYTE $0xfe     // movzx    edi, dh
	LONG $0xe2b60f44             // movzx    r12d, dl
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	WORD $0x0f41; BYTE $0xc9     // bswap    r9d
	WORD $0x3144; BYTE $0xcb     // xor    ebx, r9d
	LONG $0x14463341             // xor    eax, dword [r14 + 20]
	WORD $0xd831                 // xor    eax, ebx
	LONG $0x185e3341             // xor    ebx, dword [r14 + 24]
	WORD $0x3144; BYTE $0xfb     // xor    ebx, r15d
	LONG $0x18eac141             // shr    r10d, 24
	WORD $0xeec1; BYTE $0x10     // shr    esi, 16
	LONG $0xf6b60f40             // movzx    esi, sil
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	LONG $0xb57c8b45; BYTE $0x00 // mov    r15d, dword [r13 + 4*rsi]
	WORD $0x894d; BYTE $0xdd     // mov    r13, r11
	LONG $0x933c3347             // xor    r15d, dword [r11 + 4*r10]
	WORD $0x894d; BYTE $0xc3     // mov    r11, r8
	LONG $0xb83c3345             // xor    r15d, dword [r8 + 4*rdi]

	MOVQ ·x2(SB), R8               // lea    r8, [rip + _S2]
	LONG $0xa03c3347               // xor    r15d, dword [r8 + 4*r12]
	WORD $0xc689                   // mov    esi, eax
	WORD $0xb60f; BYTE $0xfc       // movzx    edi, ah
	LONG $0xd0b60f44               // movzx    r10d, al
	WORD $0xe8c1; BYTE $0x18       // shr    eax, 24
	WORD $0xeec1; BYTE $0x10       // shr    esi, 16
	LONG $0xf6b60f40               // movzx    esi, sil
	LONG $0xb2248b44               // mov    r12d, dword [rdx + 4*rsi]
	LONG $0x85643345; BYTE $0x00   // xor    r12d, dword [r13 + 4*rax]
	LONG $0xbb243345               // xor    r12d, dword [r11 + 4*rdi]
	LONG $0x90243347               // xor    r12d, dword [r8 + 4*r10]
	WORD $0xd889                   // mov    eax, ebx
	WORD $0xb60f; BYTE $0xf7       // movzx    esi, bh
	WORD $0xb60f; BYTE $0xfb       // movzx    edi, bl
	WORD $0x8941; BYTE $0xda       // mov    r10d, ebx
	LONG $0x18eac141               // shr    r10d, 24
	WORD $0xe8c1; BYTE $0x10       // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0       // movzx    eax, al
	WORD $0x8948; BYTE $0xd3       // mov    rbx, rdx
	WORD $0x048b; BYTE $0x82       // mov    eax, dword [rdx + 4*rax]
	LONG $0x95443343; BYTE $0x00   // xor    eax, dword [r13 + 4*r10]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x1c563341               // xor    edx, dword [r14 + 28]
	LONG $0xb3043341               // xor    eax, dword [r11 + 4*rsi]
	LONG $0xb8043341               // xor    eax, dword [r8 + 4*rdi]
	WORD $0xca31                   // xor    edx, ecx
	WORD $0xd189                   // mov    ecx, edx
	WORD $0xb60f; BYTE $0xf6       // movzx    esi, dh
	WORD $0xd789                   // mov    edi, edx
	WORD $0x8941; BYTE $0xd2       // mov    r10d, edx
	WORD $0xefc1; BYTE $0x18       // shr    edi, 24
	WORD $0xe9c1; BYTE $0x10       // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9       // movzx    ecx, cl
	WORD $0x148b; BYTE $0x8b       // mov    edx, dword [rbx + 4*rcx]
	LONG $0xbd543341; BYTE $0x00   // xor    edx, dword [r13 + 4*rdi]
	LONG $0xb3143341               // xor    edx, dword [r11 + 4*rsi]
	LONG $0xcab60f41               // movzx    ecx, r10b
	LONG $0x88143341               // xor    edx, dword [r8 + 4*rcx]
	WORD $0x3141; BYTE $0xc4       // xor    r12d, eax
	WORD $0xd031                   // xor    eax, edx
	WORD $0x3144; BYTE $0xe2       // xor    edx, r12d
	WORD $0x3145; BYTE $0xfc       // xor    r12d, r15d
	WORD $0xc189                   // mov    ecx, eax
	WORD $0x3144; BYTE $0xe1       // xor    ecx, r12d
	WORD $0xca0f                   // bswap    edx
	WORD $0xcac1; BYTE $0x10       // ror    edx, 16
	WORD $0x3144; BYTE $0xf8       // xor    eax, r15d
	LONG $0x10c4c141               // rol    r12d, 16
	WORD $0xc80f                   // bswap    eax
	WORD $0xc831                   // xor    eax, ecx
	WORD $0xd131                   // xor    ecx, edx
	WORD $0xc231                   // xor    edx, eax
	WORD $0x3144; BYTE $0xe0       // xor    eax, r12d
	WORD $0x8941; BYTE $0xce       // mov    r14d, ecx
	WORD $0x3141; BYTE $0xc6       // xor    r14d, eax
	WORD $0x3144; BYTE $0xe1       // xor    ecx, r12d
	LONG $0x247c8348; WORD $0x0f08 // cmp    qword [rsp + 8], 15
	JB   LBB2_3
	WORD $0x8949; BYTE $0xd9       // mov    r9, rbx
	WORD $0x894c; BYTE $0xeb       // mov    rbx, r13
	WORD $0x894d; BYTE $0xc5       // mov    r13, r8
	WORD $0x8949; BYTE $0xdc       // mov    r12, rbx
	LONG $0x24048b4c               // mov    r8, qword [rsp]
	LONG $0x20403341               // xor    eax, dword [r8 + 32]
	WORD $0xc689                   // mov    esi, eax
	WORD $0xb60f; BYTE $0xfc       // movzx    edi, ah
	LONG $0xd0b60f44               // movzx    r10d, al
	LONG $0x24483341               // xor    ecx, dword [r8 + 36]
	LONG $0x28703345               // xor    r14d, dword [r8 + 40]
	LONG $0x2c503341               // xor    edx, dword [r8 + 44]
	WORD $0xe8c1; BYTE $0x18       // shr    eax, 24
	WORD $0xeec1; BYTE $0x10       // shr    esi, 16
	LONG $0xf6b60f40               // movzx    esi, sil
	LONG $0xb57c8b45; BYTE $0x00   // mov    r15d, dword [r13 + 4*rsi]
	WORD $0x894d; BYTE $0xeb       // mov    r11, r13

	MOVQ ·s1(SB), R13            // lea    r13, [rip + _S1]
	LONG $0x857c3345; BYTE $0x00 // xor    r15d, dword [r13 + 4*rax]
	LONG $0xbb3c3344             // xor    r15d, dword [rbx + 4*rdi]
	LONG $0x913c3347             // xor    r15d, dword [r9 + 4*r10]
	WORD $0xc889                 // mov    eax, ecx
	WORD $0xb60f; BYTE $0xf5     // movzx    esi, ch
	WORD $0xb60f; BYTE $0xf9     // movzx    edi, cl
	WORD $0x8944; BYTE $0xf3     // mov    ebx, r14d
	WORD $0xe9c1; BYTE $0x18     // shr    ecx, 24
	WORD $0xe8c1; BYTE $0x10     // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	WORD $0x894d; BYTE $0xda     // mov    r10, r11
	LONG $0x83048b41             // mov    eax, dword [r11 + 4*rax]
	LONG $0x8d443341; BYTE $0x00 // xor    eax, dword [r13 + 4*rcx]
	LONG $0xb4043341             // xor    eax, dword [r12 + 4*rsi]
	LONG $0xb9043341             // xor    eax, dword [r9 + 4*rdi]
	WORD $0x8944; BYTE $0xf1     // mov    ecx, r14d
	WORD $0xb60f; BYTE $0xf7     // movzx    esi, bh
	WORD $0xb60f; BYTE $0xfb     // movzx    edi, bl
	WORD $0xebc1; BYTE $0x18     // shr    ebx, 24
	WORD $0xe9c1; BYTE $0x10     // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9     // movzx    ecx, cl
	LONG $0x8b1c8b45             // mov    r11d, dword [r11 + 4*rcx]
	LONG $0x9d5c3345; BYTE $0x00 // xor    r11d, dword [r13 + 4*rbx]
	LONG $0xb41c3345             // xor    r11d, dword [r12 + 4*rsi]
	LONG $0xb91c3345             // xor    r11d, dword [r9 + 4*rdi]
	WORD $0xd189                 // mov    ecx, edx
	WORD $0xb60f; BYTE $0xfe     // movzx    edi, dh
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x18     // shr    esi, 24
	WORD $0xe9c1; BYTE $0x10     // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9     // movzx    ecx, cl
	LONG $0x8a0c8b41             // mov    ecx, dword [r10 + 4*rcx]
	LONG $0xb54c3341; BYTE $0x00 // xor    ecx, dword [r13 + 4*rsi]
	LONG $0xbc0c3341             // xor    ecx, dword [r12 + 4*rdi]
	WORD $0x894d; BYTE $0xe6     // mov    r14, r12
	WORD $0xb60f; BYTE $0xd2     // movzx    edx, dl
	LONG $0x910c3341             // xor    ecx, dword [r9 + 4*rdx]
	WORD $0x3144; BYTE $0xd8     // xor    eax, r11d
	WORD $0x3141; BYTE $0xcb     // xor    r11d, ecx
	WORD $0xc131                 // xor    ecx, eax
	WORD $0x3144; BYTE $0xf8     // xor    eax, r15d
	WORD $0x8944; BYTE $0xda     // mov    edx, r11d
	WORD $0x3145; BYTE $0xfb     // xor    r11d, r15d
	WORD $0x0f41; BYTE $0xcb     // bswap    r11d
	LONG $0x10cbc141             // ror    r11d, 16
	WORD $0xc231                 // xor    edx, eax
	WORD $0xc2c1; BYTE $0x10     // rol    edx, 16
	WORD $0x3141; BYTE $0xd3     // xor    r11d, edx
	WORD $0x8945; BYTE $0xdc     // mov    r12d, r11d
	WORD $0x3141; BYTE $0xc4     // xor    r12d, eax
	LONG $0x30588b41             // mov    ebx, dword [r8 + 48]
	WORD $0x3144; BYTE $0xe3     // xor    ebx, r12d
	WORD $0xde89                 // mov    esi, ebx
	WORD $0xb60f; BYTE $0xff     // movzx    edi, bh
	LONG $0xd3b60f44             // movzx    r10d, bl
	WORD $0xc90f                 // bswap    ecx
	WORD $0xca31                 // xor    edx, ecx
	LONG $0x3c483341             // xor    ecx, dword [r8 + 60]
	WORD $0x3144; BYTE $0xd9     // xor    ecx, r11d
	LONG $0x34403341             // xor    eax, dword [r8 + 52]
	WORD $0xd031                 // xor    eax, edx
	WORD $0xebc1; BYTE $0x18     // shr    ebx, 24
	WORD $0xeec1; BYTE $0x10     // shr    esi, 16
	LONG $0xf6b60f40             // movzx    esi, sil
	LONG $0xb13c8b45             // mov    r15d, dword [r9 + 4*rsi]
	LONG $0x9e3c3345             // xor    r15d, dword [r14 + 4*rbx]
	LONG $0xbd7c3345; BYTE $0x00 // xor    r15d, dword [r13 + 4*rdi]

	MOVQ ·s2(SB), BX             // lea    rbx, [rip + _S2]
	LONG $0x933c3346             // xor    r15d, dword [rbx + 4*r10]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xb60f; BYTE $0xfc     // movzx    edi, ah
	LONG $0xd0b60f44             // movzx    r10d, al
	WORD $0xe8c1; BYTE $0x18     // shr    eax, 24
	WORD $0xeec1; BYTE $0x10     // shr    esi, 16
	LONG $0xf6b60f40             // movzx    esi, sil
	LONG $0xb11c8b45             // mov    r11d, dword [r9 + 4*rsi]
	LONG $0x861c3345             // xor    r11d, dword [r14 + 4*rax]
	LONG $0x38503341             // xor    edx, dword [r8 + 56]
	LONG $0xbd5c3345; BYTE $0x00 // xor    r11d, dword [r13 + 4*rdi]
	WORD $0x3144; BYTE $0xe2     // xor    edx, r12d
	LONG $0x931c3346             // xor    r11d, dword [rbx + 4*r10]
	WORD $0x8949; BYTE $0xda     // mov    r10, rbx
	WORD $0xd089                 // mov    eax, edx
	WORD $0xb60f; BYTE $0xf6     // movzx    esi, dh
	WORD $0xd789                 // mov    edi, edx
	WORD $0xefc1; BYTE $0x18     // shr    edi, 24
	WORD $0xe8c1; BYTE $0x10     // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x81048b41             // mov    eax, dword [r9 + 4*rax]
	LONG $0xbe043341             // xor    eax, dword [r14 + 4*rdi]
	WORD $0xb60f; BYTE $0xfa     // movzx    edi, dl
	LONG $0x40c08349             // add    r8, 64
	LONG $0x2404894c             // mov    qword [rsp], r8
	LONG $0xb5443341; BYTE $0x00 // xor    eax, dword [r13 + 4*rsi]
	WORD $0x0433; BYTE $0xbb     // xor    eax, dword [rbx + 4*rdi]
	WORD $0xce89                 // mov    esi, ecx
	WORD $0xeec1; BYTE $0x10     // shr    esi, 16
	LONG $0xf6b60f40             // movzx    esi, sil
	LONG $0xb11c8b41             // mov    ebx, dword [r9 + 4*rsi]
	WORD $0xb60f; BYTE $0xfd     // movzx    edi, ch
	WORD $0xb60f; BYTE $0xf1     // movzx    esi, cl
	WORD $0xe9c1; BYTE $0x18     // shr    ecx, 24
	LONG $0x8e1c3341             // xor    ebx, dword [r14 + 4*rcx]
	LONG $0xbd5c3341; BYTE $0x00 // xor    ebx, dword [r13 + 4*rdi]
	LONG $0xb21c3341             // xor    ebx, dword [r10 + 4*rsi]
	WORD $0x3141; BYTE $0xc3     // xor    r11d, eax
	WORD $0xd831                 // xor    eax, ebx
	WORD $0x3144; BYTE $0xdb     // xor    ebx, r11d
	WORD $0x3145; BYTE $0xfb     // xor    r11d, r15d
	WORD $0xc189                 // mov    ecx, eax
	WORD $0x3144; BYTE $0xd9     // xor    ecx, r11d
	WORD $0x3144; BYTE $0xf8     // xor    eax, r15d
	WORD $0xcb0f                 // bswap    ebx
	WORD $0xcbc1; BYTE $0x10     // ror    ebx, 16
	LONG $0x10c3c141             // rol    r11d, 16
	WORD $0xc80f                 // bswap    eax
	WORD $0xc831                 // xor    eax, ecx
	WORD $0xd931                 // xor    ecx, ebx
	WORD $0xc331                 // xor    ebx, eax
	WORD $0x3144; BYTE $0xd8     // xor    eax, r11d
	WORD $0x8941; BYTE $0xce     // mov    r14d, ecx
	WORD $0x3141; BYTE $0xc6     // xor    r14d, eax
	WORD $0x3144; BYTE $0xd9     // xor    ecx, r11d
	JMP  LBB2_5

LBB2_1:
	WORD $0x8941; BYTE $0xde // mov    r14d, ebx
	WORD $0xd389             // mov    ebx, edx
	JMP  LBB2_5

LBB2_3:
	WORD $0xd389                 // mov    ebx, edx
	LONG $0x24048348; BYTE $0x20 // add    qword [rsp], 32

LBB2_5:
	LONG $0x241c8b4c                           // mov    r11, qword [rsp]
	WORD $0x3341; BYTE $0x03                   // xor    eax, dword [r11]
	WORD $0xc689                               // mov    esi, eax
	WORD $0xc789                               // mov    edi, eax
	WORD $0xb60f; BYTE $0xd4                   // movzx    edx, ah
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x044b3341                           // xor    ecx, dword [r11 + 4]
	LONG $0x08733345                           // xor    r14d, dword [r11 + 8]
	LONG $0x0c5b3341                           // xor    ebx, dword [r11 + 12]
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	MOVQ ·s1(SB), R13                          // lea    r13, [rip + _S1]
	WORD $0xefc1; BYTE $0x10                   // shr    edi, 16
	LONG $0xffb60f40                           // movzx    edi, dil
	MOVQ ·s2(SB), R9                           // lea    r9, [rip + _S2]
	LONG $0xb93c8b45                           // mov    r15d, dword [r9 + 4*rdi]
	LONG $0xb57c3345; BYTE $0x00               // xor    r15d, dword [r13 + 4*rsi]
	MOVQ ·x1(SB), R8                           // lea    r8, [rip + _X1]
	LONG $0x903c3345                           // xor    r15d, dword [r8 + 4*rdx]
	MOVQ ·x2(SB), SI                           // lea    rsi, [rip + _X2]
	LONG $0x863c3344                           // xor    r15d, dword [rsi + 4*rax]
	WORD $0xc889                               // mov    eax, ecx
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0xcf89                               // mov    edi, ecx
	WORD $0xefc1; BYTE $0x10                   // shr    edi, 16
	LONG $0xd7b60f44                           // movzx    r10d, dil
	WORD $0xb60f; BYTE $0xfd                   // movzx    edi, ch
	LONG $0xe1b60f44                           // movzx    r12d, cl
	WORD $0x8944; BYTE $0xf2                   // mov    edx, r14d
	LONG $0x910c8b43                           // mov    ecx, dword [r9 + 4*r10]
	LONG $0x854c3341; BYTE $0x00               // xor    ecx, dword [r13 + 4*rax]
	LONG $0xb80c3341                           // xor    ecx, dword [r8 + 4*rdi]
	LONG $0xa60c3342                           // xor    ecx, dword [rsi + 4*r12]
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0x8944; BYTE $0xf7                   // mov    edi, r14d
	WORD $0xefc1; BYTE $0x10                   // shr    edi, 16
	LONG $0xffb60f40                           // movzx    edi, dil
	LONG $0xb9148b45                           // mov    r10d, dword [r9 + 4*rdi]
	WORD $0x894d; BYTE $0xce                   // mov    r14, r9
	LONG $0x85543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rax]
	WORD $0xb60f; BYTE $0xc6                   // movzx    eax, dh
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x80143345                           // xor    r10d, dword [r8 + 4*rax]
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x86143344                           // xor    r10d, dword [rsi + 4*rax]
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x96148b41                           // mov    edx, dword [r14 + 4*rdx]
	LONG $0x85543341; BYTE $0x00               // xor    edx, dword [r13 + 4*rax]
	WORD $0xb60f; BYTE $0xc7                   // movzx    eax, bh
	LONG $0x80143341                           // xor    edx, dword [r8 + 4*rax]
	WORD $0xb60f; BYTE $0xc3                   // movzx    eax, bl
	WORD $0x1433; BYTE $0x86                   // xor    edx, dword [rsi + 4*rax]
	WORD $0x8949; BYTE $0xf0                   // mov    r8, rsi
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0x3141; BYTE $0xd2                   // xor    r10d, edx
	WORD $0xca31                               // xor    edx, ecx
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0x3145; BYTE $0xfa                   // xor    r10d, r15d
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	LONG $0x10cac141                           // ror    r10d, 16
	WORD $0xc831                               // xor    eax, ecx
	WORD $0xc0c1; BYTE $0x10                   // rol    eax, 16
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	WORD $0x8945; BYTE $0xd7                   // mov    r15d, r10d
	WORD $0x3141; BYTE $0xcf                   // xor    r15d, ecx
	LONG $0x105b8b41                           // mov    ebx, dword [r11 + 16]
	WORD $0x3144; BYTE $0xfb                   // xor    ebx, r15d
	WORD $0xdf89                               // mov    edi, ebx
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	LONG $0xe3b60f44                           // movzx    r12d, bl
	WORD $0xca0f                               // bswap    edx
	WORD $0xd031                               // xor    eax, edx
	LONG $0x144b3341                           // xor    ecx, dword [r11 + 20]
	WORD $0xc131                               // xor    ecx, eax
	LONG $0x18433341                           // xor    eax, dword [r11 + 24]
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0xebc1; BYTE $0x18                   // shr    ebx, 24
	WORD $0xefc1; BYTE $0x10                   // shr    edi, 16
	LONG $0xffb60f40                           // movzx    edi, dil
	LONG $0xb83c8b45                           // mov    r15d, dword [r8 + 4*rdi]
	LONG $0x993c3345                           // xor    r15d, dword [r9 + 4*rbx]
	LONG $0xb57c3345; BYTE $0x00               // xor    r15d, dword [r13 + 4*rsi]
	LONG $0xa63c3347                           // xor    r15d, dword [r14 + 4*r12]
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xfd                   // movzx    edi, ch
	LONG $0xe1b60f44                           // movzx    r12d, cl
	WORD $0xe9c1; BYTE $0x18                   // shr    ecx, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb01c8b41                           // mov    ebx, dword [r8 + 4*rsi]
	LONG $0x891c3341                           // xor    ebx, dword [r9 + 4*rcx]
	LONG $0xbd5c3341; BYTE $0x00               // xor    ebx, dword [r13 + 4*rdi]
	LONG $0xa61c3343                           // xor    ebx, dword [r14 + 4*r12]
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xb60f; BYTE $0xf4                   // movzx    esi, ah
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0xe8c1; BYTE $0x18                   // shr    eax, 24
	WORD $0xe9c1; BYTE $0x10                   // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x880c8b41                           // mov    ecx, dword [r8 + 4*rcx]
	LONG $0x810c3341                           // xor    ecx, dword [r9 + 4*rax]
	LONG $0x1c533341                           // xor    edx, dword [r11 + 28]
	LONG $0xb54c3341; BYTE $0x00               // xor    ecx, dword [r13 + 4*rsi]
	LONG $0xbe0c3341                           // xor    ecx, dword [r14 + 4*rdi]
	WORD $0x3144; BYTE $0xd2                   // xor    edx, r10d
	WORD $0xd089                               // mov    eax, edx
	WORD $0xb60f; BYTE $0xf6                   // movzx    esi, dh
	WORD $0xd789                               // mov    edi, edx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x80148b45                           // mov    r10d, dword [r8 + 4*rax]
	LONG $0xb9143345                           // xor    r10d, dword [r9 + 4*rdi]
	WORD $0x894d; BYTE $0xc8                   // mov    r8, r9
	LONG $0xb5543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x86143345                           // xor    r10d, dword [r14 + 4*rax]
	WORD $0x894d; BYTE $0xf1                   // mov    r9, r14
	WORD $0xcb31                               // xor    ebx, ecx
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0x3141; BYTE $0xda                   // xor    r10d, ebx
	WORD $0x3144; BYTE $0xfb                   // xor    ebx, r15d
	WORD $0xc889                               // mov    eax, ecx
	WORD $0xd831                               // xor    eax, ebx
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	LONG $0x10cac141                           // ror    r10d, 16
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0xc3c1; BYTE $0x10                   // rol    ebx, 16
	WORD $0xc90f                               // bswap    ecx
	WORD $0xc131                               // xor    ecx, eax
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xde31                               // xor    esi, ebx
	LONG $0x20538b41                           // mov    edx, dword [r11 + 32]
	WORD $0xf231                               // xor    edx, esi
	WORD $0x8941; BYTE $0xd7                   // mov    r15d, edx
	WORD $0xb60f; BYTE $0xfe                   // movzx    edi, dh
	LONG $0xe2b60f44                           // movzx    r12d, dl
	WORD $0x3144; BYTE $0xd0                   // xor    eax, r10d
	LONG $0x245b3341                           // xor    ebx, dword [r11 + 36]
	WORD $0xc331                               // xor    ebx, eax
	LONG $0x28733341                           // xor    esi, dword [r11 + 40]
	WORD $0x894d; BYTE $0xde                   // mov    r14, r11
	WORD $0xc631                               // xor    esi, eax
	WORD $0xeac1; BYTE $0x18                   // shr    edx, 24
	LONG $0x10efc141                           // shr    r15d, 16
	LONG $0xc7b60f41                           // movzx    eax, r15b
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0x813c8b45                           // mov    r15d, dword [r9 + 4*rax]
	LONG $0x957c3345; BYTE $0x00               // xor    r15d, dword [r13 + 4*rdx]
	LONG $0xb83c3345                           // xor    r15d, dword [r8 + 4*rdi]
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	MOVQ ·x2(SB), R8                           // lea    r8, [rip + _X2]
	LONG $0xa03c3347                           // xor    r15d, dword [r8 + 4*r12]
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xb60f; BYTE $0xd7                   // movzx    edx, bh
	LONG $0xe3b60f44                           // movzx    r12d, bl
	WORD $0xdf89                               // mov    edi, ebx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x83048b41                           // mov    eax, dword [r11 + 4*rax]
	LONG $0xbd443341; BYTE $0x00               // xor    eax, dword [r13 + 4*rdi]
	LONG $0x91043341                           // xor    eax, dword [r9 + 4*rdx]
	LONG $0xa0043343                           // xor    eax, dword [r8 + 4*r12]
	WORD $0xf289                               // mov    edx, esi
	WORD $0xf389                               // mov    ebx, esi
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x933c8b41                           // mov    edi, dword [r11 + 4*rdx]
	WORD $0x894d; BYTE $0xdc                   // mov    r12, r11
	LONG $0xb57c3341; BYTE $0x00               // xor    edi, dword [r13 + 4*rsi]
	WORD $0x894d; BYTE $0xeb                   // mov    r11, r13
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xb60f; BYTE $0xd3                   // movzx    edx, bl
	LONG $0x2c4e3341                           // xor    ecx, dword [r14 + 44]
	LONG $0xb13c3341                           // xor    edi, dword [r9 + 4*rsi]
	LONG $0x903c3341                           // xor    edi, dword [r8 + 4*rdx]
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xd5                   // movzx    edx, ch
	WORD $0x8941; BYTE $0xca                   // mov    r10d, ecx
	LONG $0x18eac141                           // shr    r10d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb41c8b41                           // mov    ebx, dword [r12 + 4*rsi]
	LONG $0x955c3343; BYTE $0x00               // xor    ebx, dword [r13 + 4*r10]
	LONG $0x911c3341                           // xor    ebx, dword [r9 + 4*rdx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x881c3341                           // xor    ebx, dword [r8 + 4*rcx]
	WORD $0xf831                               // xor    eax, edi
	WORD $0xdf31                               // xor    edi, ebx
	WORD $0xc331                               // xor    ebx, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0xf989                               // mov    ecx, edi
	WORD $0x3144; BYTE $0xff                   // xor    edi, r15d
	WORD $0xcf0f                               // bswap    edi
	WORD $0xcfc1; BYTE $0x10                   // ror    edi, 16
	WORD $0xc131                               // xor    ecx, eax
	WORD $0xc1c1; BYTE $0x10                   // rol    ecx, 16
	WORD $0xcf31                               // xor    edi, ecx
	WORD $0x8941; BYTE $0xfa                   // mov    r10d, edi
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	LONG $0x307e8b45                           // mov    r15d, dword [r14 + 48]
	WORD $0x3145; BYTE $0xd7                   // xor    r15d, r10d
	WORD $0x8944; BYTE $0xfe                   // mov    esi, r15d
	WORD $0x8944; BYTE $0xfa                   // mov    edx, r15d
	WORD $0xb60f; BYTE $0xd6                   // movzx    edx, dh
	LONG $0xe7b60f45                           // movzx    r12d, r15b
	WORD $0x8945; BYTE $0xfd                   // mov    r13d, r15d
	WORD $0xcb0f                               // bswap    ebx
	WORD $0xd931                               // xor    ecx, ebx
	LONG $0x34463341                           // xor    eax, dword [r14 + 52]
	WORD $0xc831                               // xor    eax, ecx
	LONG $0x384e3341                           // xor    ecx, dword [r14 + 56]
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	LONG $0x18edc141                           // shr    r13d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb03c8b45                           // mov    r15d, dword [r8 + 4*rsi]
	LONG $0xa93c3347                           // xor    r15d, dword [r9 + 4*r13]
	LONG $0x933c3345                           // xor    r15d, dword [r11 + 4*rdx]
	MOVQ ·s2(SB), R13                          // lea    r13, [rip + _S2]
	LONG $0xa57c3347; BYTE $0x00               // xor    r15d, dword [r13 + 4*r12]
	WORD $0xc689                               // mov    esi, eax
	WORD $0xb60f; BYTE $0xd4                   // movzx    edx, ah
	LONG $0xd0b60f44                           // movzx    r10d, al
	WORD $0x8941; BYTE $0xc4                   // mov    r12d, eax
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xc6b60f40                           // movzx    eax, sil
	LONG $0x80048b41                           // mov    eax, dword [r8 + 4*rax]
	LONG $0xa1043343                           // xor    eax, dword [r9 + 4*r12]
	LONG $0x93043341                           // xor    eax, dword [r11 + 4*rdx]
	LONG $0x95443343; BYTE $0x00               // xor    eax, dword [r13 + 4*r10]
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xd5                   // movzx    edx, ch
	LONG $0xd1b60f44                           // movzx    r10d, cl
	WORD $0x8941; BYTE $0xcc                   // mov    r12d, ecx
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xceb60f40                           // movzx    ecx, sil
	LONG $0x880c8b41                           // mov    ecx, dword [r8 + 4*rcx]
	LONG $0xa10c3343                           // xor    ecx, dword [r9 + 4*r12]
	LONG $0x3c5e3341                           // xor    ebx, dword [r14 + 60]
	LONG $0x930c3341                           // xor    ecx, dword [r11 + 4*rdx]
	LONG $0x954c3343; BYTE $0x00               // xor    ecx, dword [r13 + 4*r10]
	WORD $0xfb31                               // xor    ebx, edi
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xdf89                               // mov    edi, ebx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x90148b45                           // mov    r10d, dword [r8 + 4*rdx]
	LONG $0xb9143345                           // xor    r10d, dword [r9 + 4*rdi]
	LONG $0xb3143345                           // xor    r10d, dword [r11 + 4*rsi]
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	WORD $0xb60f; BYTE $0xd3                   // movzx    edx, bl
	LONG $0x95543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rdx]
	WORD $0x894d; BYTE $0xeb                   // mov    r11, r13
	WORD $0xc831                               // xor    eax, ecx
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0x8941; BYTE $0xcc                   // mov    r12d, ecx
	WORD $0x3141; BYTE $0xc4                   // xor    r12d, eax
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	LONG $0x10cac141                           // ror    r10d, 16
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0xc0c1; BYTE $0x10                   // rol    eax, 16
	WORD $0xc90f                               // bswap    ecx
	WORD $0x3144; BYTE $0xe1                   // xor    ecx, r12d
	WORD $0xcb89                               // mov    ebx, ecx
	WORD $0xc331                               // xor    ebx, eax
	LONG $0x2434894c                           // mov    qword [rsp], r14
	LONG $0x40568b41                           // mov    edx, dword [r14 + 64]
	WORD $0xda31                               // xor    edx, ebx
	WORD $0xd689                               // mov    esi, edx
	WORD $0xb60f; BYTE $0xfe                   // movzx    edi, dh
	LONG $0xeab60f44                           // movzx    r13d, dl
	WORD $0x3145; BYTE $0xd4                   // xor    r12d, r10d
	LONG $0x44463341                           // xor    eax, dword [r14 + 68]
	WORD $0x3144; BYTE $0xe0                   // xor    eax, r12d
	LONG $0x485e3341                           // xor    ebx, dword [r14 + 72]
	WORD $0x3144; BYTE $0xe3                   // xor    ebx, r12d
	WORD $0xeac1; BYTE $0x18                   // shr    edx, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	WORD $0x894d; BYTE $0xde                   // mov    r14, r11
	LONG $0xb33c8b45                           // mov    r15d, dword [r11 + 4*rsi]
	LONG $0x903c3345                           // xor    r15d, dword [r8 + 4*rdx]
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xb93c3345                           // xor    r15d, dword [r9 + 4*rdi]
	MOVQ ·x2(SB), R9                           // lea    r9, [rip + _X2]
	LONG $0xa93c3347                           // xor    r15d, dword [r9 + 4*r13]
	WORD $0xc289                               // mov    edx, eax
	WORD $0xb60f; BYTE $0xf4                   // movzx    esi, ah
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0x8941; BYTE $0xc4                   // mov    r12d, eax
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x86048b41                           // mov    eax, dword [r14 + 4*rax]
	LONG $0xa0043343                           // xor    eax, dword [r8 + 4*r12]
	WORD $0x894d; BYTE $0xc5                   // mov    r13, r8
	WORD $0x894d; BYTE $0xdc                   // mov    r12, r11
	LONG $0xb3043341                           // xor    eax, dword [r11 + 4*rsi]
	WORD $0x894d; BYTE $0xc8                   // mov    r8, r9
	LONG $0xb9043341                           // xor    eax, dword [r9 + 4*rdi]
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xde89                               // mov    esi, ebx
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	WORD $0x894d; BYTE $0xf1                   // mov    r9, r14
	LONG $0x963c8b41                           // mov    edi, dword [r14 + 4*rdx]
	WORD $0x894d; BYTE $0xeb                   // mov    r11, r13
	LONG $0xb57c3341; BYTE $0x00               // xor    edi, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xb60f; BYTE $0xd3                   // movzx    edx, bl
	LONG $0x24348b4c                           // mov    r14, qword [rsp]
	LONG $0x4c4e3341                           // xor    ecx, dword [r14 + 76]
	LONG $0xb43c3341                           // xor    edi, dword [r12 + 4*rsi]
	LONG $0x903c3341                           // xor    edi, dword [r8 + 4*rdx]
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xd5                   // movzx    edx, ch
	WORD $0x8941; BYTE $0xca                   // mov    r10d, ecx
	LONG $0x18eac141                           // shr    r10d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb11c8b41                           // mov    ebx, dword [r9 + 4*rsi]
	LONG $0x955c3343; BYTE $0x00               // xor    ebx, dword [r13 + 4*r10]
	LONG $0x941c3341                           // xor    ebx, dword [r12 + 4*rdx]
	WORD $0x894d; BYTE $0xe1                   // mov    r9, r12
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x881c3341                           // xor    ebx, dword [r8 + 4*rcx]
	WORD $0xf831                               // xor    eax, edi
	WORD $0xdf31                               // xor    edi, ebx
	WORD $0xc331                               // xor    ebx, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0xf989                               // mov    ecx, edi
	WORD $0x3144; BYTE $0xff                   // xor    edi, r15d
	WORD $0xcf0f                               // bswap    edi
	WORD $0xcfc1; BYTE $0x10                   // ror    edi, 16
	WORD $0xc131                               // xor    ecx, eax
	WORD $0xc1c1; BYTE $0x10                   // rol    ecx, 16
	WORD $0xcf31                               // xor    edi, ecx
	WORD $0x8941; BYTE $0xfa                   // mov    r10d, edi
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	LONG $0x507e8b45                           // mov    r15d, dword [r14 + 80]
	WORD $0x3145; BYTE $0xd7                   // xor    r15d, r10d
	WORD $0x8944; BYTE $0xfe                   // mov    esi, r15d
	WORD $0x8944; BYTE $0xfa                   // mov    edx, r15d
	WORD $0xb60f; BYTE $0xd6                   // movzx    edx, dh
	LONG $0xe7b60f45                           // movzx    r12d, r15b
	WORD $0x8945; BYTE $0xfd                   // mov    r13d, r15d
	WORD $0xcb0f                               // bswap    ebx
	WORD $0xd931                               // xor    ecx, ebx
	LONG $0x54463341                           // xor    eax, dword [r14 + 84]
	WORD $0xc831                               // xor    eax, ecx
	LONG $0x584e3341                           // xor    ecx, dword [r14 + 88]
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	LONG $0x18edc141                           // shr    r13d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb03c8b45                           // mov    r15d, dword [r8 + 4*rsi]
	LONG $0xa93c3347                           // xor    r15d, dword [r9 + 4*r13]
	WORD $0x894d; BYTE $0xdd                   // mov    r13, r11
	LONG $0x933c3345                           // xor    r15d, dword [r11 + 4*rdx]
	MOVQ ·s2(SB), R11                          // lea    r11, [rip + _S2]
	LONG $0xa33c3347                           // xor    r15d, dword [r11 + 4*r12]
	WORD $0xc689                               // mov    esi, eax
	WORD $0xb60f; BYTE $0xd4                   // movzx    edx, ah
	LONG $0xd0b60f44                           // movzx    r10d, al
	WORD $0x8941; BYTE $0xc4                   // mov    r12d, eax
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xc6b60f40                           // movzx    eax, sil
	LONG $0x80048b41                           // mov    eax, dword [r8 + 4*rax]
	LONG $0xa1043343                           // xor    eax, dword [r9 + 4*r12]
	LONG $0x95443341; BYTE $0x00               // xor    eax, dword [r13 + 4*rdx]
	LONG $0x93043343                           // xor    eax, dword [r11 + 4*r10]
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xd5                   // movzx    edx, ch
	LONG $0xd1b60f44                           // movzx    r10d, cl
	WORD $0x8941; BYTE $0xcc                   // mov    r12d, ecx
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xceb60f40                           // movzx    ecx, sil
	LONG $0x880c8b41                           // mov    ecx, dword [r8 + 4*rcx]
	LONG $0xa10c3343                           // xor    ecx, dword [r9 + 4*r12]
	LONG $0x5c5e3341                           // xor    ebx, dword [r14 + 92]
	LONG $0x954c3341; BYTE $0x00               // xor    ecx, dword [r13 + 4*rdx]
	LONG $0x930c3343                           // xor    ecx, dword [r11 + 4*r10]
	WORD $0xfb31                               // xor    ebx, edi
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xdf89                               // mov    edi, ebx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x90148b45                           // mov    r10d, dword [r8 + 4*rdx]
	LONG $0xb9143345                           // xor    r10d, dword [r9 + 4*rdi]
	LONG $0xb5543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xd3                   // movzx    edx, bl
	LONG $0x93143345                           // xor    r10d, dword [r11 + 4*rdx]
	WORD $0xc831                               // xor    eax, ecx
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0x8941; BYTE $0xcc                   // mov    r12d, ecx
	WORD $0x3141; BYTE $0xc4                   // xor    r12d, eax
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	LONG $0x10cac141                           // ror    r10d, 16
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0xc0c1; BYTE $0x10                   // rol    eax, 16
	WORD $0xc90f                               // bswap    ecx
	WORD $0x3144; BYTE $0xe1                   // xor    ecx, r12d
	WORD $0xcb89                               // mov    ebx, ecx
	WORD $0xc331                               // xor    ebx, eax
	LONG $0x60568b41                           // mov    edx, dword [r14 + 96]
	WORD $0xda31                               // xor    edx, ebx
	WORD $0xd689                               // mov    esi, edx
	WORD $0xb60f; BYTE $0xfe                   // movzx    edi, dh
	LONG $0xeab60f44                           // movzx    r13d, dl
	WORD $0x3145; BYTE $0xd4                   // xor    r12d, r10d
	LONG $0x64463341                           // xor    eax, dword [r14 + 100]
	WORD $0x3144; BYTE $0xe0                   // xor    eax, r12d
	LONG $0x685e3341                           // xor    ebx, dword [r14 + 104]
	WORD $0x3144; BYTE $0xe3                   // xor    ebx, r12d
	WORD $0xeac1; BYTE $0x18                   // shr    edx, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb33c8b45                           // mov    r15d, dword [r11 + 4*rsi]
	MOVQ ·s1(SB), R14                          // lea    r14, [rip + _S1]
	LONG $0x963c3345                           // xor    r15d, dword [r14 + 4*rdx]
	LONG $0xb93c3345                           // xor    r15d, dword [r9 + 4*rdi]
	LONG $0xa83c3347                           // xor    r15d, dword [r8 + 4*r13]
	WORD $0xc289                               // mov    edx, eax
	WORD $0xb60f; BYTE $0xf4                   // movzx    esi, ah
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0x8941; BYTE $0xc4                   // mov    r12d, eax
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x83048b41                           // mov    eax, dword [r11 + 4*rax]
	LONG $0xa6043343                           // xor    eax, dword [r14 + 4*r12]
	WORD $0x894d; BYTE $0xf5                   // mov    r13, r14
	LONG $0xb1043341                           // xor    eax, dword [r9 + 4*rsi]
	WORD $0x894d; BYTE $0xc6                   // mov    r14, r8
	LONG $0xb8043341                           // xor    eax, dword [r8 + 4*rdi]
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xde89                               // mov    esi, ebx
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	WORD $0x894d; BYTE $0xdc                   // mov    r12, r11
	LONG $0x933c8b41                           // mov    edi, dword [r11 + 4*rdx]
	WORD $0x894d; BYTE $0xeb                   // mov    r11, r13
	LONG $0xb57c3341; BYTE $0x00               // xor    edi, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xb60f; BYTE $0xd3                   // movzx    edx, bl
	LONG $0x24048b4c                           // mov    r8, qword [rsp]
	LONG $0x6c483341                           // xor    ecx, dword [r8 + 108]
	LONG $0xb13c3341                           // xor    edi, dword [r9 + 4*rsi]
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0x963c3341                           // xor    edi, dword [r14 + 4*rdx]
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xd5                   // movzx    edx, ch
	WORD $0x8941; BYTE $0xca                   // mov    r10d, ecx
	LONG $0x18eac141                           // shr    r10d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb41c8b41                           // mov    ebx, dword [r12 + 4*rsi]
	LONG $0x931c3343                           // xor    ebx, dword [r11 + 4*r10]
	LONG $0x911c3341                           // xor    ebx, dword [r9 + 4*rdx]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8e1c3341                           // xor    ebx, dword [r14 + 4*rcx]
	WORD $0xf831                               // xor    eax, edi
	WORD $0xdf31                               // xor    edi, ebx
	WORD $0xc331                               // xor    ebx, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0xf989                               // mov    ecx, edi
	WORD $0x3144; BYTE $0xff                   // xor    edi, r15d
	WORD $0xcf0f                               // bswap    edi
	WORD $0xcfc1; BYTE $0x10                   // ror    edi, 16
	WORD $0xc131                               // xor    ecx, eax
	WORD $0xc1c1; BYTE $0x10                   // rol    ecx, 16
	WORD $0xcf31                               // xor    edi, ecx
	WORD $0x8941; BYTE $0xfa                   // mov    r10d, edi
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	LONG $0x70488b45                           // mov    r9d, dword [r8 + 112]
	WORD $0x3145; BYTE $0xd1                   // xor    r9d, r10d
	WORD $0x8944; BYTE $0xce                   // mov    esi, r9d
	WORD $0x8944; BYTE $0xca                   // mov    edx, r9d
	WORD $0xb60f; BYTE $0xd6                   // movzx    edx, dh
	LONG $0xf9b60f45                           // movzx    r15d, r9b
	WORD $0x8945; BYTE $0xcc                   // mov    r12d, r9d
	WORD $0xcb0f                               // bswap    ebx
	WORD $0xd931                               // xor    ecx, ebx
	LONG $0x74403341                           // xor    eax, dword [r8 + 116]
	WORD $0xc831                               // xor    eax, ecx
	LONG $0x78483341                           // xor    ecx, dword [r8 + 120]
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb6148b45                           // mov    r10d, dword [r14 + 4*rsi]
	LONG $0xa5543347; BYTE $0x00               // xor    r10d, dword [r13 + 4*r12]
	WORD $0x894d; BYTE $0xd9                   // mov    r9, r11
	LONG $0x93143345                           // xor    r10d, dword [r11 + 4*rdx]
	MOVQ ·s2(SB), R11                          // lea    r11, [rip + _S2]
	LONG $0xbb143347                           // xor    r10d, dword [r11 + 4*r15]
	WORD $0xc689                               // mov    esi, eax
	WORD $0xb60f; BYTE $0xd4                   // movzx    edx, ah
	LONG $0xf8b60f44                           // movzx    r15d, al
	WORD $0x8941; BYTE $0xc4                   // mov    r12d, eax
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xc6b60f40                           // movzx    eax, sil
	LONG $0x86048b41                           // mov    eax, dword [r14 + 4*rax]
	LONG $0xa5443343; BYTE $0x00               // xor    eax, dword [r13 + 4*r12]
	LONG $0x91043341                           // xor    eax, dword [r9 + 4*rdx]
	LONG $0xbb043343                           // xor    eax, dword [r11 + 4*r15]
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xd5                   // movzx    edx, ch
	LONG $0xf9b60f44                           // movzx    r15d, cl
	WORD $0x8941; BYTE $0xcc                   // mov    r12d, ecx
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xceb60f40                           // movzx    ecx, sil
	LONG $0x8e0c8b41                           // mov    ecx, dword [r14 + 4*rcx]
	LONG $0xa54c3343; BYTE $0x00               // xor    ecx, dword [r13 + 4*r12]
	LONG $0x7c583341                           // xor    ebx, dword [r8 + 124]
	LONG $0x910c3341                           // xor    ecx, dword [r9 + 4*rdx]
	LONG $0xbb0c3343                           // xor    ecx, dword [r11 + 4*r15]
	WORD $0xfb31                               // xor    ebx, edi
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xdf89                               // mov    edi, ebx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x96248b45                           // mov    r12d, dword [r14 + 4*rdx]
	LONG $0xbd643345; BYTE $0x00               // xor    r12d, dword [r13 + 4*rdi]
	LONG $0xb1243345                           // xor    r12d, dword [r9 + 4*rsi]
	WORD $0xb60f; BYTE $0xd3                   // movzx    edx, bl
	LONG $0x93243345                           // xor    r12d, dword [r11 + 4*rdx]
	WORD $0xc831                               // xor    eax, ecx
	WORD $0x3144; BYTE $0xe1                   // xor    ecx, r12d
	WORD $0x3141; BYTE $0xc4                   // xor    r12d, eax
	WORD $0x3144; BYTE $0xd0                   // xor    eax, r10d
	WORD $0x8941; BYTE $0xcf                   // mov    r15d, ecx
	WORD $0x3141; BYTE $0xc7                   // xor    r15d, eax
	WORD $0x0f41; BYTE $0xcc                   // bswap    r12d
	LONG $0x10ccc141                           // ror    r12d, 16
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0xc0c1; BYTE $0x10                   // rol    eax, 16
	WORD $0xc90f                               // bswap    ecx
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0xcb89                               // mov    ebx, ecx
	WORD $0xc331                               // xor    ebx, eax
	LONG $0x80908b41; WORD $0x0000; BYTE $0x00 // mov    edx, dword [r8 + 128]
	WORD $0xda31                               // xor    edx, ebx
	WORD $0xd689                               // mov    esi, edx
	WORD $0xb60f; BYTE $0xfe                   // movzx    edi, dh
	LONG $0xd2b60f44                           // movzx    r10d, dl
	WORD $0x3145; BYTE $0xe7                   // xor    r15d, r12d
	LONG $0x84803341; WORD $0x0000; BYTE $0x00 // xor    eax, dword [r8 + 132]
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	LONG $0x88983341; WORD $0x0000; BYTE $0x00 // xor    ebx, dword [r8 + 136]
	WORD $0x3144; BYTE $0xfb                   // xor    ebx, r15d
	WORD $0xeac1; BYTE $0x18                   // shr    edx, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	LONG $0xb33c8b45                           // mov    r15d, dword [r11 + 4*rsi]
	LONG $0x913c3345                           // xor    r15d, dword [r9 + 4*rdx]
	LONG $0xbd7c3345; BYTE $0x00               // xor    r15d, dword [r13 + 4*rdi]
	LONG $0x963c3347                           // xor    r15d, dword [r14 + 4*r10]
	WORD $0xc289                               // mov    edx, eax
	WORD $0xb60f; BYTE $0xf4                   // movzx    esi, ah
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0x8941; BYTE $0xc2                   // mov    r10d, eax
	LONG $0x18eac141                           // shr    r10d, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x83048b41                           // mov    eax, dword [r11 + 4*rax]
	LONG $0x91043343                           // xor    eax, dword [r9 + 4*r10]
	LONG $0xb5443341; BYTE $0x00               // xor    eax, dword [r13 + 4*rsi]
	LONG $0xbe043341                           // xor    eax, dword [r14 + 4*rdi]
	WORD $0xda89                               // mov    edx, ebx
	WORD $0xde89                               // mov    esi, ebx
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x93148b45                           // mov    r10d, dword [r11 + 4*rdx]
	LONG $0xb1143345                           // xor    r10d, dword [r9 + 4*rsi]
	WORD $0xb60f; BYTE $0xd7                   // movzx    edx, bh
	WORD $0xb60f; BYTE $0xf3                   // movzx    esi, bl
	LONG $0x8c883341; WORD $0x0000; BYTE $0x00 // xor    ecx, dword [r8 + 140]
	LONG $0x95543345; BYTE $0x00               // xor    r10d, dword [r13 + 4*rdx]
	LONG $0xb6143345                           // xor    r10d, dword [r14 + 4*rsi]
	WORD $0x3144; BYTE $0xe1                   // xor    ecx, r12d
	WORD $0xca89                               // mov    edx, ecx
	WORD $0xb60f; BYTE $0xf5                   // movzx    esi, ch
	WORD $0xcf89                               // mov    edi, ecx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x931c8b41                           // mov    ebx, dword [r11 + 4*rdx]
	LONG $0xb91c3341                           // xor    ebx, dword [r9 + 4*rdi]
	LONG $0xb55c3341; BYTE $0x00               // xor    ebx, dword [r13 + 4*rsi]
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x8e1c3341                           // xor    ebx, dword [r14 + 4*rcx]
	WORD $0x3144; BYTE $0xd0                   // xor    eax, r10d
	WORD $0x3141; BYTE $0xda                   // xor    r10d, ebx
	WORD $0xc331                               // xor    ebx, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0x8944; BYTE $0xd1                   // mov    ecx, r10d
	WORD $0x3145; BYTE $0xfa                   // xor    r10d, r15d
	WORD $0x0f41; BYTE $0xca                   // bswap    r10d
	LONG $0x10cac141                           // ror    r10d, 16
	WORD $0xc131                               // xor    ecx, eax
	WORD $0xc1c1; BYTE $0x10                   // rol    ecx, 16
	WORD $0x3141; BYTE $0xca                   // xor    r10d, ecx
	WORD $0x8945; BYTE $0xd7                   // mov    r15d, r10d
	WORD $0x3141; BYTE $0xc7                   // xor    r15d, eax
	LONG $0x90908b41; WORD $0x0000; BYTE $0x00 // mov    edx, dword [r8 + 144]
	WORD $0x3144; BYTE $0xfa                   // xor    edx, r15d
	WORD $0xd689                               // mov    esi, edx
	WORD $0xb60f; BYTE $0xfe                   // movzx    edi, dh
	LONG $0xe2b60f44                           // movzx    r12d, dl
	WORD $0xcb0f                               // bswap    ebx
	WORD $0xd931                               // xor    ecx, ebx
	LONG $0x94803341; WORD $0x0000; BYTE $0x00 // xor    eax, dword [r8 + 148]
	WORD $0xc831                               // xor    eax, ecx
	LONG $0x98883341; WORD $0x0000; BYTE $0x00 // xor    ecx, dword [r8 + 152]
	WORD $0x894d; BYTE $0xc6                   // mov    r14, r8
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0xeac1; BYTE $0x18                   // shr    edx, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	MOVQ ·x2(SB), R8                           // lea    r8, [rip + _X2]
	LONG $0xb03c8b45                           // mov    r15d, dword [r8 + 4*rsi]
	LONG $0x957c3345; BYTE $0x00               // xor    r15d, dword [r13 + 4*rdx]
	LONG $0xb93c3345                           // xor    r15d, dword [r9 + 4*rdi]
	LONG $0xa33c3347                           // xor    r15d, dword [r11 + 4*r12]
	WORD $0xc289                               // mov    edx, eax
	WORD $0xb60f; BYTE $0xf4                   // movzx    esi, ah
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0x8941; BYTE $0xc4                   // mov    r12d, eax
	LONG $0x18ecc141                           // shr    r12d, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x80048b41                           // mov    eax, dword [r8 + 4*rax]
	LONG $0xa5443343; BYTE $0x00               // xor    eax, dword [r13 + 4*r12]
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xb1043341                           // xor    eax, dword [r9 + 4*rsi]
	LONG $0xbb043341                           // xor    eax, dword [r11 + 4*rdi]
	WORD $0xca89                               // mov    edx, ecx
	WORD $0xb60f; BYTE $0xf5                   // movzx    esi, ch
	WORD $0xb60f; BYTE $0xf9                   // movzx    edi, cl
	WORD $0xe9c1; BYTE $0x18                   // shr    ecx, 24
	WORD $0xeac1; BYTE $0x10                   // shr    edx, 16
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x90148b41                           // mov    edx, dword [r8 + 4*rdx]
	WORD $0x894d; BYTE $0xe9                   // mov    r9, r13
	LONG $0x8d543341; BYTE $0x00               // xor    edx, dword [r13 + 4*rcx]
	LONG $0x9c9e3341; WORD $0x0000; BYTE $0x00 // xor    ebx, dword [r14 + 156]
	LONG $0xb4143341                           // xor    edx, dword [r12 + 4*rsi]
	LONG $0xbb143341                           // xor    edx, dword [r11 + 4*rdi]
	WORD $0x3144; BYTE $0xd3                   // xor    ebx, r10d
	WORD $0xd989                               // mov    ecx, ebx
	WORD $0xb60f; BYTE $0xf7                   // movzx    esi, bh
	WORD $0xdf89                               // mov    edi, ebx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xe9c1; BYTE $0x10                   // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x882c8b45                           // mov    r13d, dword [r8 + 4*rcx]
	LONG $0xb92c3345                           // xor    r13d, dword [r9 + 4*rdi]
	LONG $0xb42c3345                           // xor    r13d, dword [r12 + 4*rsi]
	WORD $0xb60f; BYTE $0xcb                   // movzx    ecx, bl
	LONG $0x8b2c3345                           // xor    r13d, dword [r11 + 4*rcx]
	WORD $0xd031                               // xor    eax, edx
	WORD $0x3144; BYTE $0xea                   // xor    edx, r13d
	WORD $0x3141; BYTE $0xc5                   // xor    r13d, eax
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0x8941; BYTE $0xd2                   // mov    r10d, edx
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	WORD $0x0f41; BYTE $0xcd                   // bswap    r13d
	LONG $0x10cdc141                           // ror    r13d, 16
	WORD $0x3144; BYTE $0xfa                   // xor    edx, r15d
	WORD $0xc0c1; BYTE $0x10                   // rol    eax, 16
	WORD $0xca0f                               // bswap    edx
	WORD $0x3144; BYTE $0xd2                   // xor    edx, r10d
	WORD $0xd389                               // mov    ebx, edx
	WORD $0xc331                               // xor    ebx, eax
	WORD $0x894d; BYTE $0xf1                   // mov    r9, r14
	LONG $0xa08e8b41; WORD $0x0000; BYTE $0x00 // mov    ecx, dword [r14 + 160]
	WORD $0xd931                               // xor    ecx, ebx
	WORD $0xce89                               // mov    esi, ecx
	WORD $0xb60f; BYTE $0xfd                   // movzx    edi, ch
	LONG $0xf9b60f44                           // movzx    r15d, cl
	WORD $0x3145; BYTE $0xea                   // xor    r10d, r13d
	LONG $0xa4863341; WORD $0x0000; BYTE $0x00 // xor    eax, dword [r14 + 164]
	WORD $0x3144; BYTE $0xd0                   // xor    eax, r10d
	LONG $0xa89e3341; WORD $0x0000; BYTE $0x00 // xor    ebx, dword [r14 + 168]
	WORD $0x3144; BYTE $0xd3                   // xor    ebx, r10d
	WORD $0xe9c1; BYTE $0x18                   // shr    ecx, 24
	WORD $0xeec1; BYTE $0x10                   // shr    esi, 16
	LONG $0xf6b60f40                           // movzx    esi, sil
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	LONG $0xb3248b45                           // mov    r12d, dword [r11 + 4*rsi]
	MOVQ ·s1(SB), R14                          // lea    r14, [rip + _S1]
	LONG $0x8e243345                           // xor    r12d, dword [r14 + 4*rcx]
	MOVQ ·x1(SB), R11                          // lea    r11, [rip + _X1]
	LONG $0xbb243345                           // xor    r12d, dword [r11 + 4*rdi]
	MOVQ ·x2(SB), DI                           // lea    rdi, [rip + _X2]
	LONG $0xbf243346                           // xor    r12d, dword [rdi + 4*r15]
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xc689                               // mov    esi, eax
	WORD $0xeec1; BYTE $0x18                   // shr    esi, 24
	WORD $0xe9c1; BYTE $0x10                   // shr    ecx, 16
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x88148b45                           // mov    r10d, dword [r8 + 4*rcx]
	LONG $0xb6143345                           // xor    r10d, dword [r14 + 4*rsi]
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	WORD $0xb60f; BYTE $0xcc                   // movzx    ecx, ah
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x8b143345                           // xor    r10d, dword [r11 + 4*rcx]
	WORD $0x894d; BYTE $0xde                   // mov    r14, r11
	LONG $0x87143344                           // xor    r10d, dword [rdi + 4*rax]
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xd989                               // mov    ecx, ebx
	WORD $0xe9c1; BYTE $0x18                   // shr    ecx, 24
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x803c8b45                           // mov    r15d, dword [r8 + 4*rax]
	WORD $0x894d; BYTE $0xc3                   // mov    r11, r8
	LONG $0x8e3c3344                           // xor    r15d, dword [rsi + 4*rcx]
	WORD $0x8949; BYTE $0xf0                   // mov    r8, rsi
	WORD $0xb60f; BYTE $0xc7                   // movzx    eax, bh
	WORD $0xb60f; BYTE $0xcb                   // movzx    ecx, bl
	WORD $0x894c; BYTE $0xcb                   // mov    rbx, r9
	LONG $0xac913341; WORD $0x0000; BYTE $0x00 // xor    edx, dword [r9 + 172]
	WORD $0x894d; BYTE $0xf1                   // mov    r9, r14
	LONG $0x863c3345                           // xor    r15d, dword [r14 + 4*rax]
	LONG $0x8f3c3344                           // xor    r15d, dword [rdi + 4*rcx]
	WORD $0x8949; BYTE $0xfe                   // mov    r14, rdi
	WORD $0x3144; BYTE $0xea                   // xor    edx, r13d
	WORD $0xd089                               // mov    eax, edx
	WORD $0xb60f; BYTE $0xf6                   // movzx    esi, dh
	WORD $0xd789                               // mov    edi, edx
	WORD $0xefc1; BYTE $0x18                   // shr    edi, 24
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x830c8b41                           // mov    ecx, dword [r11 + 4*rax]
	LONG $0xb80c3341                           // xor    ecx, dword [r8 + 4*rdi]
	WORD $0x894d; BYTE $0xc5                   // mov    r13, r8
	LONG $0xb10c3341                           // xor    ecx, dword [r9 + 4*rsi]
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x860c3341                           // xor    ecx, dword [r14 + 4*rax]
	WORD $0x3145; BYTE $0xfa                   // xor    r10d, r15d
	WORD $0x3141; BYTE $0xcf                   // xor    r15d, ecx
	WORD $0x3144; BYTE $0xd1                   // xor    ecx, r10d
	WORD $0x3145; BYTE $0xe2                   // xor    r10d, r12d
	WORD $0x8944; BYTE $0xf8                   // mov    eax, r15d
	WORD $0x3145; BYTE $0xe7                   // xor    r15d, r12d
	WORD $0x0f41; BYTE $0xcf                   // bswap    r15d
	LONG $0x10cfc141                           // ror    r15d, 16
	WORD $0x3144; BYTE $0xd0                   // xor    eax, r10d
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	WORD $0xc90f                               // bswap    ecx
	WORD $0x3141; BYTE $0xc7                   // xor    r15d, eax
	WORD $0xc831                               // xor    eax, ecx
	LONG $0x00bc8b33; WORD $0x0000             // xor    ecx, dword [rbx + 188]
	WORD $0x3144; BYTE $0xf9                   // xor    ecx, r15d
	WORD $0x3145; BYTE $0xd7                   // xor    r15d, r10d
	LONG $0xb4933344; WORD $0x0000; BYTE $0x00 // xor    r10d, dword [rbx + 180]
	LONG $0x00b0938b; WORD $0x0000             // mov    edx, dword [rbx + 176]
	WORD $0x3141; BYTE $0xc2                   // xor    r10d, eax
	LONG $0x00b88333; WORD $0x0000             // xor    eax, dword [rbx + 184]
	WORD $0x8949; BYTE $0xd8                   // mov    r8, rbx
	WORD $0x3144; BYTE $0xfa                   // xor    edx, r15d
	WORD $0x3144; BYTE $0xf8                   // xor    eax, r15d
	WORD $0xd689                               // mov    esi, edx
	WORD $0xd789                               // mov    edi, edx
	WORD $0xb60f; BYTE $0xda                   // movzx    ebx, dl
	WORD $0xeac1; BYTE $0x03                   // shr    edx, 3
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x14b60f41; BYTE $0x91               // movzx    edx, byte [r9 + 4*rdx]
	LONG $0x247c8b4c; BYTE $0x10               // mov    r15, qword [rsp + 16]
	WORD $0x8841; BYTE $0x17                   // mov    byte [r15], dl
	WORD $0xeec1; BYTE $0x02                   // shr    esi, 2
	LONG $0xd6b60f40                           // movzx    edx, sil
	LONG $0x54b60f41; WORD $0x0196             // movzx    edx, byte [r14 + 4*rdx + 1]
	LONG $0x01578841                           // mov    byte [r15 + 1], dl
	WORD $0xefd1                               // shr    edi, 1
	LONG $0xd7b60f40                           // movzx    edx, dil
	LONG $0x54b60f41; WORD $0x0095             // movzx    edx, byte [r13 + 4*rdx]
	LONG $0x02578841                           // mov    byte [r15 + 2], dl
	MOVQ ·s2(SB), R11                          // lea    r11, [rip + _S2]
	LONG $0x14b60f41; BYTE $0x9b               // movzx    edx, byte [r11 + 4*rbx]
	LONG $0x03578841                           // mov    byte [r15 + 3], dl
	WORD $0x8944; BYTE $0xd2                   // mov    edx, r10d
	WORD $0x8944; BYTE $0xd6                   // mov    esi, r10d
	LONG $0xfab60f41                           // movzx    edi, r10b
	LONG $0x03eac141                           // shr    r10d, 3
	LONG $0xd2b60f45                           // movzx    r10d, r10b
	LONG $0x14b60f47; BYTE $0x91               // movzx    r10d, byte [r9 + 4*r10]
	LONG $0x04578845                           // mov    byte [r15 + 4], r10b
	WORD $0xeac1; BYTE $0x02                   // shr    edx, 2
	WORD $0xb60f; BYTE $0xd2                   // movzx    edx, dl
	LONG $0x54b60f41; WORD $0x0196             // movzx    edx, byte [r14 + 4*rdx + 1]
	LONG $0x05578841                           // mov    byte [r15 + 5], dl
	WORD $0xeed1                               // shr    esi, 1
	LONG $0xd6b60f40                           // movzx    edx, sil
	LONG $0x54b60f41; WORD $0x0095             // movzx    edx, byte [r13 + 4*rdx]
	LONG $0x06578841                           // mov    byte [r15 + 6], dl
	LONG $0x14b60f41; BYTE $0xbb               // movzx    edx, byte [r11 + 4*rdi]
	LONG $0x07578841                           // mov    byte [r15 + 7], dl
	WORD $0xc289                               // mov    edx, eax
	WORD $0xc689                               // mov    esi, eax
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0xe8c1; BYTE $0x03                   // shr    eax, 3
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x04b60f41; BYTE $0x81               // movzx    eax, byte [r9 + 4*rax]
	LONG $0x08478841                           // mov    byte [r15 + 8], al
	WORD $0xeac1; BYTE $0x02                   // shr    edx, 2
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x44b60f41; WORD $0x0186             // movzx    eax, byte [r14 + 4*rax + 1]
	LONG $0x09478841                           // mov    byte [r15 + 9], al
	WORD $0xeed1                               // shr    esi, 1
	LONG $0xc6b60f40                           // movzx    eax, sil
	LONG $0x44b60f41; WORD $0x0085             // movzx    eax, byte [r13 + 4*rax]
	LONG $0x0a478841                           // mov    byte [r15 + 10], al
	LONG $0x04b60f41; BYTE $0xbb               // movzx    eax, byte [r11 + 4*rdi]
	LONG $0x0b478841                           // mov    byte [r15 + 11], al
	WORD $0xc889                               // mov    eax, ecx
	WORD $0xca89                               // mov    edx, ecx
	WORD $0xb60f; BYTE $0xf1                   // movzx    esi, cl
	WORD $0xe9c1; BYTE $0x03                   // shr    ecx, 3
	WORD $0xb60f; BYTE $0xc9                   // movzx    ecx, cl
	LONG $0x0cb60f41; BYTE $0x89               // movzx    ecx, byte [r9 + 4*rcx]
	LONG $0x0c4f8841                           // mov    byte [r15 + 12], cl
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x44b60f41; WORD $0x0186             // movzx    eax, byte [r14 + 4*rax + 1]
	LONG $0x0d478841                           // mov    byte [r15 + 13], al
	WORD $0xead1                               // shr    edx, 1
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	LONG $0x44b60f41; WORD $0x0085             // movzx    eax, byte [r13 + 4*rax]
	LONG $0x0e478841                           // mov    byte [r15 + 14], al
	LONG $0x04b60f41; BYTE $0xb3               // movzx    eax, byte [r11 + 4*rsi]
	LONG $0x0f478841                           // mov    byte [r15 + 15], al
	LONG $0x6f0f41f3; BYTE $0x07               // movdqu    xmm0, oword [r15]
	QUAD $0x0000c0886f0f4166; BYTE $0x00       // movdqa    xmm1, oword [r8 + 192]
	LONG $0x00380f66; WORD $0x004d             // pshufb    xmm1, oword 0[rbp]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7f0f41f3; BYTE $0x0f               // movdqu    oword [r15], xmm1
	SUBQ $8, SP
	RET
